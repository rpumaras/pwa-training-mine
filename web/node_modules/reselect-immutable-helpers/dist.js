'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createHasSelector = exports.invertSelector = exports.createGetSelector = exports.createPropsSelector = exports.ensureJSSelector = exports.selectorToJS = exports.createImmutableComparingSelector = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _reselect = require('reselect');

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createImmutableComparingSelector = exports.createImmutableComparingSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _immutable2.default.is);

/**
 * Creates a selector that handles the conversion from Immutable
 * objects to plain Javascript objects.
 *
 * If the result of the input selector is identical to its previous
 * result using Immutable.is, this will return the same JS object as
 * the previous call.
 *
 * This simplifies downstream update checks substantially, since a
 * shallow comparison of the resulting JS objects will only show
 * equality if they are deeply equal. This allows optimization of
 * updates using shallow comparisons in reselect, react-redux, and
 * various React utilities.
 *
 * @param {function} selector - A selector returning an Immutable object
 * @returns {function}
 */
var selectorToJS = exports.selectorToJS = function selectorToJS(selector) {
    return createImmutableComparingSelector(selector, function (raw) {
        return raw ? raw.toJS() : null;
    });
};

var ensureJSSelector = exports.ensureJSSelector = function ensureJSSelector(selector) {
    return createImmutableComparingSelector(selector, function () {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (!item || (typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {
            return item;
        }

        if ('toJS' in item && typeof item.toJS === 'function') {
            return item.toJS();
        }
        return item;
    });
};

var createPropsSelector = exports.createPropsSelector = function createPropsSelector(selectors) {
    var wrappedSelectors = {};
    Object.keys(selectors).forEach(function (key) {
        wrappedSelectors[key] = ensureJSSelector(selectors[key]);
    });
    return (0, _reselect.createStructuredSelector)(wrappedSelectors);
};

/**
 * Creates a selector that gets a value from a selected Immutable object.
 *
 * @param {function} selector - A selector returning an Immutable object
 * @param {string|number|function} key - The key to be looked up on
 *   the Immutable object. If a function is passed it is treated as a
 *   selector returning the desired key.
 * @param {*} [defaultValue] - An optional value to be returned if the
 *   key does not exist in the Immutable object.
 * @returns {function}
 */
var createGetSelector = exports.createGetSelector = function createGetSelector(selector, key, defaultValue) {
    if (typeof key === 'function') {
        return (0, _reselect.createSelector)(selector, key, function (obj, keyValue) {
            return obj.get(keyValue, defaultValue);
        });
    }
    return (0, _reselect.createSelector)(selector, function (obj) {
        return obj.get(key, defaultValue);
    });
};

var invertSelector = exports.invertSelector = function invertSelector(selector) {
    return (0, _reselect.createSelector)(selector, function (bool) {
        return !bool;
    });
};

/**
 * Creates a selector that checks whether a key exists in a selected
 * Immutable object.
 *
 * @param {function} selector - A selector returning an Immutable object
 * @param {string|number|function} key - The key to be checked on
 *   the Immutable object. If a function is passed it is treated as a
 *   selector returning the desired key.
 * @returns {function}
 */
var createHasSelector = exports.createHasSelector = function createHasSelector(selector, key) {
    if (typeof key === 'function') {
        return (0, _reselect.createSelector)(selector, key, function (obj, keyValue) {
            return obj.has(keyValue);
        });
    }
    return (0, _reselect.createSelector)(selector, function (obj) {
        return obj.has(key);
    });
};

