/**
 * Relays sandy analytics js calls to the backend by use of a tracking pixel
 */

(function(root, factory) {
    if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('./lib/sha1/sha1'));
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['./lib/sha1/sha1'], factory);
    } else {
        root.Sandy = factory(root.CryptoJS.SHA1);
    }
})(this,
/*eslint max-statements: [2, 100] */
function(sha1) {
    var Sandy = {};
    Sandy._global = this;

    Sandy.version = '0.1.24';

    /**
     * Extract query parameter 'http://example.com?mobify_id=amp-aBcD1234'
     *
     * See http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
     */
    var extractIdFromUrl = function(name) {
        name = name || 'mobify_id';
        var regex = new RegExp('[?&]' + name + '=([\\w\\-]+)(&|#|$)');

        var url = Sandy._global.location && Sandy._global.location.href;
        if (url) {
            var result = regex.exec(url);
            if (result && result[1] && window.decodeURIComponent) {
                if (/^[a-fA-F0-9]{16}$/.test(result[1])) {
                    return result[1];
                } else {
                    var sha1MobifyId = sha1(result[1]).toString().substring(0, 16);
                    return window.decodeURIComponent(sha1MobifyId);
                }
            }
        }
        return null;
    };

    var Tracker = function(options) {
        options = options || {};

        this.dimensions = {};

        // get the slug form the options
        this.slug = options['slug'] || 'no-slug';

        // assign a unique id to this tracker
        this.dimensions['tracker_id'] = Sandy.Utils.generateRandomID();

        if (!Sandy.Utils.runningInServiceWorker()
            && 'cookie' in Sandy._global.document) {
            // get the shared pageview ID
            this.dimensions['pageview_id'] = Sandy._pageViewID;

            // get the potentially cookied session identifier
            this.dimensions['session_id'] = Sandy.getSessionID();

            // get the potentially cookied client identifier
            this.dimensions['client_id'] = Sandy.getClientID();

            // Cookie Domain
            if (options.cookieDomain === 'auto') {
                this.cookieDomain = Sandy._global.location.hostname;
            } else {
                this.cookieDomain = options['cookieDomain'] || Sandy._global.location.hostname;
            }

            /**
             * The following check if we need to send an associate event.
             *
             * An associate event is sent when:
             * 1. If we see the parameter `mobify_id` getting passed
             * 2. We see `client-id` cookie already that is different
             *
             * In this case we send an associate event to allow mapping the id between
             * the `mobify_id` query parameter and `client-id` cookies
             */
            var urlExtractedId = extractIdFromUrl();
            if (urlExtractedId && urlExtractedId !== this.dimensions['client_id']) {
                this.sendEvent({
                    dimensions : {
                        'associate_id': urlExtractedId
                    },
                    data : {
                        action: 'associate',
                        category: 'timing'
                    }
                });
            }
        }
    };

    /**
     * Sends an event, which is an object with keys `data`, and optionally,
     * `dimensions`. The value of the data key should be an object of the form
     * {
     *     "action": "DOMContentLoaded",
     *     "category": "timing",
     *     "value": 7
     * }
     * and `dimensions` can be any arbitrary object whose values are all of a
     * primitive type (boolean, number, string).
     *
     * The 'channel' property may set on the event - if it's missing (or falsy)
     * then 'web' is used.
     *
     * Optionally takes a node-style completion callback as a last parameter.
     */
    Tracker.prototype.sendEvent = function(event, callback) {
        event = Sandy.Utils.extend({},
            {
                'timestamp_local': event['timestamp_local'] || +new Date(),
                'channel': event.channel || 'web',
                'slug': this.slug,
                'dimensions': this.getDimensions(event.dimensions),
                'data': event.data
            }
        );
        Sandy._track(Sandy.endpoint, event, callback);
        return event;
    };

    /**
     * Takes a 'hitType' as its first argument, and then delegates to the
     * pageview(), event() or timing() methods based on that, passing the rest
     * of its arguments. Optionally takes a node-style completion callback as a
     * last parameter
     */
    Tracker.prototype.send = function(hitType) {
        var eventArgs = Array.prototype.slice.call(arguments, 1);
        if (Sandy.Utils.includes(['pageview', 'event', 'timing'], hitType)) {
            return this[hitType].apply(this, eventArgs);
        }
        Sandy.Utils.logError(new Error('Unrecognized hitType: ' + hitType));
    };

    Tracker.prototype.pageview = function(page) {
        var pageviewDimensions = {};
        var callback = Sandy.Utils.getCallback(arguments);

        try {
            if (typeof page === 'object') {
                pageviewDimensions = {
                    'page': page['page'] || Sandy._global.location.pathname,
                    'title': page['title'] || Sandy._global.document.title,
                    'location': page['location'] || Sandy._global.location.href
                };
            } else if (typeof page === 'string' || page instanceof String) {
                pageviewDimensions = {'page': page};
            } else {
                pageviewDimensions = {'page': Sandy._global.location.pathname};
            }

            pageviewDimensions['referrer'] = Sandy._global.document.referrer;

            this.set(pageviewDimensions);
            this.sendEvent({
                'data': {
                    'action': 'pageview'
                }
            }, callback);
        } catch (err) {
            Sandy.Utils.logError(err);
        }
    };

    var EVENT_KEYS = Sandy.EVENT_KEYS = {
        CHANNEL: 'eventChannel',
        CATEGORY: 'eventCategory',
        ACTION: 'eventAction',
        LABEL: 'eventLabel',
        VALUE: 'eventValue'
    };

    /**
     * Sends an arbitrary event, either with a explicit arguments of category,
     * action, label, value and dimensions, or reads them from an object with
     * keys 'eventCategory', 'eventAction', 'eventLabel', 'eventValue' with all
     * other key/values treated as dimensions. Optionally takes a node-style
     * completion callback as a last parameter
     */
    Tracker.prototype.event = function(category, action, label, value, dimensions) {
        var callback = Sandy.Utils.getCallback(arguments);
        var channel = null;

        if (typeof category === 'object') {
            action = category[EVENT_KEYS.ACTION];
            label = category[EVENT_KEYS.LABEL];
            value = category[EVENT_KEYS.VALUE];
            channel = category[EVENT_KEYS.CHANNEL];
            dimensions = Sandy.Utils.omit(category,
                [EVENT_KEYS.CATEGORY, EVENT_KEYS.ACTION, EVENT_KEYS.LABEL,
                EVENT_KEYS.VALUE]);
            // Category needs to be evaluated last so the rest of the variable
            // overwrites occur first
            category = category[EVENT_KEYS.CATEGORY];
        }
        this.sendEvent({
            'channel': channel,
            'data': {
                'category': category,
                'action': action,
                'label': label,
                'value': value
            },
            'dimensions': dimensions || {}
        }, callback);
    };

    var TIMING_KEYS = Sandy.TIMING_KEYS = {
        CATEGORY: 'timingCategory',
        ACTION: 'timingVar',
        LABEL: 'timingLabel',
        VALUE: 'timingValue'
    };


    /**
     * Sends a timing event, either with a explicit arguments of category,
     * action, label, value and dimensions, or reads them from an object with
     * keys 'timingCategory', 'timingVar', 'timingLabel', 'timingValue' with all
     * other key/values treated as dimensions. Optionally takes a node-style
     * completion callback as a last parameter
     */
    Tracker.prototype.timing = function(category, action, label, value, dimensions) {
        var callback = Sandy.Utils.getCallback(arguments);

        if (typeof category === 'object') {
            action = category[TIMING_KEYS.ACTION];
            label = category[TIMING_KEYS.LABEL];
            value = category[TIMING_KEYS.VALUE];
            dimensions = Sandy.Utils.omit(category,
                [TIMING_KEYS.CATEGORY, TIMING_KEYS.ACTION, TIMING_KEYS.LABEL,
                TIMING_KEYS.VALUE]);
            // Category needs to be evaluated last so the rest of the variable
            // overwrites occur first
            category = category[TIMING_KEYS.CATEGORY];
        }
        this.sendEvent({
            'data': {
                'category': category,
                'action': action,
                'label': label,
                'value': value
            },
            'dimensions': dimensions || {}
        }, callback);
    };

    /**
     * Takes a name/value pair, or a flat dictonary of keys and values and adds
     * them to this tracker's dimensions map.
     */
    Tracker.prototype.set = function(name, value) {
        if (typeof name === 'object' && value === undefined) {
            // we were passed an object, iterate over the keys
            for (var key in name) {
                if (name.hasOwnProperty(key)) {
                    this.set(key, name[key]);
                }
            }
            return;
        }
        this.dimensions[name] = value;
    };

    Tracker.prototype.get = function(name) {
        return this.dimensions[name];
    };

    /**
     * Returns a combination of tracker dimensions, default dimensions for the
     * page and any additional dimensions passed to it.
     */
    Tracker.prototype.getDimensions = function(additional) {
        if (additional !== undefined) {
            return Sandy.Utils.extend({}, Sandy._gatherDefaultDimensions(),
                                      this.dimensions,
                                      additional);
        }
        return Sandy.Utils.extend({}, Sandy._gatherDefaultDimensions(),
            this.dimensions);
    };

    Sandy.Tracker = Tracker;

    /**
     * Returns default dimension values that we expect to collect on any page.
     */
    Sandy._gatherDefaultDimensions = function() {
        if (Sandy.Utils.runningInServiceWorker()) {
            return {
                version: Sandy.version
            };
        }

        return {
            location: Sandy._global.location.href,
            page: Sandy._global.location.pathname,
            title: Sandy._global.document.title,
            version: Sandy.version
        };
    };

    /* Sandy.Utils namespace */
    Sandy.Utils = {};

    /**
     * Sandy.Utils.logError() takes an exception and logs it to console.error if
     * available.
     */
    Sandy.Utils.logError = function(error) {
        if (window.console && window.console.error) {
            console.error(error);
        }
    };

    /*
     * Sandy.Utils.getCallback checks the last argument of a function's
     * parameters for a callback. Returns the callback if true.
    */
    Sandy.Utils.getCallback = function(args) {
        var lastArgument = args[args.length - 1];
        if (typeof lastArgument === 'function') {
            return lastArgument;
        }
    };

    /**
     * Sandy.Utils.encodeQueryString encodes the data in a suitable format
     * for a URL.
     *
     * Top level primatives are encoded directly, objects are encoded
     * as JSON and stringified.
     *
     * Data returned from `_encodeQueryString` will be safely embeddedable
     * in a URL. It is not necessary to escape it.
     */
    Sandy.Utils.encodeQueryString = function(data) {
        var components = [];

        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                var value = data[key];

                if (typeof value === 'string' || value instanceof String) {
                    components.push(key + '=' + encodeURIComponent(value.toString()));
                } else if (typeof value === 'number') {
                    components.push(key + '=' + value.toString());
                } else if (typeof value === 'boolean') {
                    components.push(key + '=' + (value ? 'true' : 'false'));
                } else if (typeof value === 'object' && value) {
                    components.push(key + '=' + encodeURIComponent(JSON.stringify(value)));
                }
            }
        }
        return '?' + components.join('&');
    };

    /**
     * Generates a unique ID as a 16-character string.
     */
    Sandy.Utils.generateRandomID = function() {
        var characters = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
        var id = [];

        for (var i = 0; i < 16; i++) {
            var charIndex = Math.floor(Math.random() * 16);
            id.push(characters[charIndex]);
        }

        return id.join('');
    };

    /**
     * Reads a cookie with the given name.
     *
     * Note: the name is prefixed with "sandy-" before lookup.
     */
    Sandy.Utils.getCookie = function(name) {
        var cookieRe = new RegExp('sandy-' + name + '=([^;]+)');
        var match = cookieRe.exec(Sandy._global.document.cookie);

        return match ? match[1] : '';
    };

    /**
     * Sets a cookie with the given name and value.
     * If a lifetime value is given, the expiry will be set to lifetime
     * seconds in the future. Otherwise, the expiry is 30 days.
     *
     * If domain is given, the cookie is set with that domain.
     *
     * Note: the name is prefixed with "sandy-" before lookup.
     */
    Sandy.Utils.setCookie = function(name, value, domain, lifetime) {
        var expires = new Date();
        var now = +expires; //type coerce to timestamp

        if (lifetime > 0) {
            // Lifetime (seconds) in to the future
            expires.setTime(now + lifetime * 1000);
        } else {
            // 30 Days in to the future
            expires.setTime(now + 30 * 24 * 3600 * 1000);
        }
        Sandy._global.document.cookie = 'sandy-' + name + '=' + value + '; expires=' +
            expires.toGMTString() + '; path=/; ' + (domain && domain !== 'localhost' ? 'domain=' + domain : '');
    };

    /**
     * Takes an object `target`, and one or more other objects. key/value pairs
     * from the object are copied into target, with keys from objects later in
     * the argument list taking precedence.
     */
    Sandy.Utils.extend = function(target) {
        var obj;
        for (var i = 0, len = arguments.length; i < len; i++) {
            obj = arguments[i];
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    target[key] = obj[key];
                }
            }
        }
        return target;
    };

    /**
     * Returns true if `array` has an element `item`, false
     * otherwise.
     */
    Sandy.Utils.includes = function(array, item) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === item) {
                return true;
            }
        }
        return false;
    };

    /**
     * Returns true if client is running in a service worker
     */
    Sandy.Utils.runningInServiceWorker = function() {
        return typeof Sandy._global.document === 'undefined';
    };


    /**
     * Takes an object, `object` and array of key names, `keys`. Returns a copy
     * of the object, but without the keys (and values of those keys) named in
     * `keys`.
     */
    Sandy.Utils.omit = function(object, keys) {
        var target = {};
        for (var key in object) {
            if (object.hasOwnProperty(key) &&
                    !Sandy.Utils.includes(keys, key)) {
                target[key] = object[key];
            }
        }
        return target;
    };

    /**
     * Sandy.getSesssionID returns an ID tied to a user's session. A session
     * expires after 30 minutes of inactivity.
     */
    Sandy.getSessionID = function(domain) {
        var id = Sandy.Utils.getCookie('session-id');
        id = id || Sandy.Utils.generateRandomID();

        // Push the session expiry 30 minutes in to the future
        Sandy.Utils.setCookie('session-id', id, domain, 1800);

        return id;
    };

    // 2 years, expressed in seconds. This value is intentionally exposed
    // to developers.
    Sandy.CLIENT_COOKIE_LIFETIME_SECONDS = 2 * 52 * 7 * 24 * 3600;

    /**
     * Sandy.getClientID returns an ID tied to a user's client/browser.
     * As of MTT-460, this expires 2 years after last use. Each use
     * extends the lifetime.
     */
    Sandy.getClientID = function(domain) {
        var id = Sandy.Utils.getCookie('client-id') ||
                extractIdFromUrl() ||
                Sandy.Utils.generateRandomID();
        Sandy.setClientID(id, domain);
        return id;
    };

    /**
     * Set the cookie, with a long expiration. This will also
     * extend the lifetime of the cookie on every call.
     *
     * Note:
     * 1. This changes the ID on all sandy trackers
     * 2. This will not send an associate event
     *
     * @param {string} id ID to set the clientID to.
     * @param {string} [domain] Optional domain to passed to setCookie
     */
    Sandy.setClientID = function(id, domain) {
        Sandy.Utils.setCookie(
            'client-id',
            id,
            domain,
            Sandy.CLIENT_COOKIE_LIFETIME_SECONDS
        );
    };

    /**
     * Dispatch commands passed to the `sandy()` function:
     *     - call callbacks
     *     - create trackers
     *     - dispatch send/set comamnds on default tracker
     *     - fail noisily
     */
    Sandy.dispatchCommand = function() {
        var command = arguments[0];
        var args = Array.prototype.slice.call(arguments, 1);

        Sandy.trackers = Sandy.trackers || {};
        var defaultTracker = Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME];

        if (typeof command === 'function') {
            try {
                return command(defaultTracker);
            } catch (e) {
                Sandy.Utils.logError(e);
                return;
            }
        }

        if (typeof command === 'string' || command instanceof String) {
            if (command === 'create') {
                return Sandy.create.apply(this, args);
            }
            if (Sandy.Utils.includes(['send', 'set'], command)) {
                return defaultTracker[command].apply(defaultTracker, args);
            }
            if (typeof args[0] === 'object') {
                return defaultTracker['send'].apply(defaultTracker, args);
            }
        }
        Sandy.Utils.logError(new Error('Unable to dispatch command: ' +
                                       command));
    };

    /**
     * Creates or mutates the tracker `name` to have the slug `slug` and cookie
     * domain `cookieDomain`. If `name` is not specified, the default tracker is
     * created or mutated.
     */
    Sandy.create = function(slug, cookieDomain, name) {
        if (typeof slug === 'object') {
            cookieDomain = slug['cookieDomain'] || 'auto';
            name = slug['name'];
            slug = slug['trackingId'];
        }
        if (!(typeof slug === 'string'  || slug instanceof String)) {
            Sandy.Utils.logError(new Error('slug was not a string'));
            return;
        }
        name = name || Sandy.DEFAULT_TRACKER_NAME;
        Sandy.trackers = Sandy.trackers || {};

        var tracker = Sandy.trackers[name];

        // MTT-463 - if there is an existing tracker, then we don't
        // modify it. The parameters from the first 'create' remain.
        // Thus we only setup a new tracker if there is no existing tracker.
        if (!tracker) {
            Sandy.trackers[name] = tracker = new Tracker({
                slug: slug,
                cookieDomain: cookieDomain
            });
        }

        return tracker;
    };

    /**
     * Takes an array of sandy commands, `queue`, and calls
     * Sandy.dispatchCommand() on each of them.
     */
    Sandy.drainQueue = function(queue) {
        var command;
        while (command = queue.shift()) {
            Sandy.dispatchCommand.apply(undefined, command);
        }
    };

    Sandy.isInitialised = function(window) {
        return window['SandyAnalyticsObject']
                && window[window['SandyAnalyticsObject']]
                && window[window['SandyAnalyticsObject']].initialised;
    };

    /** side-effecty imperative bit, also a reimplimentation of the snippet **/
    Sandy.init = function(window, options) {
        var sandyName = 'sandy';
        if (options && options.name) {
            sandyName = options.name;
        }
        // if init has already run by another tracker, bail
        if (window['SandyAnalyticsObject'] === sandyName && Sandy.isInitialised(window)) {
            return;
        }
        window['SandyAnalyticsObject'] = window['SandyAnalyticsObject'] || sandyName;
        window[sandyName] = window[sandyName] || function() {
            return window[sandyName].q.push(arguments);
        };
        var queue = window[sandyName].q = window[sandyName].q || [];
        window[sandyName].initialised = true;

        Sandy.drainQueue(queue);

        // substitute implementation of push
        window[sandyName].q.push = function() {
            // expand arguments out and send them to dispatchCommand
            Sandy.dispatchCommand.apply(undefined, arguments[0]);
        };
    };

    // Assign a unique pageview ID every time the script is loaded
    Sandy._pageViewID = Sandy.Utils.generateRandomID();

    // tracking pixel url
    Sandy.endpoint = 'https://engagement-collector.mobify.net/s.gif';

    // Name of the default tracker
    Sandy.DEFAULT_TRACKER_NAME = 't0';

    // Default iframe to be used
    Sandy.iframe = null;

    /*
     * Uses the service workers fetch api to fire the tracking pixel.
     */
    Sandy._trackFetch = function(src, callback) {
        self.fetch(src, {mode: 'no-cors'}).then(function(value) {
            if (typeof callback === 'function') {
                callback(null);
            }
        })['catch'](function() {
            if (typeof callback === 'function') {
                callback(new Error('Error loading ' + src));
            }
        });
    };

    /*
     * Uses an Image object to fire the tracking pixel.
     */
    Sandy._trackImage = function(src, callback) {
        var image = new Image();
        image.src = src;

        if (typeof callback === 'function') {
            image.onload = function() {
                callback(null);
            };
            image.onerror = function() {
                callback(new Error('Error loading ' + image.src));
            };
        }
        return image;
    };

    Sandy._sendAjax = function(src, callback) {
        if (!Sandy.iframe) {
            callback(new Error('No iframe provided - cannot send'));
            return;
        }

        if (!Sandy.iframe.contentWindow) {
            // iframe is not ready - start queueing events
            Sandy.iframeQueue.push(src);
            return;
        }

        // Create XHR and send the request.
        var xhr = new Sandy.iframe.contentWindow.XMLHttpRequest();
        xhr.open('GET', src);
        xhr.send(null);
    };

    Sandy._iframeDrainQueue = function() {
        // Flush iframe queue
        var xhr = new Sandy.iframe.contentWindow.XMLHttpRequest();
        while (Sandy.iframeQueue.length) {
            xhr.open('GET', Sandy.iframeQueue.shift());
            xhr.send(null);
        }

        Sandy.iframeQueue.push = function(src) {
            xhr.open('GET', src);
            xhr.send(null);
        };
    };

    /*
     * Uses an iframe XHR object to fire the tracking pixel.
     */
    Sandy._trackAjax = function(src, callback) {
        // Due to an issue with Hijax, we create an iframe to have a clean
        // window object and unpatched XHR object to send the tracking pixel
        // request.
        if (Sandy.iframe === null) {
            // from http://www.paulirish.com/2011/surefire-dom-element-insertion/
            var ref = document.getElementsByTagName('script')[0];
            if (!ref) {
                // let's be defensive and just skip the send
                callback(new Error('Error creating iframe ajax call'));
                Sandy.iframe = undefined;
                return;
            }
            Sandy.iframe = document.createElement('iframe');
            Sandy.iframe.style.display = 'none';
            // Add an attribute to meet WCAG accessibility guideline
            Sandy.iframe.setAttribute('title', 'Analytics');

            // https://stackoverflow.com/questions/10781880/dynamically-created-iframe-triggers-onload-event-twice
            ref.parentNode.insertBefore(Sandy.iframe, ref);

            Sandy.iframeQueue = [src];
            Sandy.iframe.onload = Sandy._iframeDrainQueue;
        } else {
            Sandy._sendAjax(src, callback);
        }
    };

    /*
     * Fires a tracking pixel with event data set on the querystring to the
     * passed endpoint.
     */
    Sandy._track = function(endpoint, data, callback) {
        var qs = Sandy.Utils.encodeQueryString(data);
        var src = endpoint + qs;

        if (Sandy.Utils.runningInServiceWorker()) {
            // Fetch api case.
            Sandy._trackFetch(src, callback);
        } else if (
            Sandy._global.XMLHttpRequest
            && 'withCredentials' in new Sandy._global.XMLHttpRequest
        ) {
            // XHR with CORs
            Sandy._trackAjax(src, callback);
        } else {
            Sandy._trackImage(src, callback);
        }
    };

    if (window && window.sandy) {
        window.sandy.instance = Sandy;
    }

    return Sandy;
});
