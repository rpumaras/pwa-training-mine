define(['chai', 'sinon', 'sandy', 'sandySister'], function(chai, sinon, Sandy, SandySister) {
    var assert = chai.assert;
    var sandbox = sinon.sandbox.create();
    var ID_LENGTH = 16;

    describe('Sandy', function() {
        var sampleData = {
            'A': 'string',
            'B': 2,
            'C': [1, 2],
            'D': {'a':'b'},
            'E': '"?='
        };

        var sampleDataQS = '?A=string&B=2&C=%5B1%2C2%5D&D=%7B%22a%22%3A%22b%22%7D&E=%22%3F%3D';

        describe('init()', function() {
            var fakeWindow;
            beforeEach(function() {
                fakeWindow = {};
            });
            afterEach(function() {
                delete Sandy.trackers;
            });
            it('should not throw and sets properties on passed window', function() {
                assert.doesNotThrow(function() {
                    Sandy.init(fakeWindow);
                });
                assert.equal(fakeWindow['SandyAnalyticsObject'], 'sandy',
                    'sandyAnalyticsObject property is set');
                assert.equal(typeof fakeWindow.sandy, 'function',
                    'sandy is a function');
                assert.ok(fakeWindow.sandy.q instanceof Array,
                    'sandy.q is an array');
                assert.notEqual(fakeWindow.sandy.q.push, Array.prototype.push,
                    'sandy.q.push() has been repointed');
            });
            it('should try to drain the sandy queue of accumulated commands', function() {
                // let's use an extract of the snippet to get things going
                var origDrainQueue = Sandy.drainQueue;
                var commands;
                Sandy.drainQueue = function(q) {
                    commands = q;
                };

                (function(s, a) {
                    s['SandyAnalyticsObject'] = a;
                    s[a] = s[a] || function() {
                        (s[a].q = s[a].q || []).push(arguments);
                    };
                })(fakeWindow, 'sandy');

                fakeWindow.sandy('create', 'example-slug', 'auto');
                fakeWindow.sandy('send', 'pageview');

                Sandy.init(fakeWindow);

                assert.deepEqual(Array.prototype.slice.call(commands[0], 0),
                    ['create', 'example-slug', 'auto'],
                    'first command was create');
                assert.deepEqual(Array.prototype.slice.call(commands[1], 0),
                    ['send', 'pageview'],
                    'second command is send pageview');

                // tear down
                Sandy.drainQueue = origDrainQueue;
            });
            it('should get us to a working state when used with the snippet', function() {
                var origDispatchCommand = Sandy.dispatchCommand;
                var commands = [];
                Sandy.dispatchCommand = function() {
                    commands.push(arguments);
                };

                (function(s, a) {
                    s['SandyAnalyticsObject'] = a;
                    s[a] = s[a] || function() {
                        (s[a].q = s[a].q || []).push(arguments);
                    };
                })(fakeWindow, 'sandy');

                fakeWindow.sandy('create', 'example-slug', 'auto');
                fakeWindow.sandy('send', 'pageview');
                fakeWindow.sandy('timing', {'value' : 100});

                Sandy.init(fakeWindow);

                fakeWindow.sandy('send', 'pageview', '/foo');

                assert.deepEqual(Array.prototype.slice.call(commands[0], 0),
                    ['create', 'example-slug', 'auto'],
                    'first command was create');
                assert.deepEqual(Array.prototype.slice.call(commands[1], 0),
                    ['send', 'pageview'],
                    'second command is send pageview');
                assert.deepEqual(Array.prototype.slice.call(commands[2], 0),
                    ['timing', {'value' : 100}]);
                assert.deepEqual(Array.prototype.slice.call(commands[3], 0),
                    ['send', 'pageview', '/foo']);

                // tear down
                Sandy.dispatchCommand = origDispatchCommand;
            });
            /**
                In this case, we are seeing collision between different scope

                Call tree:
                    [global]fakeWindow.sandy('send', args)
                        [global]window[sandyName].q.push('send', args)
                            [module]Sandy.dispatchCommand('send', args)
                                [module]Sandy.dispatchCommand('send', args)
                                    [module]Sandy.trackers.send(args)

                So we would like to check and ensure that we would setup and
                ensure that we can make things work.
             */
            it('should be okay with multiple load', function() {
                var origSend = Sandy.Tracker.prototype.send;
                var commands = [];
                Sandy.Tracker.prototype.send = function() {
                    commands.push(arguments);
                };

                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'example-slug', 'auto');

                // now kick in the special slug
                SandySister.init(fakeWindow);
                fakeWindow.sandy('send', 'pageview', '/foo');

                assert.deepEqual(Array.prototype.slice.call(commands[0], 0),
                    ['pageview', '/foo']);

                // tear down
                Sandy.Tracker.prototype.send = origSend;
            });
            it('should be okay with multiple trackers', function() {
                var origSend = SandySister.Tracker.prototype.send;
                var commands = [];
                SandySister.Tracker.prototype.send = function() {
                    commands.push(arguments);
                };

                Sandy.init(fakeWindow);

                // now kick in the special slug
                SandySister.init(fakeWindow, {'name' : 'sandySister'});
                fakeWindow.sandySister('create', 'example-slug', 'auto');
                fakeWindow.sandySister('send', 'pageview', '/foo');

                assert.deepEqual(Array.prototype.slice.call(commands[0], 0),
                    ['pageview', '/foo']);

                // tear down
                SandySister.Tracker.prototype.send = origSend;
            });
        });

        describe('drainQueue()', function() {
            it('should call dispatchCommand with queued items', function() {
                var q = [
                    ['create', 'sluggy', 'auto'],
                    ['send', 'pageview']
                ];
                var expected = q.slice();
                var receivedCommands = [];
                var origDispatchCommand = Sandy.dispatchCommand;

                Sandy.dispatchCommand = function() {
                    receivedCommands.push(Array.prototype.slice.call(arguments, 0));
                };

                Sandy.drainQueue(q);

                assert.deepEqual(receivedCommands, expected,
                    'we received the same commands in their original order');

                // tear down
                Sandy.dispatchCommand = origDispatchCommand;
            });
        });

        describe('dispatchCommand()', function() {
            var lastError;
            var fakeError = function(e) {
                lastError = e;
            };
            var origLogError = Sandy.Utils.logError;
            before(function() {
                Sandy.Utils.logError = fakeError;
            });
            after(function() {
                Sandy.Utils.logError = origLogError;
            });
            it('should log error and not throw when sent a bad command', function() {
                assert.doesNotThrow(function() {
                    Sandy.dispatchCommand(['asdf']);
                }, Error, 'does not throw when passed command asdf');
                assert.ok(lastError instanceof Error, 'an error was logged');
                assert.strictEqual(lastError.toString(),
                    'Error: Unable to dispatch command: asdf',
                    'error logged is as expected');
            });
            it('should log error and not throw when passed a throwing callback', function() {
                var throwingCallback = function() {
                    throw new Error('hah hah');
                };
                assert.doesNotThrow(function() {
                    Sandy.dispatchCommand(throwingCallback);
                }, Error, 'does not throw even with a throwing callback');
                assert.ok(lastError instanceof Error, 'an error was logged');
                assert.strictEqual(lastError.toString(), 'Error: hah hah',
                    'error was as expected');
            });
        });

        describe('IDs', function() {
            var setCookie, getCookie;

            beforeEach(
                function() {
                    setCookie = sandbox.stub(Sandy.Utils, 'setCookie');
                    getCookie = sandbox.stub(Sandy.Utils, 'getCookie');
                }
            );

            afterEach(
                function() {
                    sandbox.restore();
                }
            );

            it('should create the clientID cookie if it doesn\'t exist', function() {
                getCookie.returns(undefined);
                var clientId = Sandy.getClientID();
                assert.isOk(clientId);

                assert.isTrue(getCookie.calledOnce);
                assert.isTrue(setCookie.calledOnce);
                assert.isTrue(
                    setCookie.calledWithExactly(
                        'client-id',
                        clientId,
                        undefined,
                        Sandy.CLIENT_COOKIE_LIFETIME_SECONDS
                    )
                );
            });
        });

        describe('sandy()', function() {
            var fakeWindow;
            beforeEach(function() {
                fakeWindow = {};
            });

            afterEach(function() {
                delete Sandy.trackers;
            });

            it('should create the default tracker', function() {
                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'wooha', 'auto');
                assert.equal(Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME].slug,
                    'wooha', 'the created tracker is the default');
            });
            it('should asynchronously give the default tracker', function(done) {
                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'sluggo', 'auto');
                fakeWindow.sandy(function(tracker) {
                    assert.equal(tracker,
                        Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME],
                        'provided tracker is the default');
                    assert.equal(tracker.slug, 'sluggo', 'slug is as expected');
                    done();
                });
            });
            it('should set dimensions when passed set', function(done) {
                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'sluggo', 'auto');
                fakeWindow.sandy('set', 'fish', 'swimming');
                fakeWindow.sandy('set', {
                    'mackerel': 5,
                    'cod': true,
                    'tuna': 'fish'
                });
                fakeWindow.sandy(function(tracker) {
                    assert.equal(tracker.get('fish'), 'swimming',
                        'fish is swimming');
                    assert.equal(tracker.get('mackerel'), 5, 'mackerel is 5');
                    assert.equal(tracker.get('cod'), true, 'cod is true');
                    assert.equal(tracker.get('tuna'), 'fish', 'tuna is fish');

                    done();
                });
            });
            it('should send pageview with set dimensions', function() {
                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'sluggo', 'auto');
                var tracker = Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME];
                var origTrack = Sandy._track;
                var trackerData, trackerCallback, trackerEndpoint;

                Sandy._track = function(endpoint, data, callback) {
                    trackerEndpoint = endpoint;
                    trackerData = data;
                    trackerCallback = callback;

                };

                fakeWindow.sandy('set', 'fish', 'treading water');
                fakeWindow.sandy('send', 'pageview', '/aquariums/2');

                assert.strictEqual(trackerEndpoint, Sandy.endpoint,
                    'Sandy.endpoint is used as the endpoint');

                assert.deepEqual(trackerData.data, {'action':'pageview'},
                    'action is pageview');
                assert.equal(trackerData.slug, 'sluggo', 'slug is as expected');
                assert.equal(trackerData.channel, 'web', 'channel is web');
                assert.ok(Math.abs(trackerData.timestamp_local - Date.now()) < 10,
                    'timestamp_local is close to now');

                var dimensions = trackerData.dimensions;
                assert.ok(dimensions['client_id'], 'there is a client id');
                assert.ok(dimensions['pageview_id'], 'there is a pageview id');
                assert.ok(dimensions['session_id'], 'there is a session id');
                assert.equal(dimensions['fish'], 'treading water',
                    'fish are treading water');
                assert.equal(dimensions['title'], document.title,
                    'title matches page');
                assert.equal(dimensions['page'], '/aquariums/2',
                    'page is aquariums 2');
                assert.equal(dimensions['location'], location.href,
                    'location matches page');
                assert.equal(dimensions['referrer'], document.referrer);

                //tear down
                Sandy._track = origTrack;
            });

            it('should send a full event when passed an object', function() {
                Sandy.init(fakeWindow);
                fakeWindow.sandy('create', 'sluggo', 'auto');
                var originalTrack = Sandy._track;

                Sandy._track = function(endpoint, event) {
                    Sandy._track = originalTrack;
                    assert.equal(event.slug, 'sluggo');
                    assert.equal(event.channel, 'special');

                    var dimensions = event.dimensions;
                    assert.equal(dimensions.trackArtist, 'Martha Reeves and the Vandellas');
                    assert.equal(dimensions.trackName, 'Nowhere to Run');
                };

                fakeWindow.sandy(
                    'send',
                    'event',
                    {
                        'eventChannel': 'special',
                        'eventCategory': 'playerActions',
                        'eventAction': 'pause',
                        'eventValue': 95,
                        'trackName': 'Nowhere to Run',
                        'trackArtist': 'Martha Reeves and the Vandellas'
                    }
                );
            });
        });

        it('should generate some properties on load', function() {
            // Sandy._pageViewId
            assert.ok(Sandy._pageViewID, '_pageViewID is not falsey');
            assert.equal(Sandy._pageViewID.length, ID_LENGTH,
                         '_pageViewId has the expected length');

            // Sandy.endpoint
            assert.ok(Sandy.endpoint, 'there is a defined endpoint');
        });

        describe('Utils', function() {
            it('extend() should work', function() {
                var extended = Sandy.Utils.extend({}, {'foo': 'bar'},
                                                  {'foo': 'baz'},
                                                  {'qux': 'quux'});
                assert.equal(extended.foo, 'baz',
                             'baz gets overwritten in extension');
                assert.equal(extended.qux, 'quux', 'qux is quux');
            });

            it('getCallback() should work', function() {
                var callback = Sandy.Utils.getCallback(['one', 2,
                                                       function() {
                                                           return true;
                                                       }]);
                var noCallback = Sandy.Utils.getCallback(['one', 2]);
                var sillyCase = Sandy.Utils.getCallback([]);

                assert.ok(callback, 'there is a callback');
                assert.ok(callback(), 'callback function calls');
                assert.isUndefined(noCallback, 'there is no callback');
                assert.isUndefined(sillyCase,
                                   'there is no callback with no arguments');
            });

            it('generateRandomID() should work', function() {
                var id = Sandy.Utils.generateRandomID();
                assert.equal(typeof id, 'string', 'ids are strings');
                assert.equal(id.length, ID_LENGTH,
                             'ids are 16 characters long');
                assert.ok(/[0-9a-f]/.test(id),
                          'generated id contains only hex literal characters');
            });


            it('encodeQueryString() encodes properly', function() {
                var actual = Sandy.Utils.encodeQueryString(sampleData);

                assert.equal(sampleDataQS, actual);
            });

            it('logError() should call console.error where available, but not throw otherwise', function() {
                // if console.error is available, logError should call it
                if (window.console && console.error) {
                    var origError = console.error;
                    var errorCalled = false;
                    console.error = function() {
                        errorCalled = true;
                    };

                    Sandy.Utils.logError(new Error('sample error'));
                    assert.strictEqual(errorCalled, true, 'logError calls console.error');

                    console.error = origError;
                    return;
                }
                // otherwise, calling it should not throw
                assert.doesNotThrow(function() {
                    Sandy.Utils.logError(new Error('sampleError'));
                }, Error, 'did not throw without console.error');
            });

            it('omit() should work', function() {
                var names = ['one', 'two', 'three'];
                var dict = {
                    zero: 0,
                    one: 1,
                    two: 2,
                    three: 3,
                    four: 4
                };
                var expected = {zero: 0, four: 4};

                var omitted = Sandy.Utils.omit(dict, names);

                assert.deepEqual(omitted, expected);
            });
        });

        describe('create()', function() {
            afterEach(function() {
                // reset the set of trackers
                Sandy.trackers = {};
            });
            it('should create the default tracker with the given slug', function() {
                var t = Sandy.create('woo');
                assert.equal(t.slug, 'woo', 'the slug is correct');
                assert.equal(Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME], t,
                    'the created tracker is the default tracker');
            });
            it('should create a tracker when passed an object', function() {
                var t = Sandy.create({
                    trackingId: 'whee',
                    cookieDomain: 'www.example.com',
                    name: 'ralph'
                });

                assert.equal(t.slug, 'whee', 'it has the right name');
                assert.equal(t.cookieDomain, 'www.example.com');
                assert.equal(Sandy.trackers['ralph'], t,
                    'it was stored under the correct name');
            });
            it('should not adjust existing trackers on multiple calls', function() {
                var t = Sandy.create('snail', 'auto');
                var defaultCookieDomain = t.cookieDomain;
                var t2 = Sandy.create('slug', 'example.com');

                assert.strictEqual(t, t2, 'the default trackers are one and the same');
                assert.strictEqual(t.slug, 'snail',
                    'the slug is the original value');
                assert.strictEqual(
                    t.cookieDomain,
                    defaultCookieDomain,
                    'the cookieDomain is the auto default'
                );

                var namedTracker = Sandy.create('boo', 'auto', 'smithers');
                var namedTracker2 = Sandy.create('urns', 'auto', 'smithers');
                assert.strictEqual(namedTracker, namedTracker2,
                    'two trackers with the same name are the same');
                assert.strictEqual(namedTracker.slug, 'boo', 'the slug is unchanged');
            });
            it('should not create a tracker when passed a non-string slug', function() {
                var lastError;
                var fakeError = function(e) {
                    lastError = e;
                };
                var origLogError = Sandy.Utils.logError;
                Sandy.Utils.logError = fakeError;

                var t;
                assert.doesNotThrow(function() {
                    t = Sandy.create(5, 'auto');
                });
                assert.strictEqual(t, undefined, 'returns undefined');
                assert.strictEqual(Sandy.trackers[Sandy.DEFAULT_TRACKER_NAME], undefined,
                    'does not create the default tracker');
                assert.ok(lastError instanceof Error, 'an error is logged');
                assert.strictEqual(lastError.toString(), 'Error: slug was not a string',
                    'error was as expected');

                Sandy.Utils.logError = origLogError;
            });
        });

        describe('Tracker', function() {
            it('can be constructed and gets expected initial properties', function() {
                var tracker = new Sandy.Tracker();
                var dimensions = tracker.dimensions;
                assert.ok(tracker);
                assert.ok(dimensions);

                assert.equal(Sandy['pageview_id'], Sandy['pageview_id'],
                    'pageViewID is the same as for the module');

                assert.ok(dimensions['tracker_id'], 'trackerID is not falsey');
                assert.equal(dimensions['tracker_id'].length, ID_LENGTH,
                             'trackerID has the expected length');

                assert.ok(dimensions['session_id'], 'sessionID is not falsey');
                assert.equal(dimensions['session_id'].length, ID_LENGTH,
                             'sessionID has the expected length');

                assert.ok(dimensions['client_id'], 'clientID is not falsey');
                assert.equal(dimensions['client_id'].length, ID_LENGTH,
                             'clientID has the expected length');

                assert.equal(tracker.cookieDomain, window.location.hostname,
                             'cookieDomain is the same as' +
                             'window.location.hostname: ' +
                             window.location.hostname);
            });

            it('can be constructed without document.cookie', function() {
                // Setup
                var oldGlobal = Sandy._global;
                Sandy._global = {};

                var tracker = new Sandy.Tracker();
                var dimensions = tracker.dimensions;
                assert.ok(tracker);
                assert.ok(dimensions);

                assert.ok(dimensions['tracker_id'], 'trackerID is not falsey');
                assert.equal(dimensions['tracker_id'].length, ID_LENGTH,
                             'trackerID has the expected length');

                assert.isUndefined(dimensions['session_id'], 'session_id is not defined');
                assert.isUndefined(dimensions['client_id'], 'client_id is not defined');
                assert.isUndefined(dimensions['pageview_id'], 'pageview_id is not defined');
                assert.isUndefined(tracker.cookeDomain, 'cookieDomain is not defined');

                // Tear Down
                Sandy._global = oldGlobal;
            });

            it('should parse the `?mobify_id=x` query parameter when available', function() {
                var testHref = function(href, expectedID) {
                    Sandy._global = {
                        'location' : {
                            'href' : href,
                            'hostname': 'example.com'
                        },
                        'document' : {
                            'cookie' : ''
                        }
                    };
                    var tracker = new Sandy.Tracker();
                    var dimensions = tracker.dimensions;
                    assert.ok(tracker);
                    assert.ok(dimensions);

                    assert.equal(dimensions['client_id'].length, 16, 'ID character length');
                    assert.equal(dimensions['client_id'], expectedID);
                };

                var oldGlobal = Sandy._global;

                testHref('http://abc.example.com?mobify_id=1234abcd', 'e7d537e128158790');
                testHref('http://abc.example.com?mobify_id=1234abcd#test', 'e7d537e128158790');
                testHref('http://abc.example.com?other_param=xyz&mobify_id=abcd1234&other2=xyz', '7ce0359f12857f2a');
                testHref('http://abc.example.com?mobify_id=e7d537e128158790157ea057bb883e0292a84930', '45b0e79d704f522b');

                // Test if a 16 characcter hex string id provided, it does not get run thru with SHA1
                testHref('http://abc.example.com?mobify_id=e7d537e128158790', 'e7d537e128158790');

                // example amp Anaytics ID - we will map this on server-side
                var ampID = 'amp-P7fSZT86JYZPbUwGGnPL6gXy0jPCyoebDZRbAEbu8n1jAgeov0XXmeFEq9incnxE';
                testHref('http://abc.example.com?mobify_id=' + ampID, '6f65e65e14219044');

                Sandy._global = oldGlobal;
            });

            var testAssociateEvent = function(trackerOption) {
                var MockDocumentCookie = function() {
                    this.str = '';

                    var getter = function() {
                        return this.str;
                    };
                    var setter = function(s) {
                        this.str += (this.str ? ';' : '') + s;
                        return this.str;
                    };
                    if (this.__defineGetter__) {
                        this.__defineGetter__('cookie', getter);
                        this.__defineSetter__('cookie', setter);
                    } else {
                        // Hello IE9
                        Object.defineProperty(this, 'cookie', {
                            get: getter,
                            set: setter
                        });
                    }
                };

                var docWithCookieJar = new MockDocumentCookie();
                // SHA1 hash of '1234abcd'
                docWithCookieJar.cookie = 'sandy-client-id=e7d537e128158790;';
                var oldGlobal = Sandy._global;
                Sandy._global = {
                    document : docWithCookieJar,
                    location : {
                        hostname: 'example.com',
                        href : 'http://abc.example.com?mobify_id=amp-abcd1234'
                    }
                };
                var oldTrack = Sandy._track;

                var trackEndpoint;
                var trackData;
                Sandy._track = function(endpoint, data) {
                    trackEndpoint = endpoint;
                    trackData = data;
                };

                var tracker = new Sandy.Tracker(trackerOption);
                var dimensions = tracker.dimensions;

                assert.ok(tracker);
                assert.ok(dimensions);

                // use existing ID
                assert.equal(dimensions.client_id.length, 16, 'ID character length');
                assert.equal(dimensions['client_id'], 'e7d537e128158790');
                // check that associate actions have been sent
                assert.equal(trackData.data.action, 'associate');
                assert.equal(trackData.dimensions.associate_id.length, 16, 'ID character length');
                assert.equal(trackData.dimensions.associate_id, '89c3a2ad023ed787');

                Sandy._track = oldTrack;
                Sandy._global = oldGlobal;
            };

            it('if it already have a cookie, and a new ID is passed on, an associate event is sent', function() {
                testAssociateEvent();
            });

            it('if it already have a cookie and the cookie domain is "auto" and a new ID is passed on, an associate event is sent', function() {
                testAssociateEvent({
                    cookieDomain: 'auto'
                });
            });

            it('sendEvent() should call Sandy._track() with the proper arguments', function() {
                var tracker = new Sandy.Tracker();

                var trackEndpoint;
                var trackData;

                var oldTrack = Sandy._track;

                Sandy._track = function(endpoint, data) {
                    trackEndpoint = endpoint;
                    trackData = data;
                };

                var sampleEvent = {
                    dimensions: {
                        foo: 'bar',
                        baz: 5
                    },
                    data: {
                        action: 'DOMContentLoaded',
                        category: 'timing',
                        value: 7
                    },
                    channel: 'test'
                };

                var resultEvent = tracker.sendEvent(sampleEvent);

                assert.equal((new Date(resultEvent.timestamp_local)).getDay(),
                             (new Date()).getDay(), 'timestamp_local is from today');
                assert.equal(resultEvent.channel, 'test', 'event has overridden channel');
                assert.equal(resultEvent.slug, 'no-slug', 'event has expected slug');
                assert.equal(resultEvent.dimensions.foo, 'bar',
                             'event dimension foo has value bar');
                assert.equal(resultEvent.dimensions.baz, 5,
                             'event dimension baz has value 5');
                assert.ok(resultEvent.dimensions['tracker_id'],
                             'event dimension tracker_id has been added');
                assert.ok(resultEvent.dimensions['session_id'],
                             'event dimension session_id has been added');
                assert.ok(resultEvent.dimensions['client_id'],
                             'event dimension clientID has been added');
                assert.equal(trackEndpoint, Sandy.endpoint,
                             'was passed the value of the endpoint');

                Sandy._track = oldTrack;
            });

            it('sendEvent() should call Sandy._track() without the window object', function() {
                // Setup
                var oldGlobal = Sandy._global;
                Sandy._global = {};

                var trackEndpoint;
                var trackData;
                var oldTrack = Sandy._track;

                Sandy._track = function(endpoint, data) {
                    trackEndpoint = endpoint;
                    trackData = data;
                };

                var tracker = new Sandy.Tracker();
                var sampleEvent = {
                    dimensions: {
                        foo: 'car',
                        baz: 7
                    },
                    data: {
                        action: 'DOMContentLoaded',
                        category: 'timing',
                        value: 7
                    }
                };

                var resultEvent = tracker.sendEvent(sampleEvent);

                assert.equal((new Date(resultEvent.timestamp_local)).getDay(),
                             (new Date()).getDay(), 'timestamp_local is from today');
                assert.equal(resultEvent.channel, 'web', 'event has web channel');
                assert.equal(resultEvent.slug, 'no-slug', 'event has expected slug');
                assert.equal(resultEvent.dimensions.foo, 'car',
                             'event dimension foo has value car');
                assert.equal(resultEvent.dimensions.baz, 7,
                             'event dimension baz has value 7');
                assert.ok(resultEvent.dimensions['tracker_id'],
                             'event dimension tracker_id has been added');
                assert.isUndefined(resultEvent.dimensions['session_id'],
                             'event dimension session_id has not been added');
                assert.isUndefined(resultEvent.dimensions['client_id'],
                             'event dimension clientID has not been added');
                assert.equal(trackEndpoint, Sandy.endpoint,
                             'was passed the value of the endpoint');

                // Tear Down
                Sandy._global = oldGlobal;
                Sandy._track = oldTrack;
            });

            describe('set()', function() {
                it('should add a single key/value pair as a dimension', function() {
                    var tracker = new Sandy.Tracker();
                    tracker.set('foo', 'bar');

                    assert.equal(tracker.dimensions['foo'], 'bar',
                        'dimension foo has value bar');
                });

                it('should add a flat object as dimensions', function() {
                    var tracker = new Sandy.Tracker();
                    tracker.set({
                        'foo': 'bar',
                        'bar': 5,
                        'baz': false,
                    });

                    assert.equal(tracker.dimensions['foo'], 'bar');
                    assert.equal(tracker.dimensions['bar'], 5);
                    assert.equal(tracker.dimensions['baz'], false);
                });
            });

            describe('get()', function() {
                it('should return a previously set dimension', function() {
                    var tracker = new Sandy.Tracker();
                    tracker.set('foo', 5);
                    assert.equal(tracker.get('foo'), 5);
                });
            });

            describe('getDimensions()', function() {
                it('should return expected initial dimensions', function() {
                    var tracker = new Sandy.Tracker();
                    var dims = tracker.getDimensions();
                    var defaultDims = Sandy._gatherDefaultDimensions();

                    assert.notEqual(dims, {}, 'dims not empty');
                    assert.ok(dims.hasOwnProperty('location'));
                    assert.ok(dims.hasOwnProperty('title'));

                    for (var prop in defaultDims) {
                        if (defaultDims.hasOwnProperty(prop)) {
                            assert.equal(defaultDims[prop], dims[prop],
                                         'dims has property "' + prop +
                                         '" from default dimensions');
                        }
                    }
                });

                it('should add additional dimensions when passed them', function() {
                    var tracker = new Sandy.Tracker();
                    var dims = tracker.getDimensions({'foo': 'bar'});

                    assert.equal(dims['foo'], 'bar', 'dims has a foo');
                });
            });

            describe('event()', function() {
                var EVENT_KEYS = Sandy.EVENT_KEYS;

                it('should take in an object and call sendEvent() with the correct arguments', function() {
                    var sampleData = {};

                    sampleData[EVENT_KEYS.CATEGORY] = 'notTiming';
                    sampleData[EVENT_KEYS.ACTION] = 'DOM';
                    sampleData[EVENT_KEYS.LABEL] = 'coolCat';
                    sampleData[EVENT_KEYS.VALUE] = 123;
                    sampleData['url'] = 'http://www.example.com';
                    var callback = function() { return true; };

                    var trackerData;
                    var trackerDimensions;
                    var trackerCallback;

                    var tracker = new Sandy.Tracker();

                    tracker.sendEvent = function(data, callback) {
                        trackerData = data;
                        trackerCallback = callback;
                    };

                    tracker.event(sampleData, callback);

                    assert.equal(trackerData.data.category, sampleData[EVENT_KEYS.CATEGORY]);
                    assert.equal(trackerData.data.action, sampleData[EVENT_KEYS.ACTION]);
                    assert.equal(trackerData.data.label, sampleData[EVENT_KEYS.LABEL]);
                    assert.equal(trackerData.data.value, sampleData[EVENT_KEYS.VALUE]);
                    assert.equal(trackerData.dimensions.url, sampleData['url']);
                    assert.isTrue(trackerCallback());
                });

                it('should take in an a series of arguments and call sendEvent()', function() {
                    var category = 'oneOhTrix';
                    var action = 'pointNever';
                    var label = 'warp';
                    var value = 'rplus7';
                    var dimensions = { 'url': 'www.opn.com' };
                    var callback = function() { return true; };

                    var trackerData;
                    var trackerDimensions;
                    var trackerCallback;

                    var tracker = new Sandy.Tracker();

                    tracker.sendEvent = function(data, callback) {
                        trackerData = data;
                        trackerCallback = callback;
                    };

                    tracker.event(category, action, label, value, dimensions, callback);

                    assert.equal(trackerData.data.category, category);
                    assert.equal(trackerData.data.action, action);
                    assert.equal(trackerData.data.label, label);
                    assert.equal(trackerData.data.value, value);
                    assert.equal(trackerData.dimensions.url, dimensions.url);
                    assert.isTrue(trackerCallback());
                });
            });

            describe('timing()', function() {
                var TIMING_KEYS = Sandy.TIMING_KEYS;

                it('should take in an object and call sendEvent() with the correct arguments', function() {
                    var sampleData = {};

                    sampleData[TIMING_KEYS.CATEGORY] = 'totallyTiming';
                    sampleData[TIMING_KEYS.ACTION] = 'DOM';
                    sampleData[TIMING_KEYS.LABEL] = 'coolCat';
                    sampleData[TIMING_KEYS.VALUE] = 123;
                    sampleData['url'] = 'http://www.example.com';
                    var callback = function() { return true; };

                    var trackerCallback;
                    var trackerData;
                    var trackerDimensions;

                    var tracker = new Sandy.Tracker();

                    tracker.sendEvent = function(data, callback) {
                        trackerData = data;
                        trackerCallback = callback;
                    };

                    tracker.timing(sampleData, callback);

                    assert.equal(trackerData.data.category, sampleData[TIMING_KEYS.CATEGORY]);
                    assert.equal(trackerData.data.action, sampleData[TIMING_KEYS.ACTION]);
                    assert.equal(trackerData.data.label, sampleData[TIMING_KEYS.LABEL]);
                    assert.equal(trackerData.data.value, sampleData[TIMING_KEYS.VALUE]);
                    assert.equal(trackerData.dimensions.url, sampleData['url']);
                    assert.isTrue(trackerCallback());
                });

                it('should take in an a series of arguments and call sendEvent()', function() {
                    var category = 'suchTiming';
                    var action = 'Wow DOM';
                    var label = 'Much DOM Label';
                    var value = 456;
                    var dimensions = { 'url': 'www.notexample.com' };
                    var callback = function() { return true; };

                    var trackerData;
                    var trackerCallback;

                    var tracker = new Sandy.Tracker();

                    tracker.sendEvent = function(data, callback) {
                        trackerData = data;
                        trackerCallback = callback;

                    };

                    tracker.timing(category, action, label, value, dimensions, callback);

                    assert.equal(trackerData.data.category, category);
                    assert.equal(trackerData.data.action, action);
                    assert.equal(trackerData.data.label, label);
                    assert.equal(trackerData.data.value, value);
                    assert.equal(trackerData.dimensions.url, dimensions.url);
                    assert.isTrue(trackerCallback());
                });
            });

            describe('send()', function() {
                var origLogError = Sandy.Utils.logError;
                before(function() {
                    Sandy.Utils.logError = function() {};
                });
                after(function() {
                    Sandy.Utils.logError = origLogError;
                });
                it('should not throw when sent an invalid hitType', function() {
                    var tracker = new Sandy.Tracker();
                    assert.doesNotThrow(function() {
                        tracker.send('asdf');
                    }, Error, 'does not throw when sent an event with hittype of asdf');
                });
            });

            describe('pageview()', function() {
                it('should take in an object and call sendEvent() with the correct arguments', function() {
                    var pageviewData = {
                        page: '/category/shirts',
                        title: 'Shirts!',
                        location: 'http://www.myshirtco.co.uk/category/shirts'
                    };

                    var tracker  = new Sandy.Tracker();

                    var trackerData;

                    var origTrack = Sandy._track;

                    Sandy._track = function(endpoint, data) {
                        trackerData = data;
                    };

                    tracker.pageview(pageviewData);

                    assert.equal(trackerData.data.action, 'pageview', 'action is pageview');
                    assert.equal(trackerData.data.value, undefined, 'value is undefined');
                    assert.equal(trackerData.data.category, undefined);
                    assert.equal(trackerData.dimensions.page,
                        '/category/shirts', 'page is /category/shirts');
                    assert.equal(trackerData.dimensions.title, 'Shirts!', 'title is "Shirts!"');
                    assert.equal(trackerData.dimensions.location,
                        'http://www.myshirtco.co.uk/category/shirts',
                        'location is "http://www.myshirtco.co.uk/category/shirts"');

                    Sandy._track = origTrack;
                });

                it('should take positional arguments', function() {
                    var tracker = new Sandy.Tracker();
                    var trackerData;

                    var origTrack = Sandy._track;

                    Sandy._track = function(endpoint, data) {
                        trackerData = data;
                    };

                    tracker.pageview('/category/pants');

                    assert.equal(trackerData.data.action, 'pageview',
                        'event is a pageview');
                    assert.equal(trackerData.dimensions.page, '/category/pants',
                        'page is "/category/pants"');

                    Sandy._track = origTrack;
                });
            });
        });

        describe('Tracking methods', function() {
            beforeEach(function() {
                // Rewrite self.fetch if it is not defined
                window.oldFetch = window.fetch;
                window.fetch = function(src) {
                    return {
                        then: function(callback) {
                            callback();
                            return {
                                'catch': function() {}
                            };
                        }
                    };
                };
            });

            afterEach(function() {
                window.fetch = window.oldFetch;
                delete window.oldFetch;
                Sandy.iframe = null;
            });

            it('_trackFetch() uses fetch api to fire a tracking pixel', function(done) {
                var host = 'https://fake-collector.mobify.net/s.gif';
                var expected = host + sampleDataQS;
                var called;

                var callback = function(err) {
                    if (!err) {
                        called = true;
                    }
                    assert.isTrue(called);
                    done();
                };

                Sandy._trackFetch(expected, callback);
            });

            it('_trackImage() uses an image tag to fire a tracking pixel', function() {
                var host = 'https://engagement-collector.mobify.net/s.gif';
                var ImageConstructor = Image;
                var expected = host + sampleDataQS;

                // Stub the Image constructor
                window.Image = function() {
                    return {'src': null};
                };
                var image = Sandy._trackImage(expected);
                assert.equal(image.src, expected,
                             'image sent to expected source');

                // Tear down stubbing.
                window.Image = ImageConstructor;
            });

            // mock out our XHR object
            var mockXHR = function() {};
            mockXHR.prototype = {
                'withCredentials' : 1,
                'send' : function() {},
                'open' : function(method, src) {}
            };

            it('trackAjax should create iframe', function() {
                var oldGlobal = Sandy._global;
                Sandy._global = {
                    'document' : {},
                    'XMLHttpRequest' : mockXHR
                };
                Sandy.iframe = null;
                Sandy._track('http://example.com', {'not_allows': 'thats okay'});
                assert.ok(Sandy.iframe, 'iframe should be created');
                Sandy._global = oldGlobal;
            });

            it('trackAjax once created iframe should use the iframe ajax call', function() {
                var oldGlobal = Sandy._global;
                var trackingURL;
                // patching the iframe for the call
                Sandy.iframe = {
                    'contentWindow' : {
                        XMLHttpRequest: mockXHR
                    }
                };
                Sandy.iframe.contentWindow.XMLHttpRequest.prototype.open = function(action, src) {
                    trackingURL = src;
                };
                Sandy._global = {
                    'document' : {},
                    'XMLHttpRequest' : mockXHR
                };
                Sandy._track('http://example.com', {'data': 123});
                assert.equal(trackingURL, 'http://example.com?data=123');
                Sandy._global = oldGlobal;
            });

            it('trackAjax once created iframe should queue any request until iframe is ready', function() {
                var oldGlobal = Sandy._global;
                var trackingURL = [];

                // Patch iframe in a not ready state
                Sandy.iframe = {};
                Sandy.iframeQueue = ['http://example.com?data=000'];
                Sandy._global = {
                    'document' : {},
                    'XMLHttpRequest' : mockXHR
                };

                Sandy._track('http://example.com', {'data': 123});
                Sandy._track('http://example.com', {'data': 456});

                // Patch iframe in a ready state
                Sandy.iframe.contentWindow = {
                    XMLHttpRequest: mockXHR
                };

                Sandy.iframe.contentWindow.XMLHttpRequest.prototype.open = function(action, src) {
                    trackingURL.push(src);
                };

                Sandy._iframeDrainQueue();

                assert.deepEqual(trackingURL, [
                    'http://example.com?data=000',
                    'http://example.com?data=123',
                    'http://example.com?data=456'
                ]);

                Sandy._global = oldGlobal;
            });

            it('_track() should appropriately route the tracking pixel call', function() {
                var host = 'https://engagement-collector.mobify.net/s.gif';
                var expected = host + sampleDataQS;

                var testTracking = function(globalMock, apiToMock) {
                    var trackingURL;
                    var oldGlobal = Sandy._global;
                    var oldTrackApi = Sandy[apiToMock];

                    Sandy._global = globalMock;
                    Sandy[apiToMock] = function(src) {
                        trackingURL = src;
                    };

                    Sandy._track(host, sampleData);
                    assert.equal(trackingURL, expected,
                                 apiToMock + ': the src should have the correct host and querystring');
                    Sandy[apiToMock] = oldTrackApi;
                    Sandy._global = oldGlobal;
                };

                testTracking({}, '_trackFetch');

                testTracking({document: {}}, '_trackImage');

                testTracking(
                    {
                        document: {'body': {}},
                        XMLHttpRequest: mockXHR
                    },
                    '_trackAjax'
                );

            });
        });
    });
});
