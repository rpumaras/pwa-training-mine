'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getLocationsCustomContent = exports.getCheckoutCustomContent = exports.hasShippingMethods = exports.getShippingMethods = exports.getBillingSameAsShipping = exports.getRegions = exports.getCountries = exports.getLocations = exports.getEmailAddress = undefined;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reselect = require('reselect');

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

var _selectors = require('../selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var getEmailAddress = exports.getEmailAddress = (0, _reselectImmutableHelpers.createGetSelector)(_selectors.getCheckout, 'email');

// import {getFormValues} from '../form/selectors'
var getLocations = exports.getLocations = (0, _reselectImmutableHelpers.createGetSelector)(_selectors.getCheckout, 'locations', _immutable2.default.Map());
var getCountries = exports.getCountries = (0, _reselectImmutableHelpers.createGetSelector)(getLocations, 'countries', _immutable2.default.List());
var getRegions = exports.getRegions = (0, _reselectImmutableHelpers.createGetSelector)(getLocations, 'regions', _immutable2.default.List());

var getBillingSameAsShipping = exports.getBillingSameAsShipping = (0, _reselectImmutableHelpers.createGetSelector)(_selectors.getCheckout, 'billingSameAsShipping');

// export const getSelectedCountryID = (formKey) => createSelector(
//     getFormValues(formKey),
//     (values) => {
//         return values ? values.countryId : null
//     }
// )

// // Filter list of available regions based on what user has selected as country
// // Accepts a formKey that determines which form's country selection should be used
// export const getAvailableRegions = (formKey) => createSelector(
//     getRegions,
//     getSelectedCountryID(formKey),
//     (regions, id) => {
//         return id ? regions.filter((region) => region.get('countryId').toUpperCase() === id.toUpperCase()) : []
//     }
// )

var getShippingMethods = exports.getShippingMethods = (0, _reselectImmutableHelpers.createGetSelector)(_selectors.getCheckout, 'shippingMethods', _immutable2.default.List());
var hasShippingMethods = exports.hasShippingMethods = (0, _reselect.createSelector)(_selectors.getCheckout, function (checkout) {
    return checkout.get('shippingMethods') ? !!checkout.get('shippingMethods').size : false;
});
var getCheckoutCustomContent = exports.getCheckoutCustomContent = (0, _reselectImmutableHelpers.createGetSelector)(_selectors.getCheckout, 'custom', _immutable2.default.Map());
var getLocationsCustomContent = exports.getLocationsCustomContent = (0, _reselectImmutableHelpers.createGetSelector)(getLocations, 'custom', _immutable2.default.Map());