'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseProductDetails = exports.parseThumbnail = exports.parseImages = exports.parseCategories = undefined;

var _config = require('./config');

var _parsers = require('./products/parsers');

var _utils = require('./products/utils');

var parseCategories = exports.parseCategories = function parseCategories(categories) {
    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return categories.map(function (category) {
        var path = root ? root + '/' + category.id : category.id;
        return {
            title: category.name,
            path: (0, _config.getCategoryPath)(path),
            isCategoryLink: true,
            children: category.subcategories ? parseCategories(category.subcategories, path) : []
        };
    });
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var parseImages = exports.parseImages = function parseImages() {
    var images = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (images.length) {
        var galleryImages = images.filter(function (image) {
            return image.imageType === _config.IMAGE_TYPES.GALLERY;
        });

        // If there are no gallery images we use the primary instead
        if (!galleryImages.length) {
            galleryImages = images.filter(function (image) {
                return image.imageType === _config.IMAGE_TYPES.PRIMARY;
            });
        }

        var productImages = galleryImages.filter(function (image) {
            return image.format === _config.IMAGE_SIZES.PRODUCT;
        });
        var thumbnailImages = galleryImages.filter(function (image) {
            return image.format === _config.IMAGE_SIZES.THUMBNAIL;
        });
        var zoomImages = galleryImages.filter(function (image) {
            return image.format === _config.IMAGE_SIZES.ZOOM;
        });

        return productImages.map(function (_ref, index) {
            var _ref$altText = _ref.altText,
                alt = _ref$altText === undefined ? '' : _ref$altText,
                src = _ref.url;

            var _ref2 = thumbnailImages.find(function (image) {
                return image.galleryIndex === index;
            }) || {},
                _ref2$url = _ref2.url,
                thumbnailSrc = _ref2$url === undefined ? '' : _ref2$url;

            var _ref3 = zoomImages.find(function (image) {
                return image.galleryIndex === index;
            }) || {},
                _ref3$url = _ref3.url,
                zoomSrc = _ref3$url === undefined ? '' : _ref3$url;

            return {
                alt: alt,
                src: src,
                thumbnailSrc: thumbnailSrc,
                zoomSrc: zoomSrc
            };
        });
    } else {
        return [_config.DEFAULT_IMAGE];
    }
};

var parseThumbnail = exports.parseThumbnail = function parseThumbnail(thumbnail, productName) {
    if (thumbnail) {
        return {
            alt: thumbnail.altText ? thumbnail.altText : productName,
            src: thumbnail.url
        };
    } else {
        return _config.DEFAULT_IMAGE;
    }
};

/**
 * @param {Array} variantOptions- variantOptions of current product
 * @example
 * [
 *   {
 *      "code": "300717433",
 *      "variantOptionQualifiers": [
 *        { "name": "Size", "qualifier": "size", "value": "L"},
 *        { "name": "Style", "qualifier": "style", "value": "heather berry" }
 *       ]
 *   }
 * ]
 *
 * @param {string} qualifierType - the variant qualifier
 * @example "size"
 *
 * @param {string} variantType - the variant type
 * @example "ApparelSizeVariantProduct"
 *
 * @return {Object} - VariationCategory
 * @example
 * {
       "id": "ApparelSizeVariantProduct",
       "label": "Size",
       "name": "ApparelSizeVariantProduct",
       "values": [
            { "label": "S", "value": "1978440"},
            { "label": "M", "value": "1978441"}
       ]
 * }
 */
var parseVariantionOptions = function parseVariantionOptions(variantOptions, qualifierType, variantType) {
    var label = void 0;
    if (variantOptions && variantOptions.length && variantOptions[0].variantOptionQualifiers) {
        var variantQualifier = variantOptions[0].variantOptionQualifiers.find(function (i) {
            return i.qualifier === qualifierType;
        });
        label = variantQualifier ? variantQualifier.name : '';
    }
    var values = variantOptions.map(function (option) {
        var qualifier = option.variantOptionQualifiers.find(function (i) {
            return i.qualifier === qualifierType;
        });
        return {
            label: qualifier ? qualifier.value : '',
            value: option.code
        };
    });
    var variationCategory = {
        id: variantType,
        label: label,
        name: variantType,
        values: values
    };
    return variationCategory;
};

var parseVariationCategories = function parseVariationCategories() {
    var baseOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var variantOptions = arguments[1];
    var productVariantType = arguments[2];

    var variationCategories = baseOptions.map(function (_ref4) {
        var options = _ref4.options,
            variantType = _ref4.variantType;
        return parseVariantionOptions(options, _config.VARIANT_QUALIFIERS[variantType], variantType);
    });

    if (variantOptions.length) {
        variationCategories.push(parseVariantionOptions(variantOptions, _config.VARIANT_QUALIFIERS[productVariantType], productVariantType));
    }
    return variationCategories;
};

var parseVariants = function parseVariants(baseOptions, variantOptions, variantType) {
    var variants = [];
    if (baseOptions.length) {
        var primaryBaseOptions = baseOptions.find(function (i) {
            return i.variantType === _config.VARIANT_TYPES.PRIMARY;
        });
        var secondaryBaseOptions = baseOptions.find(function (i) {
            return i.variantType === _config.VARIANT_TYPES.SECONDARY;
        });
        if (primaryBaseOptions && secondaryBaseOptions) {
            variants = (0, _parsers.parsePrimaryAndSecondaryBaseOptions)(primaryBaseOptions, secondaryBaseOptions);
        } else if (primaryBaseOptions && variantOptions.length) {
            variants = (0, _parsers.parsePrimaryBaseAndVariantOptions)(variantOptions, primaryBaseOptions, variantType);
        } else if (primaryBaseOptions || secondaryBaseOptions) {
            variants = (0, _parsers.parsePrimaryOrSecondaryBaseOptions)(primaryBaseOptions || secondaryBaseOptions);
        }
    } else if (variantOptions.length) {
        variants = (0, _parsers.parseVariantOptions)(variantOptions, variantType);
    }
    return variants;
};

var getStockLevel = function getStockLevel(stock) {
    return stock ? stock.stockLevelStatus !== _config.STOCK_STATUS.OUT_OF_STOCK && stock.stockLevel > 0 : undefined;
};

var getThumbnail = function getThumbnail(images) {
    return images.find(function (image) {
        return image.imageType === _config.IMAGE_TYPES.PRIMARY && image.format === _config.IMAGE_SIZES.THUMBNAIL;
    });
};

var parseProductDetails = exports.parseProductDetails = function parseProductDetails(_ref5) {
    var _ref5$baseOptions = _ref5.baseOptions,
        baseOptions = _ref5$baseOptions === undefined ? [] : _ref5$baseOptions,
        code = _ref5.code,
        description = _ref5.description,
        _ref5$images = _ref5.images,
        images = _ref5$images === undefined ? [] : _ref5$images,
        name = _ref5.name,
        price = _ref5.price,
        purchasable = _ref5.purchasable,
        summary = _ref5.summary,
        stock = _ref5.stock,
        _ref5$variantOptions = _ref5.variantOptions,
        variantOptions = _ref5$variantOptions === undefined ? [] : _ref5$variantOptions,
        variantType = _ref5.variantType;
    var full = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var hasVariations = baseOptions.length || variantOptions.length;
    var variationCategories = hasVariations ? parseVariationCategories(baseOptions, variantOptions, variantType) : [];
    var variants = hasVariations ? parseVariants(baseOptions, variantOptions, variantType) : [];
    var thumbnail = parseThumbnail(getThumbnail(images), name);
    var parsedImages = parseImages(images);
    return {
        available: getStockLevel(stock),
        description: summary || description ? summary + ' ' + description : undefined,
        full: full,
        href: (0, _config.getProductPath)(code),
        id: code,
        images: parsedImages,
        initialValues: variants ? (0, _utils.setInitialVariantValues)(variants, code, variationCategories) : {},
        price: price ? '' + price.value : undefined,
        purchasable: purchasable,
        title: name,
        thumbnail: thumbnail,
        variants: variants,
        variantType: variantType,
        variationCategories: variationCategories
    };
};