'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRequestHeaders = exports.buildSearchURL = exports.getSearchURL = exports.getWishlistURL = exports.getSignInURL = exports.getPaymentURL = exports.getHomeURL = exports.getDashboardURL = exports.getConfirmationURL = exports.getCheckoutShippingURL = exports.getCartURL = exports.getAccountAddressURL = exports.getProductPath = exports.getCategoryPath = exports.getSearchSuggestionsEndPoint = exports.getSearchByTextEndPoint = exports.getProductEndPoint = exports.getCategoryEndPoint = exports.getCatalogEndPoint = exports.getAuthEndPoint = exports.getApiEndPoint = exports.getDefaultCurrencyCode = exports.getRegions = exports.getMenuConfig = exports.getCatalogVersionId = exports.getCatalogId = exports.getBaseSiteId = exports.STOCK_STATUS = exports.QUERY_STRINGS = exports.PATHS = exports.DEFAULT_IMAGE = exports.CREDIT_CARD_TYPES = exports.registerConfig = exports.CREDIT_CARD_DATA_MAP = exports.VARIANT_QUALIFIERS = exports.VARIANT_TYPES = exports.IMAGE_TYPES = exports.IMAGE_SIZES = exports.AUTH = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _CREDIT_CARD_DATA_MAP, _CREDIT_CARD_TYPES; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


var _cardUtils = require('progressive-web-sdk/dist/card-utils');

var _utils = require('../../utils/utils');

var _constants = require('../../constants/product-list/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = {}; // eslint-disable-line
var AUTH = exports.AUTH = {};
var IMAGE_SIZES = exports.IMAGE_SIZES = {};
var IMAGE_TYPES = exports.IMAGE_TYPES = {};
var VARIANT_TYPES = exports.VARIANT_TYPES = {};
var VARIANT_QUALIFIERS = exports.VARIANT_QUALIFIERS = {};

/*
    This object is used to add custom credit card types
    that are supported by your Hybris instance
    There are credit cards that are common and shipped OOTB
    in Mobify's progressive-web-sdk library:
        - Visa
        - American Express
        - MasterCard
        - And more (complete information in progressive-web-sdk/src/card-utils.js)
*/
var CREDIT_CARD_DATA_MAP = exports.CREDIT_CARD_DATA_MAP = (_CREDIT_CARD_DATA_MAP = {}, (0, _defineProperty3.default)(_CREDIT_CARD_DATA_MAP, _cardUtils.VISA, {
    // The regex that matches the credit card number
    match: '^(4)',
    format: {
        // 4 groups of 4-digits, 16 digits in total, example: 4111 1111 1111 1111
        default: [4, 4, 4, 4]
    },
    cvv: {
        default: [3],
        // cvv icon class name will be generated:
        // 'pw-card-verification__icon--default-hint'
        iconName: 'default-hint'
    }
}), (0, _defineProperty3.default)(_CREDIT_CARD_DATA_MAP, _cardUtils.MAESTRO, {
    match: '^(50[0-9]{4}|56[0-9]{4}|(5[78]|6[0-9])[0-9]{4})',
    format: {
        default: [4, 4, 4, 4, 3],
        13: [4, 4, 5],
        15: [4, 6, 5]
    },
    cvv: {
        default: [3],
        iconName: 'default-hint'
    }
}), _CREDIT_CARD_DATA_MAP);

var registerConfig = exports.registerConfig = function registerConfig(cfg) {
    config = cfg;
    (0, _cardUtils.registerCardDataMap)(CREDIT_CARD_DATA_MAP);

    AUTH.ANONYMOUS = {
        CLIENT_ID: config.auth.anonymous.clientId,
        CLIENT_SECRET: config.auth.anonymous.clientSecret
    };
    AUTH.CUSTOMER = {
        CLIENT_ID: config.auth.customer.clientId,
        CLIENT_SECRET: config.auth.customer.clientSecret
    };
    IMAGE_SIZES.PRODUCT = config.imagesSizes.product;
    IMAGE_SIZES.THUMBNAIL = config.imagesSizes.thumbnail;
    IMAGE_SIZES.ZOOM = config.imagesSizes.zoom;
    IMAGE_TYPES.GALLERY = config.imagesTypes.gallery;
    IMAGE_TYPES.PRIMARY = config.imagesTypes.primary;

    if (config.variants && config.variants[config.baseSiteId]) {
        var variants = config.variants[config.baseSiteId];
        VARIANT_TYPES.PRIMARY = variants.primary.type;
        VARIANT_QUALIFIERS[VARIANT_TYPES.PRIMARY] = variants.primary.qualifier;
        if (variants.secondary) {
            VARIANT_TYPES.SECONDARY = variants.secondary.type;
            VARIANT_QUALIFIERS[VARIANT_TYPES.SECONDARY] = variants.secondary.qualifier;
        }
    }
};

var CREDIT_CARD_TYPES = exports.CREDIT_CARD_TYPES = (_CREDIT_CARD_TYPES = {}, (0, _defineProperty3.default)(_CREDIT_CARD_TYPES, _cardUtils.AMERICAN_EXPRESS, 'amex'), (0, _defineProperty3.default)(_CREDIT_CARD_TYPES, _cardUtils.MAESTRO, 'maestro'), (0, _defineProperty3.default)(_CREDIT_CARD_TYPES, _cardUtils.VISA, 'visa'), _CREDIT_CARD_TYPES);

var DEFAULT_IMAGE = exports.DEFAULT_IMAGE = {
    src: '//via.placeholder.com/350x350',
    alt: 'Image not available'
};

var PATHS = exports.PATHS = {
    CATEGORY: 'c',
    PDP: 'p'
};

var QUERY_STRINGS = exports.QUERY_STRINGS = {
    FILTERS: 'filters',
    PAGE: 'p',
    QUERY: 'q',
    RELEVANCE: 'relevance',
    SORT: 'sort'
};

var STOCK_STATUS = exports.STOCK_STATUS = {
    IN_STOCK: 'inStock',
    LOW_STOCK: 'lowStock',
    OUT_OF_STOCK: 'outOfStock'

    // CONFIG GETTERS
};var getBaseSiteId = exports.getBaseSiteId = function getBaseSiteId() {
    return config.baseSiteId;
};
var getCatalogId = exports.getCatalogId = function getCatalogId() {
    return config.catalogId[getBaseSiteId()];
};
var getCatalogVersionId = exports.getCatalogVersionId = function getCatalogVersionId() {
    return config.catalogVersionId;
};
var getMenuConfig = exports.getMenuConfig = function getMenuConfig() {
    return config.menuConfig[getBaseSiteId()];
};
var getRegions = exports.getRegions = function getRegions() {
    return config.regions[getBaseSiteId()];
};
var getDefaultCurrencyCode = exports.getDefaultCurrencyCode = function getDefaultCurrencyCode() {
    return config.defaultCurrencyCode;
};

// API ENDPOINTS
var getApiEndPoint = exports.getApiEndPoint = function getApiEndPoint() {
    return config.api.host + '/' + config.api.type + '/' + config.api.version + '/' + getBaseSiteId();
};
var getAuthEndPoint = exports.getAuthEndPoint = function getAuthEndPoint() {
    return config.api.host + '/authorizationserver/oauth/token';
};
var getCatalogEndPoint = exports.getCatalogEndPoint = function getCatalogEndPoint() {
    return getApiEndPoint() + '/catalogs/' + getCatalogId() + '/' + getCatalogVersionId();
};
var getCategoryEndPoint = exports.getCategoryEndPoint = function getCategoryEndPoint(catId) {
    return '/catalogs/' + getCatalogId() + '/' + getCatalogVersionId() + '/categories/' + catId;
};
var getProductEndPoint = exports.getProductEndPoint = function getProductEndPoint(productId) {
    return '/products/' + productId + '?fields=FULL';
};
var getSearchByTextEndPoint = exports.getSearchByTextEndPoint = function getSearchByTextEndPoint(searchTerm, page, sort, filters) {
    return '/products/search/?pageSize=' + _constants.ITEMS_PER_PAGE + '&currentPage=' + page + '&fields=FULL&query=' + searchTerm + ':' + sort + filters;
};
var getSearchSuggestionsEndPoint = exports.getSearchSuggestionsEndPoint = function getSearchSuggestionsEndPoint(searchTerm) {
    return '/products/suggestions?term=' + searchTerm + '&fields=FULL';
};

// CATEGORY AND PRODUCT PATHS
// TODO Try to respect OOTB hybris routes
var getCategoryPath = exports.getCategoryPath = function getCategoryPath(id) {
    return '/' + PATHS.CATEGORY + '/' + id;
};
var getProductPath = exports.getProductPath = function getProductPath(productID) {
    return '/' + PATHS.PDP + '/' + productID;
};

// CUSTOM URLS
var getAccountAddressURL = exports.getAccountAddressURL = function getAccountAddressURL() {
    return '/customer/address/';
};
var getCartURL = exports.getCartURL = function getCartURL() {
    return '/checkout/cart/';
};
var getCheckoutShippingURL = exports.getCheckoutShippingURL = function getCheckoutShippingURL() {
    return '/checkout/shipping';
};
var getConfirmationURL = exports.getConfirmationURL = function getConfirmationURL() {
    return '/checkout/confirmation/';
};
var getDashboardURL = exports.getDashboardURL = function getDashboardURL() {
    return '/customer/account';
};
var getHomeURL = exports.getHomeURL = function getHomeURL() {
    return '/';
};
var getPaymentURL = exports.getPaymentURL = function getPaymentURL() {
    return '/checkout/payment';
};
var getSignInURL = exports.getSignInURL = function getSignInURL() {
    return '/customer/account/login/';
};
var getWishlistURL = exports.getWishlistURL = function getWishlistURL() {
    return '/wishlist/';
};
var getSearchURL = exports.getSearchURL = function getSearchURL() {
    return '/search/';
};

var buildSearchURL = exports.buildSearchURL = function buildSearchURL(query) {
    return query ? '' + getSearchURL() + (0, _utils.buildQueryString)(query) : '';
};

var getRequestHeaders = exports.getRequestHeaders = function getRequestHeaders() {
    return {
        'Content-Type': 'application/x-www-form-urlencoded'
    };
};