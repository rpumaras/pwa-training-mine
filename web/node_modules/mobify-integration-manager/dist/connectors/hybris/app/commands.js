'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initApp = exports.loadCurrenciesData = exports.getSearchSuggestions = exports.fetchNavigationData = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _fetchUtils = require('progressive-web-sdk/dist/utils/fetch-utils');

var _actions = require('progressive-web-sdk/dist/analytics/actions');

var _results = require('../../../integration-manager/results');

var _results2 = require('../../../integration-manager/api/checkout/results');

var _routing = require('progressive-web-sdk/dist/routing');

var _commands = require('../cart/commands');

var _utils = require('../account/utils');

var _parser = require('./parser');

var _parsers = require('../parsers');

var _utils2 = require('../utils');

var _config = require('../config');

var _constants = require('../../../constants/navigation/constants');

var _actions2 = require('../actions');

var _enhancements = require('../enhancements');

var _enhancements2 = _interopRequireDefault(_enhancements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-disable no-unused-vars */

var fetchCategories = function fetchCategories(menuItems) {
    var requestOptions = {
        headers: (0, _config.getRequestHeaders)()
    };
    return (0, _fetchUtils.makeRequest)('' + (0, _config.getCatalogEndPoint)(), requestOptions).then((0, _utils2.parseResponse)('Could not get categories', true)).then(function (_ref) {
        var categories = _ref.categories;
        return categories;
    });
};

var fetchNavigationData = exports.fetchNavigationData = function fetchNavigationData() {
    return function (dispatch) {
        var requestOptions = {
            headers: (0, _config.getRequestHeaders)()
        };
        var navData = [];
        var menuItems = (0, _config.getMenuConfig)() || [];

        // Use menu configuration to display categories
        return menuItems.reduce(function (p, menuItem) {
            return p.then(function () {
                return (0, _fetchUtils.makeRequest)((0, _config.getCatalogEndPoint)() + '/categories/' + menuItem.id, requestOptions).then((0, _utils2.parseResponse)('Could not get category ' + menuItem.id, true)).then(function (json) {
                    var node = menuItem.displayAsNode ? [json] : json.subcategories;
                    navData = navData.concat((0, _parsers.parseCategories)(node));
                });
            });
        }, _promise2.default.resolve())
        // If there isn't any menu configuration, use categories as they are stored in hybris
        .then(function () {
            if (navData.length) {
                return _promise2.default.resolve();
            } else {
                return fetchCategories().then(function (categories) {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = (0, _getIterator3.default)(categories), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var cat = _step.value;

                            if (typeof cat.name !== 'undefined') {
                                navData = navData.concat((0, _parsers.parseCategories)([cat]));
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                });
            }
        }).then(function () {
            var isLoggedIn = (0, _utils2.isUserLoggedIn)();
            var accountNode = [{
                type: isLoggedIn ? _constants.ACCOUNT_NAV_ITEM : _constants.SIGNED_OUT_ACCOUNT_NAV_ITEM,
                title: 'My Account',
                options: {
                    icon: 'user',
                    className: 'u-margin-top-md u-border-top'
                },
                path: (0, _config.getDashboardURL)()
            }, {
                type: isLoggedIn ? _constants.ACCOUNT_NAV_ITEM : _constants.SIGNED_OUT_ACCOUNT_NAV_ITEM,
                title: 'Wishlist',
                options: {
                    icon: 'star'
                },
                path: (0, _config.getWishlistURL)()
            }, (0, _extends3.default)({}, isLoggedIn ? _constants.LOGGED_IN_NAV : _constants.GUEST_NAV, {
                options: {
                    icon: isLoggedIn ? 'lock' : 'user',
                    className: !isLoggedIn ? 'u-margin-top-md u-border-top' : ''
                },
                path: (0, _config.getSignInURL)()
            })];

            var navigationData = {
                path: '/',
                root: {
                    title: 'Root',
                    path: (0, _config.getHomeURL)(),
                    children: navData.concat(accountNode)
                }
            };

            return dispatch((0, _results.receiveNavigationData)(navigationData));
        });
    };
};

var getSearchSuggestions = exports.getSearchSuggestions = function getSearchSuggestions(query) {
    return function (dispatch) {
        // Only make request search when query is 2 characters or more.
        // Empty list if less than 2 characters
        if (query.length < 2) {
            return dispatch((0, _results.receiveSearchSuggestions)(null));
        }

        var searchSuggestionsEndpoint = (0, _config.getSearchSuggestionsEndPoint)(query);
        return (0, _utils2.makeApiRequest)(searchSuggestionsEndpoint, { method: 'GET' }).then((0, _utils2.parseResponse)('Could not retrieve search suggestions', true)).then(function (response) {
            return dispatch((0, _results.receiveSearchSuggestions)((0, _parser.parseSearchSuggestions)(response)));
        });
    };
};

var loadCurrenciesData = exports.loadCurrenciesData = function loadCurrenciesData() {
    return function (dispatch) {
        return (0, _utils2.makeUnAuthenticatedApiRequest)('/currencies').then((0, _utils2.parseResponse)('Unable to get currencies', true)).then(function (_ref2) {
            var currencies = _ref2.currencies;

            var parsedCurrencies = (0, _parser.parseCurrencies)(currencies);
            var selectedCurrency = parsedCurrencies.find(function (_ref3) {
                var code = _ref3.code;
                return code === (0, _config.getDefaultCurrencyCode)();
            });

            if (!selectedCurrency) {
                selectedCurrency = parsedCurrencies[0];
            }

            dispatch((0, _results.receiveAvailableCurrencies)(parsedCurrencies));

            dispatch((0, _results.receiveSelectedCurrency)(selectedCurrency));

            // Send currency analytics
            dispatch((0, _actions.setCurrencyCode)(selectedCurrency.code));
        });
    };
};

var initApp = exports.initApp = function initApp() {
    return function (dispatch) {
        dispatch((0, _actions2.receiveEnhancements)(_enhancements2.default));
        return (0, _utils2.initHybrisAuth)().then(function () {
            dispatch(loadCurrenciesData());
        }).then(function () {
            return dispatch(fetchNavigationData());
        }).then(function () {
            var userEmail = (0, _utils2.getUserEmail)();
            dispatch((0, _commands.getCart)());
            dispatch((0, _utils.loadTitlesData)());
            dispatch((0, _results.setCartURL)((0, _config.getCartURL)()));
            dispatch((0, _results.setCheckoutShippingURL)((0, _config.getCheckoutShippingURL)()));
            dispatch((0, _results.setSignInURL)((0, _config.getSignInURL)()));
            // TODO set account URLs when available
            dispatch((0, _results.setAccountAddressURL)((0, _config.getAccountAddressURL)()));
            // dispatch(setAccountInfoURL(getAccountInfoURL()))
            // dispatch(setAccountURL(getDashboardURL()))
            dispatch((0, _results.setWishlistURL)((0, _config.getWishlistURL)()));
            if (userEmail) {
                dispatch((0, _results2.receiveUserEmail)(userEmail));
            }
            dispatch((0, _results.setLoggedIn)((0, _utils2.getUserType)() === _utils2.USER_REGISTERED));
        });
    };
};