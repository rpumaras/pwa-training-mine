'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.registerUser = exports.login = exports.addAddress = exports.editAddress = exports.deleteAddress = exports.updateBillingAddress = exports.updateShippingAddress = exports.setCustomerShippingAddress = exports.getCustomerDefaultAddress = exports.getWishlist = exports.getOrder = exports.getOrderList = exports.getSavedAddresses = exports.getAccountInfo = exports.navigateToSection = exports.logout = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _fetchUtils = require('progressive-web-sdk/dist/utils/fetch-utils');

var _results = require('../../../integration-manager/api/account/results');

var _results2 = require('../../../integration-manager/results');

var _results3 = require('../../../integration-manager/api/checkout/results');

var _config = require('../config');

var _utils = require('./utils');

var _selectors = require('progressive-web-sdk/dist/store/cart/selectors');

var _parsers = require('./parsers');

var _utils2 = require('../cart/utils');

var _commands = require('../cart/commands');

var _utils3 = require('../utils');

var _commands2 = require('../app/commands');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var logout = exports.logout = function logout() {
    return function (dispatch) {
        (0, _utils3.deleteSession)();
        dispatch((0, _commands.getCart)());
        dispatch((0, _results2.setLoggedIn)(false));
        dispatch((0, _results3.receiveUserEmail)(null));
        dispatch((0, _commands2.fetchNavigationData)());
        return _promise2.default.resolve();
    };
};

var navigateToSection = exports.navigateToSection = function navigateToSection(router, routes, sectionName) {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called navigateToSection stub with parameters:', router, routes, sectionName);
        return _promise2.default.resolve();
    };
};

var getAccountInfo = exports.getAccountInfo = function getAccountInfo() {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        if ((0, _utils3.getUserType)() === _utils3.USER_REGISTERED) {
            return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '?fields=FULL', { method: 'GET' }).then((0, _utils3.parseResponse)('Unable to fetch user information', true));
            // parser not implemented yet
            // .then((res) => )
        }
        return _promise2.default.reject('Error getting current user. User is not logged in.');
    };
};

var getSavedAddresses = exports.getSavedAddresses = function getSavedAddresses() {
    return function (dispatch) {
        if ((0, _utils3.getUserType)() === _utils3.USER_REGISTERED) {
            return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses?fields=FULL', { method: 'GET' }).then((0, _utils3.parseResponse)('Unable to fetch user information', true)).then(function (_ref) {
                var _ref$addresses = _ref.addresses,
                    addresses = _ref$addresses === undefined ? [] : _ref$addresses;

                var mobifyAddresses = addresses.map(function (address) {
                    return (0, _parsers.parseHybrisToMobifyAddress)(address);
                });
                var preferred = mobifyAddresses.find(function (address) {
                    return address.preferred;
                });
                if (!preferred && mobifyAddresses.length) {
                    mobifyAddresses[0].preferred = true;
                }
                return dispatch((0, _results.receiveSavedAddresses)(mobifyAddresses));
            });
        }
        return _promise2.default.reject('Error getting customer shipping address. User is not logged in.');
    };
};

var getOrderList = exports.getOrderList = function getOrderList() {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called getOrderList stub');
        return _promise2.default.resolve();
    };
};

var getOrder = exports.getOrder = function getOrder(orderNumber) {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called getOrder stub');
        return _promise2.default.resolve();
    };
};

var getWishlist = exports.getWishlist = function getWishlist() {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called getWishlist stub');
        return _promise2.default.resolve();
    };
};

var getCustomerDefaultAddress = exports.getCustomerDefaultAddress = function getCustomerDefaultAddress() {
    return function (dispatch) {
        if ((0, _utils3.getUserType)() === _utils3.USER_REGISTERED) {
            return dispatch(getSavedAddresses()).then(function (addresses) {
                return addresses.find(function (address) {
                    return address.preferred;
                });
            });
        }
        return _promise2.default.reject('Error getting current user. User is not logged in.');
    };
};

var setCustomerShippingAddress = exports.setCustomerShippingAddress = function setCustomerShippingAddress(mobifyAddress) {
    return function (dispatch, getState) {
        if ((0, _utils3.getUserType)() === _utils3.USER_REGISTERED) {
            var addressId = mobifyAddress.id;

            var hybrisAddress = (0, _parsers.parseMobifyToHybrisAddress)(mobifyAddress, getState);
            if (addressId) {
                return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses/' + addressId, { method: 'PUT' }, (0, _extends3.default)({}, hybrisAddress, { defaultAddress: true })).then((0, _utils3.parseResponse)('Unable to set address to customer')).then(function () {
                    return mobifyAddress;
                });
            } else {
                return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses?fields=FULL', { method: 'POST' }, hybrisAddress).then(_utils.parseAddressResponse).then(function (responseAddress) {
                    return (0, _parsers.parseHybrisToMobifyAddress)(responseAddress, getState);
                });
            }
        }
        return _promise2.default.reject('Error setting customer shipping address. User is not logged in.');
    };
};

var updateShippingAddress = exports.updateShippingAddress = function updateShippingAddress(formValues) {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called updateShippingAddress stub with parameters:', formValues);
        return _promise2.default.resolve();
    };
};

var updateBillingAddress = exports.updateBillingAddress = function updateBillingAddress(formValues) {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called updateBillingAddress stub with parameters:', formValues);
        return _promise2.default.resolve();
    };
};

var deleteAddress = exports.deleteAddress = function deleteAddress(addressId) {
    var fetchAfterDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return function (dispatch) {
        return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses/' + addressId, { method: 'DELETE' }).then((0, _utils3.parseResponse)('Unable to delete address')).then(function () {
            return fetchAfterDelete ? dispatch(getSavedAddresses()) : _promise2.default.resolve();
        });
    };
};

var editAddress = exports.editAddress = function editAddress(mobifyAddress, addressId) {
    return function (dispatch, getState) {
        var hybrisAddress = (0, _parsers.parseMobifyToHybrisAddress)(mobifyAddress, getState);
        return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses/' + addressId, { method: 'PUT' }, hybrisAddress).then((0, _utils3.parseResponse)('Unable to edit address')).then(function () {
            return dispatch(getSavedAddresses());
        });
    };
};

var addAddress = exports.addAddress = function addAddress(mobifyAddress) {
    return function (dispatch, getState) {
        var hybrisAddress = (0, _parsers.parseMobifyToHybrisAddress)(mobifyAddress, getState);
        return (0, _utils3.makeApiRequest)('/users/' + (0, _utils3.getUserType)() + '/addresses', { method: 'POST' }, hybrisAddress).then(_utils.parseAddressResponse).then(function () {
            return dispatch(getSavedAddresses());
        });
    };
};

var isCartIdentical = function isCartIdentical(guestCartItems, userCartItems) {
    // If merge empty cart, consider it as not merged
    if (guestCartItems.length === 0 || userCartItems.length === 0) {
        return true;
    }

    if (guestCartItems.length !== userCartItems.length) {
        return false;
    }

    for (var i = 0; i < guestCartItems.length; i++) {
        if (guestCartItems[i].quantity !== userCartItems[i].quantity || guestCartItems[i].productId !== userCartItems[i].productId) {
            return false;
        }
    }
    return true;
};

var login = exports.login = function login(username, password) {
    var redirectAfterLogin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return function (dispatch, getState) {
        var body = {
            client_id: _config.AUTH.CUSTOMER.CLIENT_ID,
            grant_type: 'password',
            client_secret: _config.AUTH.CUSTOMER.CLIENT_SECRET,
            username: username,
            password: password
        };
        var oldCartID = void 0;
        var guestCartItems = (0, _selectors.getCartItems)(getState()).toJS();
        return (0, _fetchUtils.makeFormEncodedRequest)((0, _config.getAuthEndPoint)(), body, { method: 'POST' }).then(function (response) {
            return response.json().catch(function () {
                throw new Error({ _error: 'There was a problem logging in. Please try again.' });
            });
        }).then(function (json) {
            if (json.error) {
                var errorMessage = 'Username or password is incorrect';
                if (/internal server/i.test(json.error.message)) {
                    errorMessage = 'There was a problem logging in. Please try again.';
                }
                throw new Error({ _error: errorMessage });
            }
            (0, _utils3.storeAuthTokenAndExpiration)(json);
            dispatch((0, _results2.setLoggedIn)(true));
            dispatch((0, _results3.receiveUserEmail)(username));
            (0, _utils3.storeUserType)(_utils3.USER_REGISTERED);
            (0, _utils3.storeUserEmail)(username);
            dispatch(getSavedAddresses());
            dispatch((0, _commands2.fetchNavigationData)());
            oldCartID = (0, _utils3.getCartID)();
            (0, _utils3.deleteCartID)();
            return _promise2.default.resolve();
        })
        // Check if the user has a cart already
        .then(function () {
            return (0, _utils3.makeApiRequest)('/users/current/carts', { method: 'GET' });
        }).then((0, _utils3.parseResponse)('Could not get user carts', true)).then(function (_ref2) {
            var carts = _ref2.carts;

            var newCart = void 0;
            if (!carts || !carts.length) {
                newCart = (0, _utils2.createCart)(oldCartID);
            } else {
                var userCart = carts[0];
                if (oldCartID) {
                    newCart = (0, _utils2.mergeCart)(userCart, oldCartID);
                } else {
                    newCart = userCart;
                    (0, _utils3.storeCartID)((0, _utils3.calculateCartID)(newCart));
                }
            }
            return newCart;
        }).then(function (cart) {
            return dispatch((0, _utils2.handleCartData)(cart));
        }).then(function () {
            var userCartItems = (0, _selectors.getCartItems)(getState()).toJS();
            var isCartMerged = !isCartIdentical(guestCartItems, userCartItems);
            return {
                href: redirectAfterLogin ? (0, _config.getDashboardURL)() : '',
                isCartMerged: isCartMerged
            };
        });
    };
};

var removeInvalidCustomerAddresses = function removeInvalidCustomerAddresses() {
    return function (dispatch) {
        return dispatch(getSavedAddresses()).then(function (addresses) {
            var promises = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(addresses), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var address = _step.value;

                    if (!address.preferred) {
                        promises.push(dispatch(deleteAddress(address.id, false)));
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return _promise2.default.all(promises).then(function () {
                return dispatch(getSavedAddresses());
            });
        });
    };
};

var registerGuestUser = function registerGuestUser() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        email = _ref3.email,
        guid = _ref3.guid;

    var password = arguments[1];
    return function (dispatch) {
        var body = {
            guid: guid,
            uid: email,
            password: password
        };
        return (0, _utils3.makeApiRequest)('/users', { method: 'POST' }, body).then(function (response) {
            if (response.status !== 201) {
                return response.json().catch(function () {
                    throw new Error(response.statusText);
                }).then(function (json) {
                    var errorData = (0, _utils.getRegisterUserErrorData)(json);
                    throw new Error(errorData);
                });
            }
            // Creating a user doesn't sign them in automatically, so dispatch the login command
            return dispatch(login(email, password, false));
        }).then(function () {
            // When converting a guest user to a customer, it is possible that the guest user has
            // some invalid addresses on his address book due to the OOTB behaviour of OCC that doesn't
            // allow updating a guest user's delivery address but only creating new ones. So at this point
            // we remove all the addresses on this address book that are not set as default and we keep
            // the default one, that is the one that was finally used on the place order
            return dispatch(removeInvalidCustomerAddresses());
        }).then(function () {
            return (0, _config.getDashboardURL)();
        });
    };
};

var registerAnonymousUser = function registerAnonymousUser(firstname, lastname, email, password, titleCode) {
    return function (dispatch) {
        var body = {
            login: email,
            password: password,
            firstName: firstname,
            lastName: lastname,
            titleCode: titleCode
        };
        return (0, _utils3.makeApiRequest)('/users', { method: 'POST' }, body).then(function (response) {
            if (response.status !== 201) {
                return response.json().catch(function () {
                    throw new Error(response.statusText);
                }).then(function (json) {
                    var errorData = (0, _utils.getRegisterUserErrorData)(json);
                    throw new Error(errorData);
                });
            }
            // Creating a user doesn't sign them in automatically, so dispatch the login command
            return dispatch(login(email, password));
        });
    };
};

var registerUser = exports.registerUser = function registerUser(firstname, lastname, email, password, opts) {
    return function (dispatch) {
        var titleCode = opts.titleCode,
            confirmationData = opts.confirmationData;

        if (!titleCode) {
            throw new Error('Unable to register user, missing field: "titleCode"');
        }
        console.log(opts);

        if (confirmationData && confirmationData.guid) {
            return dispatch(registerGuestUser(confirmationData, password)).then(function () {
                return dispatch((0, _results2.receiveOrderConfirmationContents)({
                    email: null,
                    guid: null,
                    orderNumber: null
                }));
            });
        } else {
            return dispatch(registerAnonymousUser(firstname, lastname, email, password, titleCode));
        }
    };
};