'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseShippingMethods = exports.parseDeliveryCountries = exports.parseHybrisToMobifyAddress = exports.parseMobifyToHybrisAddress = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _parserUtils = require('../../../utils/parser-utils');

var _utils = require('./utils');

var _utils2 = require('../../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parseMobifyToHybrisAddress = exports.parseMobifyToHybrisAddress = function parseMobifyToHybrisAddress() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        name = _ref.name,
        addressLine1 = _ref.addressLine1,
        _ref$addressLine = _ref.addressLine2,
        addressLine2 = _ref$addressLine === undefined ? '' : _ref$addressLine,
        _ref$company = _ref.company,
        company = _ref$company === undefined ? '' : _ref$company,
        postcode = _ref.postcode,
        city = _ref.city,
        regionId = _ref.regionId,
        countryId = _ref.countryId,
        telephone = _ref.telephone,
        id = _ref.id,
        _ref$preferred = _ref.preferred,
        preferred = _ref$preferred === undefined ? false : _ref$preferred;

    var getState = arguments[1];

    var _splitFullName = (0, _utils2.splitFullName)(name || ''),
        firstname = _splitFullName.firstname,
        lastname = _splitFullName.lastname;

    var address = {
        titleCode: (0, _utils.getDefaultTitleCode)(getState),
        firstName: firstname,
        lastName: lastname,
        line1: addressLine1,
        line2: addressLine2,
        postalCode: postcode,
        town: city,
        'country.isocode': countryId,
        phone: telephone,
        companyName: company,
        id: id,
        defaultAddress: preferred
    };

    if (regionId) {
        address = (0, _extends3.default)({}, address, {
            'region.isocode': regionId
        });
    }
    return address;
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var parseHybrisToMobifyAddress = exports.parseHybrisToMobifyAddress = function parseHybrisToMobifyAddress() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        line1 = _ref2.line1,
        _ref2$line = _ref2.line2,
        line2 = _ref2$line === undefined ? '' : _ref2$line,
        country = _ref2.country,
        town = _ref2.town,
        firstName = _ref2.firstName,
        id = _ref2.id,
        lastName = _ref2.lastName,
        postalCode = _ref2.postalCode,
        region = _ref2.region,
        _ref2$phone = _ref2.phone,
        phone = _ref2$phone === undefined ? '' : _ref2$phone,
        titleCode = _ref2.titleCode,
        _ref2$companyName = _ref2.companyName,
        companyName = _ref2$companyName === undefined ? '' : _ref2$companyName,
        _ref2$defaultAddress = _ref2.defaultAddress,
        defaultAddress = _ref2$defaultAddress === undefined ? false : _ref2$defaultAddress;

    return {
        addressLine1: line1,
        addressLine2: line2,
        countryId: country ? country.isocode : null,
        city: town,
        firstname: firstName,
        id: id,
        lastname: lastName,
        name: firstName + ' ' + lastName,
        postcode: postalCode,
        region: region ? region.name : '',
        regionId: region ? region.isocode : null,
        telephone: phone,
        titleCode: titleCode,
        company: companyName,
        preferred: defaultAddress
    };
};

var parseDeliveryCountries = exports.parseDeliveryCountries = function parseDeliveryCountries() {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        countries = _ref3.countries;

    return (countries || []).map(function (_ref4) {
        var isocode = _ref4.isocode,
            name = _ref4.name;
        return {
            id: isocode,
            label: name,
            regionRequired: true,
            postcodeRequired: true
        };
    });
};

var parseShippingMethods = exports.parseShippingMethods = function parseShippingMethods(deliveryModes) {
    return (deliveryModes || []).map(function (_ref5) {
        var code = _ref5.code,
            deliveryCost = _ref5.deliveryCost,
            description = _ref5.description,
            name = _ref5.name;
        return {
            label: name + ' - ' + description,
            cost: deliveryCost ? (0, _parserUtils.parsePrice)(deliveryCost.formattedValue) : '',
            id: code
        };
    });
};