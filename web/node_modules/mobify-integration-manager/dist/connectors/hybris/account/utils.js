'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseAddressResponse = exports.getAddressErrorData = exports.getRegisterUserErrorData = exports.getBillingAddressInitialValues = exports.getShippingAddressInitialValues = exports.getDefaultTitleCode = exports.loadTitlesData = exports.populateLocationsData = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _config = require('../config');

var _parsers = require('./parsers');

var _utils = require('../utils');

var _selectors = require('../../../store/checkout/selectors');

var _results = require('../../../integration-manager/api/checkout/results');

var _actions = require('../actions');

var _selectors2 = require('../selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var populateLocationsData = exports.populateLocationsData = function populateLocationsData() {
    return function (dispatch, getState) {
        var locationData = (0, _selectors.getLocations)(getState()).toJS();
        if (locationData && locationData.countries) {
            return _promise2.default.resolve(locationData);
        } else {
            return (0, _utils.makeApiRequest)('/deliverycountries', { method: 'GET' }).then((0, _utils.parseResponse)('Unable to get delivery countries', true)).then(function (response) {
                var countries = (0, _parsers.parseDeliveryCountries)(response);
                dispatch((0, _results.receiveCheckoutLocations)({ countries: countries, regions: (0, _config.getRegions)() }));
            });
        }
    };
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var loadTitlesData = exports.loadTitlesData = function loadTitlesData() {
    return function (dispatch) {
        return (0, _utils.makeUnAuthenticatedApiRequest)('/titles').then((0, _utils.parseResponse)('Unable to get titles', true)).then(function (_ref) {
            var titles = _ref.titles;
            return dispatch((0, _actions.receiveTitles)(titles));
        });
    };
};

var getDefaultTitleCode = exports.getDefaultTitleCode = function getDefaultTitleCode(getState) {
    var titles = (0, _selectors2.getRegisterUserEnhancementTitleField)(getState()).toJS();
    return titles && titles.initialValue;
};

var getShippingAddressInitialValues = exports.getShippingAddressInitialValues = function getShippingAddressInitialValues(getState) {
    var locationCountries = (0, _selectors.getCountries)(getState()).toJS() || [];
    var initialValues = {
        addressLine1: '',
        addressLine2: '',
        countryId: locationCountries.length ? locationCountries[0].id : '',
        city: '',
        company: '',
        firstname: '',
        id: '',
        lastname: '',
        name: '',
        postcode: '',
        region: '',
        regionId: '',
        telephone: ''
    };
    return initialValues;
};

var getBillingAddressInitialValues = exports.getBillingAddressInitialValues = function getBillingAddressInitialValues(getState) {
    var shippingInitialValues = getShippingAddressInitialValues(getState);
    var initialValues = (0, _extends3.default)({}, shippingInitialValues, {
        cvv: '',
        ccnumber: '',
        ccname: '',
        ccexpiry: ''
    });
    return initialValues;
};

var mapHybrisToMobifyUserParam = function mapHybrisToMobifyUserParam(param) {
    switch (param) {
        case 'email':
            return 'uid';
        case 'password':
            return 'password';
        case 'firstname':
            return 'firstName';
        case 'lastname':
            return 'lastName';
        default:
            return false;
    }
};

var getRegisterUserErrorData = exports.getRegisterUserErrorData = function getRegisterUserErrorData(response) {
    var errors = response.errors || {};
    var errorData = errors.reduce(function (acc, err) {
        if (err.type === 'DuplicateUidError') {
            acc.email = 'This email already exists.';
        } else {
            var param = mapHybrisToMobifyUserParam(err.subject);
            if (param) {
                acc[param] = acc[param] || err.message;
            }
        }
        return acc;
    }, {});
    errorData._error = 'Unable to create account.';
    return errorData;
};

var mapHybrisToMobifyAddressParam = function mapHybrisToMobifyAddressParam(param) {
    switch (param) {
        case 'line1':
            return 'addressLine1';
        case 'line2':
            return 'addressLine2';
        case 'country.isocode':
            return 'countryId';
        case 'firstName':
            return 'name';
        case 'lastName':
            return 'name';
        case 'postalCode':
            return 'postcode';
        case 'region.name':
            return 'region';
        case 'region.isocode':
            return 'regionId';
        case 'phone':
            return 'telephone';
        case 'companyName':
            return 'company';
        default:
            return false;
    }
};

var getAddressErrorData = exports.getAddressErrorData = function getAddressErrorData(response) {
    var errors = response.errors || {};
    var errorData = errors.reduce(function (acc, err) {
        var param = mapHybrisToMobifyAddressParam(err.subject);
        if (param) {
            if (param === 'name') {
                acc[param] = 'Please provide First & Last Name';
            }
            acc[param] = acc[param] || err.message;
        }
        return acc;
    }, {});
    errorData._error = 'Unable to add address.';
    return errorData;
};

var parseAddressResponse = exports.parseAddressResponse = function parseAddressResponse(response) {
    return response.json().catch(function () {
        throw new Error(response.statusText);
    }).then(function (json) {
        if (response.status < 200 || response.status > 299) {
            var errorData = getAddressErrorData(json);
            throw new Error(errorData);
        }
        return json;
    });
};