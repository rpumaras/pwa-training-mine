'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addItemToWishlist = exports.getProductVariantData = exports.initProductDetailsPage = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _results = require('../../../integration-manager/api/products/results');

var _results2 = require('../../../integration-manager/results');

var _selectors = require('progressive-web-sdk/dist/store/products/selectors');

var _config = require('../config');

var _utils = require('../utils');

var _parsers = require('../parsers');

var _utils2 = require('./utils');

var _constants = require('../../../constants/form/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-disable no-unused-vars */
var loadProduct = function loadProduct(productDetailsData) {
    return function (dispatch) {
        var id = productDetailsData.id;

        if (id) {
            var productDetailsMap = (0, _defineProperty3.default)({}, id, productDetailsData);
            var UIData = (0, _defineProperty3.default)({}, id, {
                breadcrumbs: [{
                    href: '/',
                    text: 'Home'
                }, {
                    href: productDetailsData.href,
                    text: productDetailsData.title
                }],
                itemQuantity: 1
            });
            dispatch((0, _results2.receiveCurrentProductId)(id));
            dispatch((0, _results.receiveProductDetailsProductData)(productDetailsMap));
            dispatch((0, _results.receiveProductDetailsUIData)(UIData));
        }
        return _promise2.default.resolve();
    };
};

var initProductDetailsPage = exports.initProductDetailsPage = function initProductDetailsPage(url, routeName) {
    return function (dispatch, getState) {
        var productId = (0, _utils.extractLastPartOfURL)(url);
        var productEndpoint = (0, _config.getProductEndPoint)(productId);
        var currentState = getState();
        var productState = (0, _selectors.getProductById)(productId)(currentState).toJS();
        var productStateDefaultVariantId = (0, _utils2.getDefaultVariantId)(productState);

        if ((!productState || !productState.full) && productId) {
            return (0, _utils.makeApiRequest)(productEndpoint, { method: 'GET' }).then((0, _utils.parseResponse)('Unable to retrieve product', true)).then(function (response) {
                var currentPath = (0, _utils.extractLastPartOfURL)(window.location.pathname);
                var productDetailsData = (0, _parsers.parseProductDetails)(response, true);

                dispatch(loadProduct(productDetailsData));

                if (!productDetailsData.purchasable) {
                    var defaultVariantId = (0, _utils2.getDefaultVariantId)(productDetailsData);
                    if (defaultVariantId) {
                        dispatch(initProductDetailsPage(defaultVariantId));
                    }
                } else if (currentPath !== productId) {
                    dispatch((0, _results2.setCurrentURL)((0, _config.getProductPath)(productId)));
                }
            });
        } else if (!productState.purchasable && productStateDefaultVariantId) {
            return dispatch(initProductDetailsPage(productStateDefaultVariantId));
        } else {
            return dispatch(loadProduct(productState));
        }
    };
};

var getProductVariantData = exports.getProductVariantData = function getProductVariantData(variationSelections, variants, categoryIds) {
    return function (dispatch, getState) {
        var currentState = getState();
        if (currentState.form && currentState.form[_constants.ADD_TO_CART_FORM_NAME]) {
            var oldVariantSelection = currentState.form[_constants.ADD_TO_CART_FORM_NAME].initial;
            var changedVariantKey = (0, _keys2.default)(oldVariantSelection).find(function (k) {
                return oldVariantSelection[k] !== variationSelections[k];
            });
            if (changedVariantKey) {
                var selectedProductID = variationSelections[changedVariantKey];
                var productState = (0, _selectors.getProductById)(selectedProductID)(currentState).toJS();
                if (!productState || !productState.full) {
                    var productHref = (0, _config.getProductPath)(selectedProductID);
                    dispatch((0, _results2.setCurrentURL)(productHref));
                    dispatch(initProductDetailsPage(productHref));
                } else if (!productState.purchasable) {
                    var defaultVariantId = (0, _utils2.getDefaultVariantId)(productState);
                    if (defaultVariantId) {
                        dispatch(initProductDetailsPage(defaultVariantId));
                    }
                } else {
                    dispatch(loadProduct(productState));
                }
            }
        }
        return _promise2.default.resolve();
    };
};

var addItemToWishlist = exports.addItemToWishlist = function addItemToWishlist(productId, productURL) {
    return function (dispatch) {
        console.log('[Hybris Connector] Called addItemToWishlist stub with arguments:', productId, productURL);
        return _promise2.default.resolve();
    };
};