'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var parseImages = function parseImages(images, alt) {
    return {
        alt: alt,
        link: images[0].url
    };
};

var parseProductSearchProduct = function parseProductSearchProduct(_ref) {
    var code = _ref.code,
        name = _ref.name,
        url = _ref.url,
        images = _ref.images,
        price = _ref.price,
        _ref$stock = _ref.stock,
        stock = _ref$stock === undefined ? {} : _ref$stock;


    return {
        available: stock.stockLevelStatus === 'inStock',
        productId: code,
        productName: name,
        link: url,
        image: parseImages(images, name),
        price: price.value
    };
};

var parseSortOptions = exports.parseSortOptions = function parseSortOptions() {
    var sorts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    return sorts.map(function (_ref2) {
        var code = _ref2.code,
            name = _ref2.name;
        return {
            id: code,
            label: name
        };
    });
};

/**
 * Hybris product search result does contain property `selectedFilter`
 * The only way we can get it is from a property called `breadcrumbs`
 *
 * @example
 * "breadcrumbs" : [ {
      "facetCode" : "allCategories",
      "facetName" : "allCategories",
      "facetValueCode" : "220000",
      "facetValueName" : "220000",
      "removeQuery" : {
         "query" : {
            "value" : ":name-asc:swatchColors:BLUE"
         },
         "url" : "/search?q=%3Aname-asc%3AswatchColors%3ABLUE"
      },
      "truncateQuery" : {
         "query" : {
            "value" : ":name-asc:allCategories:220000"
         },
         "url" : "/search?q=%3Aname-asc%3AallCategories%3A220000"
      }
   }, {
      "facetCode" : "swatchColors",
      "facetName" : "Colour",
      "facetValueCode" : "BLUE",
      "facetValueName" : "Blue",
      "removeQuery" : {
         "query" : {
            "value" : ":name-asc:allCategories:220000"
         },
         "url" : "/search?q=%3Aname-asc%3AallCategories%3A220000"
      }
   } ]
 */
var parseProductSearchSelectedFilters = exports.parseProductSearchSelectedFilters = function parseProductSearchSelectedFilters() {
    var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var breadcrumbs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var selectedFilters = [];
    filters.forEach(function (filter) {
        filter.values.forEach(function (_ref3) {
            var selected = _ref3.selected,
                name = _ref3.name;

            if (selected) {
                breadcrumbs.forEach(function (_ref4) {
                    var facetCode = _ref4.facetCode,
                        facetName = _ref4.facetName,
                        facetValueName = _ref4.facetValueName,
                        facetValueCode = _ref4.facetValueCode;

                    if (facetValueName === name) {
                        selectedFilters.push({
                            label: facetValueName,
                            query: facetCode + '=' + facetValueCode,
                            ruleset: facetName
                        });
                    }
                });
            }
        });
    });
    return selectedFilters;
};

var parseFacets = exports.parseFacets = function parseFacets() {
    var facets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    return facets.map(function (_ref5) {
        var name = _ref5.name,
            values = _ref5.values;

        var ruleset = name.toLowerCase();
        var kinds = values.map(function (_ref6) {
            var count = _ref6.count,
                name = _ref6.name,
                query = _ref6.query,
                selected = _ref6.selected;

            var filterQuery = '';
            var queryValues = query.query.value.split(':');
            var queryValuesLength = queryValues.length;
            if (queryValuesLength) {
                filterQuery = encodeURIComponent('' + queryValues[queryValuesLength - 1]);
            }
            return {
                active: selected,
                count: count,
                label: name,
                query: filterQuery,
                searchKey: filterQuery,
                ruleset: ruleset
            };
        });
        return {
            label: name,
            ruleset: ruleset,
            kinds: kinds
        };
    });
};

var parseProductSearch = exports.parseProductSearch = function parseProductSearch(_ref7) {
    var _ref7$products = _ref7.products,
        products = _ref7$products === undefined ? [] : _ref7$products,
        sorts = _ref7.sorts,
        pagination = _ref7.pagination,
        currentQuery = _ref7.currentQuery,
        facets = _ref7.facets,
        breadcrumbs = _ref7.breadcrumbs;

    return {
        products: products.map(function (product) {
            return parseProductSearchProduct(product);
        }),
        query: currentQuery.query.value || '',
        count: pagination.pageSize,
        start: pagination.currentPage * pagination.pageSize,
        total: pagination.totalResults,
        filters: parseFacets(facets),
        selectedFilters: parseProductSearchSelectedFilters(facets, breadcrumbs),
        sortingOptions: parseSortOptions(sorts),
        selectedSortingOption: pagination.sort
    };
};