'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.searchProducts = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _jsonStableStringify = require('json-stable-stringify');

var _jsonStableStringify2 = _interopRequireDefault(_jsonStableStringify);

var _utils = require('../utils');

var _results = require('../../../integration-manager/api/product-search/results');

var _parsers = require('./parsers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var getSearchByCategoryEndPoint = function getSearchByCategoryEndPoint(_ref) {
    var count = _ref.count,
        start = _ref.start,
        _ref$sort = _ref.sort,
        sort = _ref$sort === undefined ? '' : _ref$sort,
        filters = _ref.filters;

    var filtersArray = [];
    (0, _keys2.default)(filters).filter(function (key) {
        return !['cgid', 'query'].includes(key);
    }).forEach(function (key) {
        if (filters[key]) {
            filtersArray.push(key + ':' + filters[key]);
        }
    });
    filtersArray.push('allCategories:' + filters.cgid);
    var queryString = 'query=:' + sort + ':' + filtersArray.join(':');
    return '/products/search/?pageSize=' + count + '&currentPage=' + start / count + '&fields=FULL&' + queryString;
};

/**
 * Calling this function with a given serachParameter object, will result in a product
 * search object being returned with all the products fitting the search criteria.
 * @param {Object} searchParams Search parameters
 * @param {Number} searchParams.count The number of products to return.
 * @param {Number} searchParams.start The position to start the above count.
 * @param {Array.<Object>} searchParams.sort The order in which to sort the products.
 * @param {Array.<Object>} searchParams.filters The filters in which to reduce the product result list based on product properties.
 * @param {String} searchParams.query The query used as reduce the product result list based on a keyword.
 * @param {Object} opts Optional properties to be sent down to the connector command.
 * @return {Promise} a {@link https://www.promisejs.org/|ProductSearch}, with an object containing data of type ProductSearch.
 */
var searchProducts = exports.searchProducts = function searchProducts(searchParams) {
    return function (dispatch) {
        var searchEndpoint = getSearchByCategoryEndPoint(searchParams);
        return (0, _utils.makeApiRequest)(searchEndpoint, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (responseJSON) {
            return (0, _parsers.parseProductSearch)(responseJSON);
        }).then(function (productSearch) {
            return dispatch((0, _results.receiveProductSearchData)((0, _defineProperty3.default)({}, (0, _jsonStableStringify2.default)(searchParams), productSearch)));
        });
    };
};