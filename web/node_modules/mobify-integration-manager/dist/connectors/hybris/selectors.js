'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRegisterUserEnhancementInitialValues = exports.getRegisterUserEnhancementTitleField = exports.getRegisterUserEnhancementFields = exports.getRegisterUserEnhancement = exports.getAccountEnhancements = exports.getEnhancements = exports.getFormInfoByKey = exports.getCardTypes = exports.getIntegrationManager = undefined;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reselect = require('reselect');

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getIntegrationManager = exports.getIntegrationManager = function getIntegrationManager(_ref) {
    var integrationManager = _ref.integrationManager;
    return integrationManager;
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var getCardTypes = exports.getCardTypes = (0, _reselectImmutableHelpers.createGetSelector)(getIntegrationManager, 'cardTypes', _immutable2.default.List());

// You'll sometimes get forms from the backend that require certain data in order to be submitted
// Rather than exposing that data to the front end,
// that data can be kept inside the integrationManager branch in the Redux Store
// This selector can be used to access that data
var getFormInfoByKey = exports.getFormInfoByKey = function getFormInfoByKey(formKey) {
    return (0, _reselectImmutableHelpers.createGetSelector)(getIntegrationManager, formKey);
};

// TODO: move enhancement selectors into SDK IM
var getEnhancements = exports.getEnhancements = (0, _reselectImmutableHelpers.createGetSelector)(getIntegrationManager, 'enhancements', _immutable2.default.Map());
var getAccountEnhancements = exports.getAccountEnhancements = (0, _reselectImmutableHelpers.createGetSelector)(getEnhancements, 'account', _immutable2.default.Map());
var getRegisterUserEnhancement = exports.getRegisterUserEnhancement = (0, _reselectImmutableHelpers.createGetSelector)(getAccountEnhancements, 'registerUser', _immutable2.default.Map());
var getRegisterUserEnhancementFields = exports.getRegisterUserEnhancementFields = (0, _reselectImmutableHelpers.createGetSelector)(getRegisterUserEnhancement, 'fields', _immutable2.default.List());
var getRegisterUserEnhancementTitleField = exports.getRegisterUserEnhancementTitleField = (0, _reselect.createSelector)(getRegisterUserEnhancementFields, function (fields) {
    return fields.find(function (field) {
        return field.get('name') === 'titleCode';
    });
});

var getRegisterUserEnhancementInitialValues = exports.getRegisterUserEnhancementInitialValues = (0, _reselect.createSelector)(getRegisterUserEnhancementFields, function (fields) {
    return fields.reduce(function (initialValues, field) {
        return initialValues.set(field.get('name'), field.get('initialValue'));
    }, _immutable2.default.Map());
});