'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchSavedShippingAddresses = exports.updateShippingAndBilling = exports.submitPayment = exports.submitShipping = exports.initCheckoutConfirmationPage = exports.initCheckoutPaymentPage = exports.initCheckoutShippingPage = exports.getSupportedCardTypes = exports.fetchShippingMethodsEstimate = exports.fetchCustomerShippingMethodsEstimate = exports.fetchGuestShippingMethodsEstimate = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _config = require('../config');

var _utils = require('../utils');

var _utils2 = require('../account/utils');

var _parsers = require('./parsers');

var _commands = require('../cart/commands');

var _selectors = require('../selectors');

var _actions = require('../actions');

var _results = require('../../../integration-manager/api/checkout/results');

var _results2 = require('../../../integration-manager/results');

var _cardUtils = require('progressive-web-sdk/dist/card-utils');

var _utils3 = require('../../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// let shippingPageInitiated = false

// const setCustomerCartShippingAddress = (addressId) => {
//     if (addressId) {
//         return makeApiRequest(`/users/${getUserType()}/carts/${getCartID()}/addresses/delivery`, {method: 'PUT'}, {addressId})
//             .then(parseResponse('Could not set customer cart shipping address'))
//     }
//     return Promise.reject()
// }

// const setGuestCartShippingAddress = (mobifyAddress) => (dispatch, getState) => {
//     const hybrisAddress = parseMobifyToHybrisAddress(mobifyAddress, getState)
//     return makeApiRequest(`/users/${getUserType()}/carts/${getCartID()}/addresses/delivery?fields=FULL`, {method: 'POST'}, {...hybrisAddress, defaultAddress: true})
//         .then(parseAddressResponse)
//         .then((hybrisAddress) => parseHybrisToMobifyAddress(hybrisAddress, getState))
// }

// const setGuestCartCustomerEmail = (email, forceUpdate = false) => (dispatch, getState) => {
//     const storedEmail = getEmailAddress(getState())
//     if (forceUpdate || getUserType() === USER_GUEST && email !== storedEmail) {
//         return makeApiRequest(`/users/${getUserType()}/carts/${getCartID()}/email`, {method: 'PUT'}, {email}, false)
//             .then(parseResponse('Could not set customer email'))
//             .then(() => {
//                 storeUserEmail(email)
//                 dispatch(receiveUserEmail(email))
//             })
//     }
//     return Promise.resolve()
// }

// const fetchShippingMethods = (savedShippingMethodId) => (dispatch, getState) => {
//     const {id: selectedShippingAddressId} = getShippingAddress(getState()).toJS()
//     if (selectedShippingAddressId) {
//         return makeApiRequest(`/users/${getUserType()}/carts/${getCartID()}/deliverymodes`, {method: 'GET'})
//             .then(parseResponse('Could not get shipping methods', true))
//             .then(({deliveryModes = []} = {}) => {
//                 if (deliveryModes.length) {
//                     const shippingMethods = parseShippingMethods(deliveryModes)
//                     const selectedShippingMethod = shippingMethods.find((shippingMethod) => shippingMethod.id === savedShippingMethodId)
//                     dispatch(receiveSelectedShippingMethod(selectedShippingMethod ? selectedShippingMethod.id : shippingMethods[0].id))
//                     return dispatch(receiveShippingMethods(shippingMethods))
//                 }
//                 dispatch(receiveSelectedShippingMethod(null))
//                 return dispatch(receiveShippingMethods([]))
//             })
//     }
//     dispatch(receiveSelectedShippingMethod(null))
//     return dispatch(receiveShippingMethods([]))
// }

// const selectAddressFromAddressBook = (mobifyAddress, savedShippingMethodId = '') => (dispatch, getState) => {
//     // Edge case: While loading page (initCheckoutShippingPage) user might have selected to add a new address
//     // before the cart address has being fetched. In this case, we ignore the result to avoid populating
//     // the 'Add new address' form with the cart address
//     const {savedAddress} = getShippingFormValues(getState())
//     if (savedAddress !== 'addNewAddressField') {
//         dispatch(receiveShippingAddress(mobifyAddress))
//         dispatch(setDefaultShippingAddressId(mobifyAddress.id))
//         dispatch(fetchShippingMethods(savedShippingMethodId))
//     }
// }

// import {getShippingAddress} from '../../../store/checkout/shipping/selectors'
// import {getEmailAddress, getShippingMethods} from '../../../store/checkout/selectors'
// import {getConfirmationData} from '../../../containers/checkout-confirmation/selectors'
// import {getShippingFormValues} from '../../../store/form/selectors'
var fetchGuestShippingMethodsEstimate = exports.fetchGuestShippingMethodsEstimate = _utils3.notImplementedCommand;
// export const fetchGuestShippingMethodsEstimate = (inputAddress) => (dispatch, getState) => {
//     const {username, shippingMethodId} = getShippingFormValues(getState())
//     return dispatch(setGuestCartCustomerEmail(username))
//         .then(() => dispatch(setGuestCartShippingAddress(inputAddress)))
//         .then((mobifyAddress) => {
//             dispatch(receiveShippingAddress(mobifyAddress))
//             return dispatch(fetchShippingMethods(shippingMethodId))
//         })
// }

// import {parseMobifyToHybrisAddress, parseHybrisToMobifyAddress} from './../account/parsers'
// import {getSavedAddresses, setCustomerShippingAddress} from '../account/commands'
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

// import {getPaymentURL, getConfirmationURL, CREDIT_CARD_TYPES} from '../config'
// import {SHIPPING_FORM_NAME} from '../../../constants/form/constants'
// import {deleteCartID, getCartID, getUserEmail, getUserType, makeApiRequest, parseResponse, storeUserEmail, USER_GUEST, USER_REGISTERED} from '../utils'
// import {getBillingAddressInitialValues, getShippingAddressInitialValues, parseAddressResponse, populateLocationsData} from '../account/utils'
var fetchCustomerShippingMethodsEstimate = exports.fetchCustomerShippingMethodsEstimate = _utils3.notImplementedCommand;
// export const fetchCustomerShippingMethodsEstimate = (inputAddress) => (dispatch, getState) => {
//     if (!inputAddress) {
//         const initialValues = getShippingAddressInitialValues(getState)
//         dispatch(receiveShippingAddress(initialValues))
//         return dispatch(populateLocationsData())
//     } else if (!inputAddress.id || inputAddress.savedAddress === 'addNewAddressField') {
//         return dispatch(setCustomerShippingAddress(inputAddress))
//             .then((mobifyAddress) => setCustomerCartShippingAddress(mobifyAddress.id).then(() => mobifyAddress))
//             .then((mobifyAddress) => {
//                 dispatch(receiveShippingAddress(mobifyAddress))
//                 return dispatch(fetchShippingMethods(mobifyAddress.shippingMethodId))
//             })
//     }
//     const {shippingMethodId} = getShippingFormValues(getState())
//     return setCustomerCartShippingAddress(inputAddress.id)
//         .then(() => dispatch(selectAddressFromAddressBook(inputAddress, shippingMethodId)))
// }

// const shouldUpdateShippingAddress = (inputAddress) => (dispatch, getState) => {
//     const previousAddress = getShippingAddress(getState()).toJS()
//     let shouldUpdate = false
//     for (const k of Object.keys(inputAddress)) {
//         if (previousAddress.hasOwnProperty(k) && k !== 'username' && inputAddress[k] !== previousAddress[k]) {
//             shouldUpdate = true
//         }
//     }
//     return shouldUpdate
// }

// const shouldFetchShippingMethods = ({
//     username,
//     name,
//     telephone,
//     addressLine1,
//     city,
//     postcode,
//     countryId,
//     regionId,
//     region,
//     id
// }) => {
//     if (username && name && telephone && addressLine1 && city && postcode && countryId && (regionId || region) || !!id) {
//         return true
//     }
//     return false
// }

var fetchShippingMethodsEstimate = exports.fetchShippingMethodsEstimate = _utils3.notImplementedCommand;

// export const fetchShippingMethodsEstimate = (inputAddress) => (dispatch, getState) => {
//     if (!inputAddress || !shouldFetchShippingMethods(inputAddress)) {
//         return Promise.resolve()
//     }

//     const shippingMethods = getShippingMethods(getState()).toJS()
//     const avoidUpdating = !dispatch(shouldUpdateShippingAddress(inputAddress)) && shippingMethods.length
//     if (!shippingPageInitiated || avoidUpdating) {
//         return Promise.resolve()
//     }
//     return getUserType() === USER_REGISTERED
//         ? dispatch(fetchCustomerShippingMethodsEstimate(inputAddress))
//         : dispatch(fetchGuestShippingMethodsEstimate(inputAddress))
// }

var getSupportedCardTypes = exports.getSupportedCardTypes = function getSupportedCardTypes() {
    return function (dispatch, getState) {
        var cardTypes = (0, _selectors.getCardTypes)(getState());
        if (!cardTypes.size) {
            return (0, _utils.makeApiRequest)('/cardtypes', { method: 'GET' }).then((0, _utils.parseResponse)('Could not get card types', true)).then(function (_ref) {
                var cardTypes = _ref.cardTypes;
                return dispatch((0, _actions.receiveCardTypes)(cardTypes));
            });
        }
        return _promise2.default.resolve();
    };
};

// const populateShippingForm = (shippingAddress, shippingMethod) => (dispatch) => {
//     const address = parseHybrisToMobifyAddress(shippingAddress)
//     dispatch(populateLocationsData())
//     dispatch(receiveShippingAddress(address))
//     dispatch(fetchShippingMethods(shippingMethod.code))
//     dispatch(receiveSelectedShippingMethod(shippingMethod ? shippingMethod.code : undefined))
// }

// const initShippingForm = () => (dispatch, getState) => {
//     return dispatch(populateLocationsData())
//         .then(() => {
//             const initialValues = getShippingAddressInitialValues(getState)
//             dispatch(receiveShippingAddress(initialValues))
//         })
// }

// const onEditShippingForm = () => (dispatch) => {
//     // Clear the delivery methods every time the form is edited or a different adddress is selected
//     const shippingForm = document.getElementById(SHIPPING_FORM_NAME)
//     shippingForm.addEventListener('keydown', (e) => {
//         if (e.target.tagName === 'INPUT' && e.target.type !== 'email') {
//             dispatch(receiveSelectedShippingMethod(null))
//             dispatch(receiveShippingMethods([]))
//         }
//     })
//     shippingForm.addEventListener('change', (e) => {
//         if (e.target.tagName === 'SELECT') {
//             dispatch(receiveSelectedShippingMethod(null))
//             dispatch(receiveShippingMethods([]))
//         } else if (e.target.name === 'savedAddress') {
//             dispatch(receiveSelectedShippingMethod(null))
//             dispatch(receiveShippingMethods([]))
//         }
//     })
//     shippingPageInitiated = true
//     return Promise.resolve()
// }

var initCheckoutShippingPage = exports.initCheckoutShippingPage = _utils3.notImplementedCommand;

// export const initCheckoutShippingPage = () => (dispatch) => {
//     shippingPageInitiated = false
//     return dispatch(getCart())
//         .then(({deliveryAddress: cartDeliveryAddress, deliveryMode: cartDeliveryMode = {}} = {}) => {
//             if (getUserType() === USER_REGISTERED) {
//                 return dispatch(getSavedAddresses())
//                     .then((addresses) => {
//                         if (cartDeliveryAddress) {
//                             const mobifyAddress = parseHybrisToMobifyAddress(cartDeliveryAddress)
//                             return dispatch(selectAddressFromAddressBook(mobifyAddress, cartDeliveryMode.code))
//                         } else if (!addresses || !addresses.length) {
//                             return dispatch(initShippingForm())
//                         } else {
//                             const preferredAddress = addresses.find((address) => address.preferred)
//                             if (preferredAddress && preferredAddress.id) {
//                                 return setCustomerCartShippingAddress(preferredAddress.id)
//                                     .then(() => dispatch(selectAddressFromAddressBook(preferredAddress, cartDeliveryMode.code)))
//                             } else {
//                                 return dispatch(initShippingForm())
//                             }
//                         }
//                     })
//             }
//             return cartDeliveryAddress
//                 ? dispatch(populateShippingForm(cartDeliveryAddress, cartDeliveryMode))
//                 : dispatch(initShippingForm())
//         })
//         .then(() => dispatch(onEditShippingForm()))
// }

var initCheckoutPaymentPage = exports.initCheckoutPaymentPage = _utils3.notImplementedCommand;

// export const initCheckoutPaymentPage = () => (dispatch, getState) => {
//     const selectedShippingAddress = getShippingAddress(getState()).toJS()
//     const {id: selectedShippingAddressId} = selectedShippingAddress

//     if (selectedShippingAddressId) {
//         return dispatch(populateLocationsData())
//             .then(() => {
//                 dispatch(receiveBillingSameAsShipping(true))
//                 dispatch(receiveBillingAddress(selectedShippingAddress))
//             })
//             .then(() => dispatch(getSupportedCardTypes()))
//     } else {
//         return dispatch(getCart())
//             .then(({deliveryAddress, deliveryMode = {}} = {}) => {
//                 if (deliveryAddress) {
//                     const mobifyAddress = parseHybrisToMobifyAddress(deliveryAddress)
//                     dispatch(receiveBillingSameAsShipping(true))
//                     dispatch(receiveShippingAddress(mobifyAddress))
//                     dispatch(receiveBillingAddress(mobifyAddress))
//                     dispatch(fetchShippingMethods(deliveryMode.code))
//                     return dispatch(receiveSelectedShippingMethod(deliveryMode.code ? deliveryMode.code.code : undefined))
//                 }
//                 return Promise.resolve()
//             })
//             .then(() => {
//                 dispatch(getSupportedCardTypes())
//                 return dispatch(populateLocationsData())
//             })
//     }
// }

var resetCheckoutForms = function resetCheckoutForms() {
    return function (dispatch, getState) {
        var shippingInitialValues = (0, _utils2.getShippingAddressInitialValues)(getState);
        var billingInitialValues = (0, _utils2.getBillingAddressInitialValues)(getState);
        dispatch((0, _results.receiveShippingAddress)(shippingInitialValues));
        dispatch((0, _results.receiveSelectedShippingMethod)(null));
        dispatch((0, _results.receiveShippingMethods)([]));
        dispatch((0, _results.receiveBillingAddress)(billingInitialValues));
        dispatch((0, _results.receiveBillingSameAsShipping)(true));
    };
};

var initCheckoutConfirmationPage = exports.initCheckoutConfirmationPage = _utils3.notImplementedCommand;

// export const initCheckoutConfirmationPage = () => (dispatch, getState) => {
//     // Reset checkout values stored in redux store
//     const orderConfirmationData = getConfirmationData(getState()).toJS()
//     if (orderConfirmationData && orderConfirmationData.guid) {
//         dispatch(resetCheckoutForms())
//     }
//     return Promise.resolve()
// }

// const setShippingMethod = (deliveryModeId) => (dispatch) => {
//     if (deliveryModeId) {
//         return makeApiRequest(`/users/${getUserType()}/carts/${getCartID()}/deliverymode`, {method: 'PUT'}, {deliveryModeId})
//             .then(parseResponse('Could not set shipping method'))
//             .then(() => {
//                 dispatch(receiveSelectedShippingMethod(deliveryModeId))
//                 return getPaymentURL()
//             })
//     }
//     throw new Error('No shipping method available')
// }

var submitShipping = exports.submitShipping = _utils3.notImplementedCommand;

// export const submitShipping = (formValues) => (dispatch, getState) => {
//     const {username: currentUsername} = getShippingFormValues(getState())
//     const storedUsername = getUserEmail()
//     const mustUpdateUsername = currentUsername !== storedUsername
//     if (mustUpdateUsername || dispatch(shouldUpdateShippingAddress(formValues))) {
//         return dispatch(setGuestCartCustomerEmail(currentUsername, true))
//             .then(() => dispatch(setGuestCartShippingAddress(formValues)))
//             .then(() => dispatch(setShippingMethod(formValues.shippingMethodId)))
//             .catch(() => {
//                 throw new Error({_error: 'Unable to save shipping data'})
//             })
//     } else {
//         return dispatch(setShippingMethod(formValues.shippingMethodId))
//             .catch(() => {
//                 throw new Error({_error: 'Unable to save shipping data'})
//             })
//     }
// }

var setPaymentDetails = function setPaymentDetails(formValues) {
    var paymentDetails = (0, _parsers.parseMobifyToHybrisPaymentDetails)(formValues);
    return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/paymentdetails', { method: 'POST' }, paymentDetails).then((0, _utils.parseResponse)('Unable to set payment details'));
};

var placeOrder = function placeOrder(cvv) {
    return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/orders?fields=FULL', { method: 'POST' }, { cartId: (0, _utils.getCartID)(), securityCode: cvv }).then((0, _utils.parseResponse)('Unable to place order', true));
};

var submitPayment = exports.submitPayment = function submitPayment(formValues) {
    return function (dispatch) {
        var type = (0, _cardUtils.getCardData)(formValues.ccnumber).cardType;

        if (!_config.CREDIT_CARD_TYPES[type]) {
            throw new Error({ _error: 'Unsupported card type' });
        }

        return setPaymentDetails(formValues).then(function () {
            return placeOrder(formValues.cvv);
        }).then(function () {
            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                code = _ref2.code,
                guid = _ref2.guid,
                _ref2$user = _ref2.user,
                user = _ref2$user === undefined ? {} : _ref2$user;

            var login = user.uid.split('|')[1];
            dispatch((0, _results2.receiveOrderConfirmationContents)({
                email: login,
                guid: guid,
                orderNumber: code
            }));
            dispatch(resetCheckoutForms());
            (0, _utils.deleteCartID)();
            dispatch((0, _commands.getCart)());
            return (0, _config.getConfirmationURL)();
        }).catch(function () {
            throw new Error({ _error: 'Unable to save payment data' });
        });
    };
};

var updateShippingAndBilling = exports.updateShippingAndBilling = function updateShippingAndBilling() {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called updateShippingAndBilling stub');
        return _promise2.default.resolve();
    };
};

var fetchSavedShippingAddresses = exports.fetchSavedShippingAddresses = function fetchSavedShippingAddresses() {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        console.log('[Hybris Connector] Called fetchSavedShippingAddresses stub');
        return _promise2.default.resolve();
    };
};