'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getQueryStringValue = exports.extractLastPartOfURL = exports.makeUnAuthenticatedApiRequest = exports.makeApiRequest = exports.initHybrisAuth = exports.parseResponse = exports.storeAuthTokenAndExpiration = exports.deleteSession = exports.isUserLoggedIn = exports.storeCartID = exports.getCartID = exports.deleteCartID = exports.calculateCartID = exports.storeUserEmail = exports.getUserEmail = exports.deleteUserEmail = exports.storeUserType = exports.getUserType = exports.deleteUserType = exports.deleteForceLogout = exports.getForceLogout = exports.setForceLogout = exports.deleteExpiresAt = exports.isAuthTokenExpired = exports.getExpiresAt = exports.storeExpiresAt = exports.deleteAuthToken = exports.getAuthToken = exports.storeAuthToken = exports.USER_GUEST = exports.USER_REGISTERED = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _fetchUtils = require('progressive-web-sdk/dist/utils/fetch-utils');

var _routing = require('progressive-web-sdk/dist/routing');

var _storage = require('../../utils/storage');

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var AUTH_KEY_NAME = 'mob-auth';
var EXPIRES_KEY_NAME = 'mob-expires';
var CART_KEY_NAME = 'mob-cart';
var USER_KEY_NAME = 'mob-user';
var USER_EMAIL_KEY_NAME = 'mob-user-email';
var FORCE_LOGOUT_KEY_NAME = 'mob-force-logout';
var USER_REGISTERED = exports.USER_REGISTERED = 'current';
var USER_GUEST = exports.USER_GUEST = 'anonymous';

var storeAuthToken = exports.storeAuthToken = function storeAuthToken(authorization) {
    if (authorization) {
        (0, _storage.getStorage)().set(AUTH_KEY_NAME, authorization);
    }
};

var getAuthToken = exports.getAuthToken = function getAuthToken() {
    return (0, _storage.getStorage)().get(AUTH_KEY_NAME);
};

var deleteAuthToken = exports.deleteAuthToken = function deleteAuthToken() {
    (0, _storage.getStorage)().remove(AUTH_KEY_NAME);
};

var storeExpiresAt = exports.storeExpiresAt = function storeExpiresAt(expiresAt) {
    if (expiresAt) {
        (0, _storage.getStorage)().set(EXPIRES_KEY_NAME, expiresAt);
    }
};

var getExpiresAt = exports.getExpiresAt = function getExpiresAt() {
    return (0, _storage.getStorage)().get(EXPIRES_KEY_NAME);
};

var isAuthTokenExpired = exports.isAuthTokenExpired = function isAuthTokenExpired() {
    // Get current Unix time in seconds (not milliseconds)
    var currentTime = Math.floor(Date.now() / 1000);
    return currentTime > getExpiresAt();
};

var deleteExpiresAt = exports.deleteExpiresAt = function deleteExpiresAt() {
    (0, _storage.getStorage)().remove(EXPIRES_KEY_NAME);
};

var setForceLogout = exports.setForceLogout = function setForceLogout() {
    (0, _storage.getStorage)().set(FORCE_LOGOUT_KEY_NAME, true);
};

var getForceLogout = exports.getForceLogout = function getForceLogout() {
    return !!(0, _storage.getStorage)().get(FORCE_LOGOUT_KEY_NAME);
};

var deleteForceLogout = exports.deleteForceLogout = function deleteForceLogout() {
    (0, _storage.getStorage)().remove(FORCE_LOGOUT_KEY_NAME);
};

var deleteUserType = exports.deleteUserType = function deleteUserType() {
    (0, _storage.getStorage)().remove(USER_KEY_NAME);
};

var getUserType = exports.getUserType = function getUserType() {
    return (0, _storage.getStorage)().get(USER_KEY_NAME) || USER_GUEST;
};

var storeUserType = exports.storeUserType = function storeUserType(userType) {
    if (userType === undefined) {
        throw new Error('Storing userType that is undefined!!');
    }

    (0, _storage.getStorage)().set(USER_KEY_NAME, userType);
};

var deleteUserEmail = exports.deleteUserEmail = function deleteUserEmail() {
    (0, _storage.getStorage)().remove(USER_EMAIL_KEY_NAME);
};

var getUserEmail = exports.getUserEmail = function getUserEmail() {
    return (0, _storage.getStorage)().get(USER_EMAIL_KEY_NAME);
};

var storeUserEmail = exports.storeUserEmail = function storeUserEmail(email) {
    if (email === undefined) {
        throw new Error('Storing user email that is undefined!!');
    }
    (0, _storage.getStorage)().set(USER_EMAIL_KEY_NAME, email);
};

var calculateCartID = exports.calculateCartID = function calculateCartID(cart) {
    return getUserType() === USER_REGISTERED ? cart.code : cart.guid;
};

var deleteCartID = exports.deleteCartID = function deleteCartID() {
    (0, _storage.getStorage)().remove(CART_KEY_NAME);
};

var getCartID = exports.getCartID = function getCartID() {
    return (0, _storage.getStorage)().get(CART_KEY_NAME);
};

var storeCartID = exports.storeCartID = function storeCartID(cartID) {
    if (cartID === undefined) {
        throw new Error('Storing cartID that is undefined!!');
    }

    (0, _storage.getStorage)().set(CART_KEY_NAME, cartID);
};

var refreshToken = void 0;
var storeRefreshToken = function storeRefreshToken(token) {
    refreshToken = token;
};
var deleteRefreshToken = function deleteRefreshToken() {
    refreshToken = '';
};

var isUserLoggedIn = exports.isUserLoggedIn = function isUserLoggedIn() {
    return getUserType() === USER_REGISTERED;
};

var deleteSession = exports.deleteSession = function deleteSession() {
    deleteAuthToken();
    deleteExpiresAt();
    deleteCartID();
    deleteUserType();
    deleteUserEmail();
    deleteRefreshToken();
    deleteForceLogout();
};

var storeAuthTokenAndExpiration = exports.storeAuthTokenAndExpiration = function storeAuthTokenAndExpiration(data) {
    var authorization = 'Bearer ' + data.access_token;
    storeAuthToken(authorization);
    var currentTime = Math.floor(Date.now() / 1000);
    var expiresAt = currentTime + data.expires_in;
    storeExpiresAt(expiresAt);
    storeRefreshToken(data.refresh_token);
};

var forceLogoutAndRedirectToLogin = function forceLogoutAndRedirectToLogin() {
    setForceLogout();
    return _routing.browserHistory.push((0, _config.getSignInURL)());
};

var parseResponse = exports.parseResponse = function parseResponse(msg) {
    var toJson = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return function (response) {
        var err = new Error(msg + ': ' + response.statusText);

        if (response.status < 200 || response.status > 299) {
            throw err;
        }

        return toJson ? response.json().catch(function () {
            throw err;
        }) : response;
    };
};

// Authorization services API: https://devportal.yaas.io/services/oauth2/latest/

var fetchAuthToken = function fetchAuthToken() {
    // There's no token, get a new one
    var body = {
        client_id: _config.AUTH.ANONYMOUS.CLIENT_ID,
        grant_type: 'client_credentials',
        client_secret: _config.AUTH.ANONYMOUS.CLIENT_SECRET
    };
    return (0, _fetchUtils.makeFormEncodedRequest)((0, _config.getAuthEndPoint)(), body, { method: 'POST' }).then(parseResponse('Could not get anonymous token', true)).then(function (json) {
        storeAuthTokenAndExpiration(json);
        storeUserType(USER_GUEST);
        return (0, _extends3.default)({}, (0, _config.getRequestHeaders)(), {
            Authorization: getAuthToken()
        });
    });
};

var refreshAuthToken = function refreshAuthToken() {
    var body = {
        client_id: _config.AUTH.CUSTOMER.CLIENT_ID,
        grant_type: 'refresh_token',
        client_secret: _config.AUTH.CUSTOMER.CLIENT_SECRET,
        refresh_token: refreshToken
    };
    return (0, _fetchUtils.makeFormEncodedRequest)((0, _config.getAuthEndPoint)(), body, { method: 'POST' }).then(parseResponse(('Could not get token', true))).then(function (json) {
        if (json.error) {
            // The server did not accept the token, redirect to Sign In
            // (initLoginData command will remove session data and do a logout)
            forceLogoutAndRedirectToLogin();
            return _promise2.default.reject();
        }

        storeAuthTokenAndExpiration(json);
        return (0, _extends3.default)({}, (0, _config.getRequestHeaders)(), {
            Authorization: getAuthToken()
        });
    }).catch(function (e) {
        if (e instanceof TypeError) {
            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful
            throw new Error('Error connecting to server.');
        }

        // The server did not accept the token, redirect to Sign In
        // (initLoginData command will remove session data and do a logout)
        forceLogoutAndRedirectToLogin();
        return _promise2.default.reject();
    });
};

var initHybrisAuth = exports.initHybrisAuth = function initHybrisAuth() {
    if (!getAuthToken()) {
        return fetchAuthToken();
    }

    if (!isAuthTokenExpired()) {
        // The token is still valid
        return _promise2.default.resolve((0, _extends3.default)({}, (0, _config.getRequestHeaders)(), {
            Authorization: getAuthToken()
        }));
    }

    // The token has expired, get new token
    if (!isUserLoggedIn()) {
        // User is anonymous, delete token and start from scratch
        deleteAuthToken();
        return initHybrisAuth();
    }

    if (!refreshToken) {
        // User is logged in but there's no refresh token, redirect to Sign In
        // (initLoginData command will remove session data and do a logout)
        forceLogoutAndRedirectToLogin();
        return _promise2.default.reject();
    }

    return refreshAuthToken();
};

var makeApiRequest = exports.makeApiRequest = function makeApiRequest(path, options, body) {
    var logoutOnUnauthorized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    return initHybrisAuth().then(function (headers) {
        var requestOptions = (0, _extends3.default)({}, options, {
            headers: headers
        });
        var reqFunc = body ? (0, _fetchUtils.makeFormEncodedRequest)((0, _config.getApiEndPoint)() + path, body, requestOptions) : (0, _fetchUtils.makeRequest)((0, _config.getApiEndPoint)() + path, requestOptions);
        return reqFunc.catch(function () {
            // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful
            throw new Error('Error connecting to server.');
        }).then(function (response) {
            // Edge case. The token is not expired but no longer valid
            // Could have been deleted from the server. Redirect to Sign In
            // (initLoginData command will remove session data and do a logout)
            if (response.status === 401 && logoutOnUnauthorized) {
                forceLogoutAndRedirectToLogin();
                return _promise2.default.reject();
            }
            return response;
        });
    });
};

var makeUnAuthenticatedApiRequest = exports.makeUnAuthenticatedApiRequest = function makeUnAuthenticatedApiRequest(path, options) {
    var requestOptions = (0, _extends3.default)({}, options, {
        headers: (0, _config.getRequestHeaders)()
    });
    return (0, _fetchUtils.makeRequest)((0, _config.getApiEndPoint)() + path, requestOptions);
};

var extractLastPartOfURL = exports.extractLastPartOfURL = function extractLastPartOfURL(url) {
    if (!url) {
        return '';
    }

    var splitURL = url.split('/');
    var lastPartUrl = splitURL[splitURL.length - 1];
    var queryStringIndex = lastPartUrl.indexOf('?');

    // Check if there is a query string in URL
    if (queryStringIndex === -1) {
        return lastPartUrl;
    } else {
        return lastPartUrl.substring(0, queryStringIndex);
    }
};

var getQueryStringValue = exports.getQueryStringValue = function getQueryStringValue(key) {
    return decodeURIComponent(window.location.search.replace(new RegExp('^(?:.*[&\\?]' + encodeURIComponent(key).replace(/[.+*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'), '$1'));
};