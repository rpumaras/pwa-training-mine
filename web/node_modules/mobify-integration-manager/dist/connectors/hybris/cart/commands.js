'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deletePromoCode = exports.putPromoCode = exports.addToWishlist = exports.fetchTaxEstimate = exports.updateItemQuantity = exports.removeFromCart = exports.addToCart = exports.getCart = exports.initCartPage = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('../utils');

var _utils2 = require('./utils');

var _utils3 = require('../account/utils');

var _constants = require('../../../constants/cart/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-disable no-unused-vars */

var initCartPage = exports.initCartPage = function initCartPage(url, routeName) {
    return function (dispatch) {
        return dispatch((0, _utils3.populateLocationsData)());
    };
};

var getCart = exports.getCart = function getCart() {
    return function (dispatch) {
        return (0, _utils2.fetchCart)().then(function (cart) {
            dispatch((0, _utils2.handleCartData)(cart));
            return cart;
        });
    };
};

var addToCart = exports.addToCart = function addToCart(code, qty) {
    return function (dispatch) {
        return dispatch(getCart()).then(function (cart) {
            return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/entries', { method: 'POST' }, { code: code, qty: qty });
        }).then((0, _utils.parseResponse)('Unable to add item to cart', true)).then(function (response) {
            var quantityAdded = response.quantityAdded,
                statusCode = response.statusCode;

            if (quantityAdded === 0) {
                throw new Error('Unable to add item to cart due to ' + statusCode);
            }
        }).then(function () {
            return dispatch(getCart());
        });
    };
};

var removeFromCart = exports.removeFromCart = function removeFromCart(entryNumber) {
    return function (dispatch) {
        return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/entries/' + entryNumber, { method: 'DELETE' }).then((0, _utils.parseResponse)('Unable to delete item from cart')).then(function () {
            return dispatch(getCart());
        });
    };
};

var updateItemQuantity = exports.updateItemQuantity = function updateItemQuantity(entryNumber, qty) {
    return function (dispatch) {
        return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/entries/' + entryNumber, { method: 'PUT' }, { qty: qty }).then((0, _utils.parseResponse)('Unable to update item quantity', true)).then(function (response) {
            var quantityAdded = response.quantityAdded,
                statusCode = response.statusCode;

            if (quantityAdded === 0) {
                throw new Error('Unable to update item quantity due to ' + statusCode);
            }
        }).then(function () {
            return dispatch(getCart());
        });
    };
};

var fetchTaxEstimate = exports.fetchTaxEstimate = function fetchTaxEstimate(address, shippingMethod) {
    return function (dispatch) {
        // Not implemented on Hybris
        return _promise2.default.resolve();
    };
};

var addToWishlist = exports.addToWishlist = function addToWishlist() {
    return _promise2.default.reject('Method not implemented');
};

var putPromoCode = exports.putPromoCode = function putPromoCode(couponCode) {
    return function (dispatch) {
        if (couponCode) {
            return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/vouchers', { method: 'POST' }, { voucherId: couponCode }).then((0, _utils.parseResponse)(_constants.PROMO_ERROR + ', code is invalid')).then(function () {
                return dispatch((0, _utils2.getCartTotals)());
            });
        } else {
            return _promise2.default.resolve();
        }
    };
};

var deletePromoCode = exports.deletePromoCode = function deletePromoCode(couponCode) {
    return function (dispatch) {
        return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '/vouchers/' + couponCode, { method: 'DELETE' }).then((0, _utils.parseResponse)('Failed to remove promo code')).then(function () {
            return dispatch((0, _utils2.getCartTotals)());
        });
    };
};