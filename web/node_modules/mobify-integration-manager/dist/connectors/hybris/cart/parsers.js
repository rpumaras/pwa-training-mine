'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseCartContents = exports.parseCartProducts = undefined;

var _config = require('../config');

var _parsers = require('../parsers');

var _parserUtils = require('../../../utils/parser-utils');

var parseCartProducts = exports.parseCartProducts = function parseCartProducts(_ref) {
    var _ref$entries = _ref.entries,
        entries = _ref$entries === undefined ? [] : _ref$entries;
    return entries.reduce(function (acc, entry) {
        var _entry$basePrice = entry.basePrice;
        _entry$basePrice = _entry$basePrice === undefined ? {} : _entry$basePrice;
        var price = _entry$basePrice.formattedValue,
            _entry$product = entry.product,
            id = _entry$product.code,
            images = _entry$product.images,
            title = _entry$product.name;


        acc[id] = {
            available: true,
            full: false,
            href: (0, _config.getProductPath)(id),
            id: id,
            price: (0, _parserUtils.parsePrice)(price),
            title: title
        };

        var thumbnail = (0, _parsers.parseThumbnail)(images.find(function (image) {
            return image.imageType === _config.IMAGE_TYPES.PRIMARY && image.format === _config.IMAGE_SIZES.THUMBNAIL;
        }), name);

        if (thumbnail) {
            acc[id].thumbnail = thumbnail;
        }

        return acc;
    }, {});
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var parseCartContents = exports.parseCartContents = function parseCartContents(cart) {
    var _cart$appliedVouchers = cart.appliedVouchers,
        appliedVouchers = _cart$appliedVouchers === undefined ? [] : _cart$appliedVouchers,
        _cart$entries = cart.entries,
        entries = _cart$entries === undefined ? [] : _cart$entries,
        _cart$subTotal = cart.subTotal;
    _cart$subTotal = _cart$subTotal === undefined ? {} : _cart$subTotal;
    var _cart$subTotal$format = _cart$subTotal.formattedValue,
        subtotal = _cart$subTotal$format === undefined ? '' : _cart$subTotal$format,
        _cart$orderDiscounts = cart.orderDiscounts;
    _cart$orderDiscounts = _cart$orderDiscounts === undefined ? {} : _cart$orderDiscounts;
    var _cart$orderDiscounts$ = _cart$orderDiscounts.formattedValue,
        discount = _cart$orderDiscounts$ === undefined ? '' : _cart$orderDiscounts$,
        _cart$totalPriceWithT = cart.totalPriceWithTax;
    _cart$totalPriceWithT = _cart$totalPriceWithT === undefined ? {} : _cart$totalPriceWithT;
    var _cart$totalPriceWithT2 = _cart$totalPriceWithT.formattedValue,
        orderTotal = _cart$totalPriceWithT2 === undefined ? '' : _cart$totalPriceWithT2,
        _cart$totalTax = cart.totalTax;
    _cart$totalTax = _cart$totalTax === undefined ? {} : _cart$totalTax;
    var _cart$totalTax$format = _cart$totalTax.formattedValue,
        taxes = _cart$totalTax$format === undefined ? '' : _cart$totalTax$format,
        _cart$totalTax$value = _cart$totalTax.value,
        hasTaxes = _cart$totalTax$value === undefined ? false : _cart$totalTax$value;

    var items = entries.map(function (entry) {
        var _entry$basePrice2 = entry.basePrice;
        _entry$basePrice2 = _entry$basePrice2 === undefined ? {} : _entry$basePrice2;
        var itemPrice = _entry$basePrice2.formattedValue,
            id = entry.entryNumber,
            productId = entry.product.code,
            quantity = entry.quantity,
            _entry$totalPrice = entry.totalPrice;
        _entry$totalPrice = _entry$totalPrice === undefined ? {} : _entry$totalPrice;
        var linePrice = _entry$totalPrice.formattedValue;

        return {
            id: id.toString(),
            href: (0, _config.getProductPath)(productId),
            itemPrice: (0, _parserUtils.parsePrice)(itemPrice),
            linePrice: (0, _parserUtils.parsePrice)(linePrice),
            productId: productId,
            quantity: quantity
        };
    });

    var cartContents = {
        items: items,
        orderTotal: (0, _parserUtils.parsePrice)(orderTotal),
        subtotal: (0, _parserUtils.parsePrice)(subtotal),
        discount: (0, _parserUtils.parsePrice)(discount)
    };

    if (appliedVouchers.length) {
        cartContents.coupons = appliedVouchers.map(function (voucher) {
            return {
                couponCode: voucher.code,
                text: voucher.voucherCode,
                amount: '', // Hybris OCC API does not return individual coupon amounts
                id: voucher.code
            };
        });
    }
    if (hasTaxes) {
        cartContents.taxes = taxes;
    }
    return cartContents;
};