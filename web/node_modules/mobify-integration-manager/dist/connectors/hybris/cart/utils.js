'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCartTotals = exports.handleCartData = exports.fetchCart = exports.fetchCartItemData = exports.mergeCart = exports.createCart = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _parserUtils = require('../../../utils/parser-utils');

var _utils = require('../utils');

var _selectors = require('progressive-web-sdk/dist/store/cart/selectors');

var _selectors2 = require('progressive-web-sdk/dist/store/products/selectors');

var _results = require('../../../integration-manager/api/products/results');

var _results2 = require('../../../integration-manager/api/cart/results');

var _config = require('../config');

var _parsers = require('./parsers');

var _parsers2 = require('../parsers');

var _commands = require('./commands');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var makeCartRequest = function makeCartRequest() {
    return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts/' + (0, _utils.getCartID)() + '?fields=FULL', { method: 'GET' }).then(function (response) {
        if (response.status === 404) {
            (0, _utils.deleteCartID)();
            throw new Error('Cart not found');
        }
        return response;
    }).then((0, _utils.parseResponse)('Could not get user cart', true));
};

var createCart = exports.createCart = function createCart() {
    var oldCartId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _utils.getCartID)();

    // if there's an previous cart on session, we merge it
    var body = oldCartId ? { oldCartId: oldCartId } : {};
    return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts', { method: 'POST' }, body).then((0, _utils.parseResponse)('Could not create user cart', true)).then(function (cart) {
        (0, _utils.storeCartID)((0, _utils.calculateCartID)(cart));
        return makeCartRequest();
    }).catch(function (e) {
        if ((0, _utils.getCartID)()) {
            (0, _utils.deleteCartID)();
            return createCart();
        }
        return e;
    });
};

var mergeCart = exports.mergeCart = function mergeCart(toMergeCart, oldCartId) {
    var body = {
        toMergeCartGuid: toMergeCart.guid,
        oldCartId: oldCartId
    };
    return (0, _utils.makeApiRequest)('/users/' + (0, _utils.getUserType)() + '/carts', { method: 'POST' }, body).then((0, _utils.parseResponse)('Could not merge carts', true)).then(function (cart) {
        (0, _utils.storeCartID)((0, _utils.calculateCartID)(cart));
        return makeCartRequest();
    }).catch(function () {
        (0, _utils.storeCartID)((0, _utils.calculateCartID)(toMergeCart));
        return makeCartRequest();
    });
};

var fetchCartItemData = exports.fetchCartItemData = function fetchCartItemData() {
    return function (dispatch, getState) {
        var currentState = getState();
        var items = (0, _selectors.getCartItems)(currentState).toJS();
        var updatedProducts = {};
        var updatedCartItems = [];
        return _promise2.default.all(items.map(function (cartItem) {
            var productId = cartItem.productId;
            var productState = (0, _selectors2.getProductById)(productId)(currentState).toJS();
            var productIsCompleteAction = function productIsCompleteAction() {
                updatedProducts[productId] = productState;
                updatedCartItems.push((0, _extends3.default)({}, cartItem, {
                    thumbnail: productState.thumbnail,
                    title: productState.title
                }));
                return _promise2.default.resolve();
            };
            var productIsNotCompleteAction = function productIsNotCompleteAction() {
                var productEndpoint = (0, _config.getProductEndPoint)(productId);
                return (0, _utils.makeApiRequest)(productEndpoint, { method: 'GET' }).then((0, _utils.parseResponse)('Unable to retrieve product', true)).then(function (response) {
                    var parsedProduct = (0, _extends3.default)({}, (0, _parsers2.parseProductDetails)(response, true));
                    updatedProducts[productId] = parsedProduct;
                    updatedCartItems.push((0, _extends3.default)({}, cartItem, {
                        thumbnail: parsedProduct.thumbnail,
                        title: parsedProduct.title
                    }));
                });
            };
            return productState.full ? productIsCompleteAction() : productIsNotCompleteAction();
        })).then(function () {
            dispatch((0, _results.receiveCartProductData)(updatedProducts));
            dispatch((0, _results2.receiveCartItems)(updatedCartItems));
        });
    };
};

var requestCart = function requestCart() {
    return makeCartRequest().catch(function () {
        return createCart();
    });
};

var fetchCart = exports.fetchCart = function fetchCart() {
    return (0, _utils.getCartID)() ? requestCart() : createCart();
};

var handleCartData = exports.handleCartData = function handleCartData(cart) {
    return function (dispatch) {
        // Note: These need to be dispatched in this order, otherwise there's
        //       a chance we could try to render cart items and not have product
        //       data in the store for it.
        dispatch((0, _results.receiveCartProductData)((0, _parsers.parseCartProducts)(cart)));
        dispatch((0, _results2.receiveCartContents)((0, _parsers.parseCartContents)(cart)));

        return dispatch(fetchCartItemData());
    };
};

var getCartTotals = exports.getCartTotals = function getCartTotals() {
    return function (dispatch) {
        return dispatch((0, _commands.getCart)()).then(function (cart) {
            var shipping = { amount: '' };
            var _cart$subTotal = cart.subTotal;
            _cart$subTotal = _cart$subTotal === undefined ? {} : _cart$subTotal;
            var _cart$subTotal$format = _cart$subTotal.formattedValue,
                subtotal = _cart$subTotal$format === undefined ? '' : _cart$subTotal$format,
                _cart$orderDiscounts = cart.orderDiscounts;
            _cart$orderDiscounts = _cart$orderDiscounts === undefined ? {} : _cart$orderDiscounts;
            var _cart$orderDiscounts$ = _cart$orderDiscounts.formattedValue,
                discount = _cart$orderDiscounts$ === undefined ? '' : _cart$orderDiscounts$,
                _cart$totalPriceWithT = cart.totalPriceWithTax;
            _cart$totalPriceWithT = _cart$totalPriceWithT === undefined ? {} : _cart$totalPriceWithT;
            var _cart$totalPriceWithT2 = _cart$totalPriceWithT.formattedValue,
                orderTotal = _cart$totalPriceWithT2 === undefined ? '' : _cart$totalPriceWithT2,
                _cart$totalTax = cart.totalTax;
            _cart$totalTax = _cart$totalTax === undefined ? {} : _cart$totalTax;
            var _cart$totalTax$format = _cart$totalTax.formattedValue,
                taxes = _cart$totalTax$format === undefined ? '' : _cart$totalTax$format;


            return dispatch((0, _results2.receiveCartTotals)(shipping, (0, _parserUtils.parsePrice)(discount), (0, _parserUtils.parsePrice)(subtotal), (0, _parserUtils.parsePrice)(taxes), (0, _parserUtils.parsePrice)(orderTotal)));
        });
    };
};