'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONFIRMATION_CONTENT_ID = exports.CHECKOUT_SHIPPING_CONTENT_ID = exports.CHECKOUT_PAYMENT_CONTENT_ID = exports.CHECKOUT_CONFIRMATION_CONTENT_ID = exports.CART_CONTENT_ID = exports.getShouldBridgeDesktopSession = exports.buildSearchURL = exports.getAccountOrderListURL = exports.getAccountInfoURL = exports.getAccountAddressURL = exports.getConfirmationURL = exports.getPaymentURL = exports.getWishlistURL = exports.getCartURL = exports.getCheckoutShippingURL = exports.getSignOutURL = exports.getDashboardURL = exports.getSignInURL = exports.getHomeURL = exports.getCategoryPath = exports.getRequestHeaders = exports.getApiEndPoint = exports.getSitePath = exports.getSiteBaseURL = exports.getSiteID = exports.registerConfig = exports.DefaultConfig = exports.SEARCH_URL = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _immutable = require('immutable');

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var API_TYPE = 'shop';
var API_VERSION = 'v17_4';

var SEARCH_URL = exports.SEARCH_URL = '/catalogsearch/result/';

var config = {};

/**
 * Defines the default configuration for this connector.
 * This object is used as the base configuration and can
 * be overridden by calling `registerConfig()` with an
 * object that has matching keys (only overridden keys
 * need to be supplied though).
 * *Note*: this is an Immutable.js object
 */
var DefaultConfig = exports.DefaultConfig = (0, _immutable.fromJS)({
  /**
   * The Salesforce Commerce Cloud Client ID
   */
  clientID: '',
  /**
   * The ID of the Site to connect to
   */
  siteID: '',
  /**
   * Feature flags that control the behaviour of the connector
   */
  features: {
    /**
     * By default we always want to bridge the desktop session.
     * In non-browser contexts (AMP, for example) we may want to turn this
     * feature off and use an unbridged ('guest' session).
     */
    shouldBridgeDesktopSession: true
  }
});

var registerConfig = exports.registerConfig = function registerConfig(cfg) {
  config = (0, _extends3.default)({}, DefaultConfig.toJS(), cfg);
};

var getSiteID = exports.getSiteID = function getSiteID() {
  return config.siteID;
};
var getSiteBaseURL = exports.getSiteBaseURL = function getSiteBaseURL() {
  return config.siteBaseURL ? config.siteBaseURL : '';
};
var getSitePath = exports.getSitePath = function getSitePath() {
  return '/s/' + getSiteID();
};

var getApiEndPoint = exports.getApiEndPoint = function getApiEndPoint() {
  return '' + getSiteBaseURL() + getSitePath() + '/dw/' + API_TYPE + '/' + API_VERSION;
};

var getRequestHeaders = exports.getRequestHeaders = function getRequestHeaders() {
  return {
    'Content-Type': 'application/json',
    'x-dw-client-id': config.clientID
  };
};

var getCategoryPath = exports.getCategoryPath = function getCategoryPath(id) {
  return getSitePath() + '/' + id;
};

var getBaseURL = function getBaseURL() {
  return getSiteBaseURL() + '/on/demandware.store/Sites-' + getSiteID() + '-Site/default/';
};

var getHomeURL = exports.getHomeURL = function getHomeURL() {
  return getBaseURL() + 'Home-Show';
};
var getSignInURL = exports.getSignInURL = function getSignInURL() {
  return getBaseURL() + 'Account-Show';
};
var getDashboardURL = exports.getDashboardURL = function getDashboardURL() {
  return getBaseURL() + 'Account-Show/dashboard';
};
var getSignOutURL = exports.getSignOutURL = function getSignOutURL() {
  return getBaseURL() + 'Logout-Logout';
};
var getCheckoutShippingURL = exports.getCheckoutShippingURL = function getCheckoutShippingURL() {
  return getBaseURL() + 'COShipping-Start';
};
var getCartURL = exports.getCartURL = function getCartURL() {
  return getBaseURL() + 'Cart-Show';
};
var getWishlistURL = exports.getWishlistURL = function getWishlistURL() {
  return getBaseURL() + 'Wishlist-Show';
};
var getPaymentURL = exports.getPaymentURL = function getPaymentURL() {
  return getBaseURL() + 'COBilling-Start';
};
var getConfirmationURL = exports.getConfirmationURL = function getConfirmationURL() {
  return getBaseURL() + 'COSummary-Submit';
};
var getAccountAddressURL = exports.getAccountAddressURL = function getAccountAddressURL() {
  return getBaseURL() + 'Address-List';
};
var getAccountInfoURL = exports.getAccountInfoURL = function getAccountInfoURL() {
  return getBaseURL() + 'Account-EditProfile';
};
var getAccountOrderListURL = exports.getAccountOrderListURL = function getAccountOrderListURL() {
  return getBaseURL() + 'Order-History';
};

var buildSearchURL = exports.buildSearchURL = function buildSearchURL(query) {
  return '' + SEARCH_URL + (0, _utils.buildQueryString)(query);
};

var getShouldBridgeDesktopSession = exports.getShouldBridgeDesktopSession = function getShouldBridgeDesktopSession() {
  return config.features.shouldBridgeDesktopSession;
};

// These content IDs are useful for fetching content assets (like tiles,
// descriptions, page meta, etc.) via the OCAPI "Content" resources. See the
// following docs for more details on how to access the content:
//
//    Salesforce Commerce Cloud > Open Commerce API > Shop API resources > Content resource
//
// Content types can be found, created and edited in the SFCC backend via:
//
//     Merchant Tools > Content > Content Assets
var CART_CONTENT_ID = exports.CART_CONTENT_ID = 'cart';
var CHECKOUT_CONFIRMATION_CONTENT_ID = exports.CHECKOUT_CONFIRMATION_CONTENT_ID = 'checkout';
var CHECKOUT_PAYMENT_CONTENT_ID = exports.CHECKOUT_PAYMENT_CONTENT_ID = 'checkout';
var CHECKOUT_SHIPPING_CONTENT_ID = exports.CHECKOUT_SHIPPING_CONTENT_ID = 'checkout';
var CONFIRMATION_CONTENT_ID = exports.CONFIRMATION_CONTENT_ID = 'confirmation-message';