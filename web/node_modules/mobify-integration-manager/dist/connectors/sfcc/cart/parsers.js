'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseCartProducts = exports.parseCartContents = undefined;

var _parsers = require('../parsers');

/* eslint-disable camelcase */
var parseCartContents = exports.parseCartContents = function parseCartContents(_ref) {
    var adjusted_merchandize_total_tax = _ref.adjusted_merchandize_total_tax,
        _ref$product_items = _ref.product_items,
        product_items = _ref$product_items === undefined ? [] : _ref$product_items,
        product_total = _ref.product_total,
        product_sub_total = _ref.product_sub_total,
        merchandize_total_tax = _ref.merchandize_total_tax,
        order_total = _ref.order_total,
        _ref$order_price_adju = _ref.order_price_adjustments,
        order_price_adjustments = _ref$order_price_adju === undefined ? [] : _ref$order_price_adju,
        _ref$coupon_items = _ref.coupon_items,
        coupon_items = _ref$coupon_items === undefined ? [] : _ref$coupon_items;
    /* Cart */
    var items = product_items.map(function (_ref2) {
        var item_id = _ref2.item_id,
            product_id = _ref2.product_id,
            price_after_order_discount = _ref2.price_after_order_discount,
            quantity = _ref2.quantity;
        return {
            id: item_id,
            productId: product_id,
            quantity: quantity,
            href: (0, _parsers.getProductHref)(product_id),
            // This is a "made up" URL scheme that matches Magento/Merlins right now
            // so that we can use the same route. SFCC doesn't seem to have the same
            // concept. See router.jsx
            configureUrl: '/checkout/cart/configure/id/' + item_id + '/product_id/' + product_id + '/',
            itemPrice: '' + price_after_order_discount / quantity,
            linePrice: '' + price_after_order_discount
        };
    });

    var coupons = order_price_adjustments.map(function (_ref3) {
        var _ref3$coupon_code = _ref3.coupon_code,
            coupon_code = _ref3$coupon_code === undefined ? '' : _ref3$coupon_code,
            item_text = _ref3.item_text,
            price = _ref3.price;

        return {
            couponCode: coupon_code,
            text: item_text,
            amount: '' + price,
            id: coupon_items.find(function (_ref4) {
                var code = _ref4.code;
                return code === coupon_code;
            }).coupon_item_id
        };
    });

    return {
        items: items,
        subtotal: '' + product_sub_total,
        tax: '' + (adjusted_merchandize_total_tax || merchandize_total_tax),
        coupons: coupons,
        discount: '' + (product_sub_total - product_total),
        /* TODO: shipping: undefined, */
        // order_total isn't provided by SFCC until many details have
        // been provided so we fall back to product_sub_total when its missing

        // Here we use product_total instead of product_sub_total because
        // product_sub_total doesn't take discounts and taxes into account
        orderTotal: '' + (order_total || product_total)
    };
};
/* eslint-enable camelcase */

/* eslint-disable camelcase */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var parseCartProducts = exports.parseCartProducts = function parseCartProducts(_ref5) {
    var _ref5$product_items = _ref5.product_items,
        product_items = _ref5$product_items === undefined ? [] : _ref5$product_items;
    /* Products */
    var productMap = {};

    product_items.forEach(function (_ref6) {
        var product_id = _ref6.product_id,
            product_name = _ref6.product_name,
            price = _ref6.price,
            item_text = _ref6.item_text,
            quantity = _ref6.quantity;

        productMap[product_id] = {
            id: product_id,
            title: product_name,
            price: '' + price / quantity,
            href: (0, _parsers.getProductHref)(product_id),
            description: item_text,
            available: true
        };
    });
    return productMap;
};
/* eslint-enable camelcase */