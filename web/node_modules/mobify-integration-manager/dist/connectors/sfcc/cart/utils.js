'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.updateExpiredCart = exports.isCartExpired = exports.createNewBasket = exports.handleCartData = exports.requestCartData = exports.fetchCartItemData = exports.getProductImage = exports.createBasket = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _selectors = require('progressive-web-sdk/dist/store/cart/selectors');

var _selectors2 = require('progressive-web-sdk/dist/store/products/selectors');

var _results = require('../../../integration-manager/api/cart/results');

var _results2 = require('../../../integration-manager/api/products/results');

var _utils = require('../utils');

var _parsers = require('./parsers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var migrateProductsToBasket = function migrateProductsToBasket(basketId, existingBasket) {
    var options = {
        method: 'POST'
    };

    return (0, _utils.makeApiJsonRequest)('/baskets/' + basketId + '/items', existingBasket, options);
};

var getCustomerBasket = function getCustomerBasket(basketContents) {
    console.log('Checking customer\'s existing baskets.');
    var authToken = (0, _utils.getAuthToken)();

    if (!authToken) {
        console.log('  No auth token, cannot check for existing customer\'s basket');
        return _promise2.default.resolve(undefined);
    }

    var customerData = (0, _utils.getCustomerData)(authToken);
    return (0, _utils.makeApiRequest)('/customers/' + customerData.customer_id + '/baskets').then(function (response) {
        return response.json();
    }).then(function (_ref) {
        var _ref$baskets = _ref.baskets,
            baskets = _ref$baskets === undefined ? [] : _ref$baskets;

        console.log('  Found ' + baskets.length + ' baskets.');

        if (baskets.length === 0) {
            return undefined;
        }

        console.log('  Using the first one: ' + baskets[0].basket_id);

        var basketId = baskets[0].basket_id;
        (0, _utils.storeBasketID)(basketId);

        // Migrate existing basket contents if provided (usually when logging in)
        if (basketContents) {
            return migrateProductsToBasket(basketId, basketContents);
        }

        return baskets[0];
    });
};

var createBasket = exports.createBasket = function createBasket(basketContents) {
    var basketID = (0, _utils.getBasketID)();
    if (basketID && !basketContents) {
        return _promise2.default.resolve({ basket_id: basketID });
    }

    // If the browser doesn't know about a basket, we may have
    // still one in progress on the server
    return getCustomerBasket(basketContents).then(function (basket) {
        if (basket) {
            return basket;
        }

        // Nope, nothing exists so create a new one via OCAPI
        return (0, _utils.makeApiJsonRequest)('/baskets', basketContents, { method: 'POST' });
    });
};

var getProductImage = exports.getProductImage = function getProductImage(item, currentState) {
    var productImage = (0, _selectors2.getProductThumbnailSrcById)(item.product_id)(currentState);

    if (productImage) {
        // If we already have images for the item in our state, then just use those
        return _promise2.default.resolve({
            src: productImage,
            alt: item.product_name
        });
    }

    // We have no images for the item in our state, fetch images using the Salesforce Commerce Cloud API
    return (0, _utils.makeApiRequest)('/products/' + item.product_id + '/images?view_type=large', { method: 'GET' }).then(function (response) {
        return response.json();
    }).then(function (responseJSON) {
        return {
            src: responseJSON.image_groups[0].images[0].link,
            alt: item.product_name
        };
    });
};

/**
 * Fetches product images for items that are in the cart and don't already
 * have them.
 */
var fetchCartItemData = exports.fetchCartItemData = function fetchCartItemData() {
    return function (dispatch, getState) {
        var items = (0, _selectors.getCartItems)(getState()).toJS();

        return dispatch((0, _utils.fetchItemData)(items)).then(function (_ref2) {
            var updatedProducts = _ref2.updatedProducts,
                updatedCartItems = _ref2.updatedCartItems;

            dispatch((0, _results2.receiveCartProductData)(updatedProducts));
            dispatch((0, _results.receiveCartItems)(updatedCartItems));
        });
    };
};

var requestCartData = exports.requestCartData = function requestCartData(noRetry) {
    return createBasket().then(function (basket) {
        return (0, _utils.makeApiRequest)('/baskets/' + basket.basket_id, { method: 'GET' });
    }).then(function (response) {
        if (response.status === 404) {
            if (noRetry) {
                throw new Error('Cart not found');
            }
            // Our basket has expired, clear and start over
            (0, _utils.deleteBasketID)();
            return requestCartData(true);
        }
        return response;
    }).then(function (response) {
        return response.json();
    });
};

var handleCartData = exports.handleCartData = function handleCartData(basket) {
    return function (dispatch) {
        // Note: These need to be dispatched in this order, otherwise there's
        //       a chance we could try to render cart items and not have product
        //       data in the store for it.
        dispatch((0, _results2.receiveCartProductData)((0, _parsers.parseCartProducts)(basket)));
        dispatch((0, _results.receiveCartContents)((0, _parsers.parseCartContents)(basket)));

        return dispatch(fetchCartItemData());
    };
};

var createNewBasket = exports.createNewBasket = function createNewBasket() {
    return function (dispatch) {
        (0, _utils.deleteBasketID)();
        return requestCartData().then(function (basket) {
            dispatch(handleCartData(basket));
            return basket;
        });
    };
};

var isCartExpired = exports.isCartExpired = function isCartExpired(_ref3) {
    var fault = _ref3.fault;

    if (fault) {
        if (fault.type === 'InvalidCustomerException' || fault.type === 'BasketNotFoundException') {
            return true;
        }
        throw new Error(fault.message);
    }
    return false;
};

// Check if the users cart has expired, if it has create a new one and throw an error
// otherwise return the cart object
var updateExpiredCart = exports.updateExpiredCart = function updateExpiredCart(basket) {
    return function (dispatch) {
        if (isCartExpired(basket)) {
            return dispatch(createNewBasket()).then(function (basket) {
                return dispatch(handleCartData(basket));
            }).then(function () {
                throw new Error('Your cart has expired.');
            });
        }
        return basket;
    };
};