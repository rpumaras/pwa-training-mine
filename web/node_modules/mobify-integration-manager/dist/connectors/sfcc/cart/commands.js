'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchTaxEstimate = exports.deletePromoCode = exports.putPromoCode = exports.initCartPage = exports.updateItemQuantity = exports.updateCartItem = exports.removeFromCart = exports.addToCart = exports.getCart = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('../utils');

var _utils2 = require('../checkout/utils');

var _config = require('../config');

var _parsers = require('../parsers');

var _results = require('../../../integration-manager/api/cart/results');

var _utils3 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var getCart = exports.getCart = function getCart() {
    return function (dispatch) {
        return (0, _utils3.requestCartData)().then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};

var addToCartRequest = function addToCartRequest(productId, quantity, basketId) {
    var requestBody = [{
        product_id: productId,
        quantity: quantity
    }];
    return (0, _utils.makeApiJsonRequest)('/baskets/' + basketId + '/items', requestBody, { method: 'POST' });
};

/**
 * @function addToCart
 * @param {String} productId The product's ID - if the product supports variants then this is the variant ID (cannot be master product ID)
 * @param {Number} quantity The quantity to add
 */
var addToCart = exports.addToCart = function addToCart(productId, quantity) {
    return function (dispatch) {
        return (0, _utils3.createBasket)().then(function (basket) {
            return addToCartRequest(productId, quantity, basket.basket_id);
        }).then(function (basket) {
            if ((0, _utils3.isCartExpired)(basket)) {
                // the basket has expired create a new one and try adding to cart again
                return dispatch((0, _utils3.createNewBasket)()).then(function (basket) {
                    return addToCartRequest(productId, quantity, basket.basket_id);
                });
            }
            return basket;
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        }).catch(function (err) {
            console.log('Error adding item to cart:', err);
            throw new Error('Unable to add item to cart');
        });
    };
};

var removeFromCart = exports.removeFromCart = function removeFromCart(itemId) {
    return function (dispatch) {
        return (0, _utils3.createBasket)().then(function (basket) {
            return (0, _utils.makeApiRequest)('/baskets/' + basket.basket_id + '/items/' + itemId, { method: 'DELETE' });
        }).then(function (response) {
            return response.json();
        }).then(function (basket) {
            return dispatch((0, _utils3.updateExpiredCart)(basket));
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};

var updateCartItem = exports.updateCartItem = function updateCartItem(itemId, quantity, productId) {
    return function (dispatch) {
        var requestBody = {
            quantity: quantity
        };

        if (productId) {
            requestBody.product_id = productId;
        }

        return (0, _utils3.createBasket)().then(function (basket) {
            return (0, _utils.makeApiJsonRequest)('/baskets/' + basket.basket_id + '/items/' + itemId, requestBody, { method: 'PATCH' });
        }).then(function (basket) {
            if ((0, _utils3.isCartExpired)(basket)) {
                // the basket has expired create a new one and try adding to cart again
                return dispatch((0, _utils3.createNewBasket)()).then(function () {
                    return addToCart(productId, quantity);
                });
            }
            return basket;
        }).catch(function () {
            throw new Error('Unable to update item');
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};

var updateItemQuantity = exports.updateItemQuantity = function updateItemQuantity(itemId, quantity) {
    return function (dispatch) {
        return dispatch(updateCartItem(itemId, quantity));
    };
};

var initCartPage = exports.initCartPage = function initCartPage() {
    return function (dispatch) {
        return (0, _utils.requestContentById)(_config.CART_CONTENT_ID).then(function (resJSON) {
            dispatch((0, _results.receiveCartPageMeta)((0, _parsers.parsePageMeta)(resJSON).pageMeta));
            dispatch((0, _utils2.populateLocationsData)());
        });
    };
};

var putPromoCode = exports.putPromoCode = function putPromoCode(couponCode) {
    return function (dispatch) {
        var requestBody = {
            code: couponCode
        };

        return (0, _utils3.createBasket)().then(function (basket) {
            return (0, _utils.makeApiJsonRequest)('/baskets/' + basket.basket_id + '/coupons', requestBody, { method: 'POST' });
        }).catch(function () {
            throw new Error('Unable to apply coupon');
        }).then(function (basket) {
            return dispatch((0, _utils3.updateExpiredCart)(basket));
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};

var deletePromoCode = exports.deletePromoCode = function deletePromoCode(couponId) {
    return function (dispatch) {
        return (0, _utils3.createBasket)().then(function (basket) {
            return (0, _utils.makeApiRequest)('/baskets/' + basket.basket_id + '/coupons/' + couponId, { method: 'DELETE' });
        }).then(function (response) {
            return response.json();
        }).catch(function () {
            throw new Error('Unable to remove coupon');
        }).then(function (basket) {
            return dispatch((0, _utils3.updateExpiredCart)(basket));
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};

var fetchTaxEstimate = exports.fetchTaxEstimate = function fetchTaxEstimate() {
    return _promise2.default.reject('Method not implemented');
};