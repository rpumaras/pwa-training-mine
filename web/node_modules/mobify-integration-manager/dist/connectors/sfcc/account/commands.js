'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.updateWishlistItemQuantity = exports.updateWishlistItem = exports.addToCartFromWishlist = exports.removeItemFromWishlist = exports.reorderPreviousOrder = exports.getOrderList = exports.getOrder = exports.getWishlist = exports.updateAccountPassword = exports.updateAccountInfo = exports.getAccountInfo = exports.updateBillingAddress = exports.updateShippingAddress = exports.editAddress = exports.deleteAddress = exports.addAddress = exports.getSavedAddresses = exports.registerUser = exports.logout = exports.login = exports.navigateToSection = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _fetchUtils = require('progressive-web-sdk/dist/utils/fetch-utils');

var _selectors = require('progressive-web-sdk/dist/store/products/selectors');

var _results = require('../../../integration-manager/results');

var _results2 = require('../../../integration-manager/api/account/results');

var _results3 = require('../../../integration-manager/api/products/results');

var _parsers = require('../parsers');

var _utils = require('../checkout/utils');

var _commands = require('../products/commands');

var _utils2 = require('../utils');

var _session = require('../session');

var _utils3 = require('../cart/utils');

var _utils4 = require('../../../utils/utils');

var _config = require('../config');

var _commands2 = require('../app/commands');

var _commands3 = require('../../../integration-manager/api/cart/commands');

var _commands4 = require('../../../integration-manager/api/account/commands');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var navigateToSection = exports.navigateToSection = function navigateToSection() {
    return function (dispatch) {
        return _promise2.default.resolve();
    };
}; // eslint-disable-line no-unused-vars

var login = exports.login = function login(username, password) {
    return function (dispatch) {
        var authorizationData = window.btoa(username + ':' + password);
        var requestOptions = {
            method: 'POST',
            body: '{type: "credentials"}',
            headers: (0, _extends3.default)({}, (0, _config.getRequestHeaders)(), {
                Authorization: 'Basic ' + authorizationData
            })
        };
        var responseHeaders = void 0;
        var basketContents = void 0;
        var customerID = void 0;
        return (0, _utils3.requestCartData)().then(function (basket) {
            basketContents = basket;

            // Actual login call
            return (0, _fetchUtils.makeRequest)((0, _config.getApiEndPoint)() + '/customers/auth', requestOptions);
        }).then(function (response) {
            responseHeaders = response.headers;
            return response.json();
        }).then(function (responseJSON) {
            if (responseJSON.fault) {
                var errorMessage = 'Username or password is incorrect';
                if (/internal server/i.test(responseJSON.fault.message)) {
                    errorMessage = 'There was a problem logging in. Please try again.';
                }
                throw new Error({ _error: errorMessage });
            }
            var authorization = responseHeaders.get('Authorization');
            customerID = responseJSON.customer_id;
            (0, _utils2.storeAuthToken)(authorization);
            dispatch((0, _results.setLoggedIn)(true));
            dispatch((0, _commands2.fetchNavigationData)());
            (0, _utils2.deleteBasketID)();

            // Now that we have an authenticated JWT token, let's bridge that to desktop
            // as well so any actions through desktop see the same session
            return (0, _session.bridgeOcapiToDesktopSession)(authorization);
        })
        // Check if the user has a basket already
        .then(function () {
            return (0, _utils2.makeApiRequest)('/customers/' + customerID + '/baskets', { method: 'GET' });
        }).then(function (response) {
            return response.json();
        }).then(function (_ref) {
            var baskets = _ref.baskets;

            if (!baskets || baskets.length === 0) {
                return (0, _utils3.createBasket)(basketContents);
            }

            var basketID = baskets[0].basket_id;
            (0, _utils2.storeBasketID)(basketID);
            if (!basketContents.product_items) {
                // There is no basket to merge, so return the existing one
                return _promise2.default.resolve(baskets[0]);
            }
            // update basket with contents (product_items)
            return (0, _utils2.makeApiJsonRequest)('/baskets/' + basketID + '/items', basketContents.product_items, { method: 'POST' }).then(_utils2.checkForResponseFault);
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        }).then(function () {
            return {
                isCartMerged: false,
                href: (0, _config.getDashboardURL)()
            };
        });
    };
};

var logout = exports.logout = function logout() {
    return function (dispatch) {
        return (0, _utils2.makeApiRequest)('/customers/auth', { method: 'DELETE' }).then(function (response) {
            return response.text();
        }).then(function (responseText) {
            // Reset current auth token with guest access
            (0, _utils2.deleteAuthToken)();
            if (!responseText.length) {
                // The usage of the private function `requestGuestAuthorizationToken`
                // is the backbone of this fix. if we were not to call this
                // function, the cookies set previously wouldn't change and we
                // would just end up being logged in again on the next call. So
                // getting the guest session will update those cookies thus not
                // bridging the old logged in session.
                return (0, _session.requestGuestAuthorizationToken)().then(function (response) {
                    return (0, _session.bridgeOcapiToDesktopSession)(response.headers.get('Authorization')).then(function () {
                        return {};
                    });
                });
            }

            return JSON.parse(responseText);
        }).then(function (responseJSON) {
            // We don't really do any serious error checking here because we can't
            // really do much about it.
            if (responseJSON.fault) {
                console.error('Error logging out. Clearing auth tokens anyways.', responseJSON);
            }

            (0, _utils2.deleteBasketID)();
            dispatch((0, _results.setLoggedIn)(false));
            dispatch((0, _commands2.fetchNavigationData)());
        });
    };
};

var registerUser = exports.registerUser = function registerUser(firstname, lastname, email, password) {
    return function (dispatch) {
        var requestOptions = {
            method: 'POST',
            body: (0, _stringify2.default)({
                password: password,
                customer: {
                    first_name: firstname,
                    last_name: lastname,
                    login: email,
                    email: email
                }
            })
        };
        var responseHeaders = void 0;
        return (0, _utils2.makeApiRequest)('/customers', requestOptions).then(function (response) {
            responseHeaders = response.headers;
            return response.json();
        }).then(function (_ref2) {
            var fault = _ref2.fault;

            if (fault) {
                throw new Error({ _error: 'Unable to create account.' });
            }
            var authorization = responseHeaders.get('Authorization');
            if (authorization) {
                (0, _utils2.storeAuthToken)(authorization);
                return (0, _session.bridgeOcapiToDesktopSession)(authorization);
            }
            return _promise2.default.resolve();
        })
        // Creating a user doesn't sign them in automatically, so dispatch the login command
        .then(function () {
            return dispatch(login(email, password, true));
        });
    };
};

var getSavedAddresses = exports.getSavedAddresses = function getSavedAddresses() {
    return function (dispatch) {
        var customerId = (0, _utils2.getCustomerID)();
        return (0, _utils2.makeApiRequest)('/customers/' + customerId + '/addresses', { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (_ref3) {
            var _ref3$data = _ref3.data,
                data = _ref3$data === undefined ? [] : _ref3$data;

            var addresses = data.map(function (address) {
                return (0, _parsers.parseAddressResponse)(address);
            });
            return dispatch((0, _results2.receiveSavedAddresses)(addresses));
        });
    };
};

var addAddress = exports.addAddress = function addAddress(address) {
    return function (dispatch) {
        var addressData = (0, _utils.createOrderAddressObject)(address);
        var customerId = (0, _utils2.getCustomerID)();

        var requestBody = (0, _extends3.default)({}, addressData, {
            address_id: address.addressName
        });

        return (0, _utils2.makeApiJsonRequest)('/customers/' + customerId + '/addresses', requestBody, { method: 'POST' }).then(_utils2.checkForResponseFault).then(function () {
            return dispatch(getSavedAddresses());
        }).catch(function () {
            throw Error('Unable to save address');
        });
    };
};

var deleteAddress = exports.deleteAddress = function deleteAddress(addressId) {
    return function (dispatch) {
        // eslint-disable-line
        var customerId = (0, _utils2.getCustomerID)();

        return (0, _utils2.makeApiRequest)('/customers/' + customerId + '/addresses/' + addressId, { method: 'DELETE' }).then(function () {
            return dispatch(getSavedAddresses());
        });
    };
};

var editAddress = exports.editAddress = function editAddress(address, addressId) {
    return function (dispatch) {
        // eslint-disable-line
        var addressData = (0, _utils.createOrderAddressObject)(address);
        var customerId = (0, _utils2.getCustomerID)();

        return (0, _utils2.makeApiJsonRequest)('/customers/' + customerId + '/addresses/' + addressId, (0, _extends3.default)({}, addressData), { method: 'PATCH' }).then(function () {
            return dispatch(getSavedAddresses());
        });
    };
};

// updateShippingAddress and updateBillingAddress are separate commands to
// support other connectors that require different actions for saving a
// shipping vs. a billing address
// SFCC doesn't diferentiate between the two address types,
// so these commands do effectively the same thing
var updateShippingAddress = exports.updateShippingAddress = function updateShippingAddress(formValues) {
    return function (dispatch) {
        formValues.addressName = 'shipping_address';
        return dispatch(addAddress(formValues));
    };
};

var updateBillingAddress = exports.updateBillingAddress = function updateBillingAddress(formValues) {
    return function (dispatch) {
        formValues.addressName = 'billing_address';
        return dispatch(addAddress(formValues));
    };
};

/* eslint-disable camelcase */
var parseAccountInfoData = function parseAccountInfoData(_ref4) {
    var first_name = _ref4.first_name,
        last_name = _ref4.last_name,
        login = _ref4.login;
    return {
        names: first_name + ' ' + last_name,
        email: login
    };
};
/* eslint-enable camelcase */

var getAccountInfo = exports.getAccountInfo = function getAccountInfo() {
    return function (dispatch) {
        var customerId = (0, _utils2.getCustomerID)();
        return (0, _utils2.makeApiJsonRequest)('/customers/' + customerId).then(function (res) {
            return dispatch((0, _results2.receiveAccountInfoData)(parseAccountInfoData(res)));
        });
    };
};

var updateAccountInfo = exports.updateAccountInfo = function updateAccountInfo(_ref5) {
    var names = _ref5.names,
        email = _ref5.email;
    return function (dispatch) {
        var customerId = (0, _utils2.getCustomerID)();

        var _splitFullName = (0, _utils4.splitFullName)(names),
            firstname = _splitFullName.firstname,
            lastname = _splitFullName.lastname;

        var requestBody = {
            first_name: firstname,
            last_name: lastname,
            email: email
        };

        return (0, _utils2.makeApiJsonRequest)('/customers/' + customerId, requestBody, { method: 'PATCH' }).then(_utils2.checkForResponseFault).then(function (res) {
            return dispatch((0, _results2.receiveAccountInfoData)(parseAccountInfoData(res)));
        }).catch(function () {
            throw new Error({ _error: 'Account Info Update Failed' });
        });
    };
};

var updateAccountPassword = exports.updateAccountPassword = function updateAccountPassword(_ref6) {
    var currentPassword = _ref6.currentPassword,
        newPassword = _ref6.newPassword;
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        var customerId = (0, _utils2.getCustomerID)();
        var requestBody = {
            current_password: currentPassword,
            password: newPassword

            // NOTE: res.json() on a successful PUT throws
            // "Uncaught (in promise) SyntaxError: Unexpected end of JSON input"
            // because it returns an empty response, thus we need to use res.text()
        };return (0, _utils2.makeApiRequest)('/customers/' + customerId + '/password', { method: 'PUT', body: (0, _stringify2.default)(requestBody) }).then(function (res) {
            return res.text();
        }).then(function (responseString) {
            if (!responseString.length) {
                return _promise2.default.resolve();
            }

            var res = JSON.parse(responseString);

            if (res.fault && res.fault.type === 'InvalidCustomerException') {
                return new Error({ _error: 'Your session has expired' });
            }

            return (0, _utils2.checkForResponseFault)(res);
        }).catch(function () {
            throw new Error({ _error: 'Password Change Failed' });
        });
    };
};

var getWishlist = exports.getWishlist = function getWishlist() {
    return function (dispatch) {
        var customerID = (0, _utils2.getCustomerID)();
        return (0, _utils2.makeApiRequest)('/customers/' + customerID + '/product_lists', { method: 'GET' }).then(function (response) {
            return response.json();
        }).then(function (_ref7) {
            var data = _ref7.data;

            if (!data) {
                // wishlist is empty, handle the empty case
                return dispatch((0, _results2.receiveWishlistData)({
                    title: 'My Wish List'
                }));
            }
            var wishlistResponse = data[0];
            var wishlistItems = (0, _parsers.parseWishlistProducts)(wishlistResponse);
            var wishlistData = {
                products: wishlistItems,
                id: wishlistResponse.id
            };

            if (wishlistResponse.name) {
                wishlistData.title = wishlistResponse.name;
            }

            return dispatch((0, _utils2.fetchItemData)(wishlistItems)).then(function (_ref8) {
                var updatedProducts = _ref8.updatedProducts;

                dispatch((0, _results3.receiveWishlistProductData)(updatedProducts));
                dispatch((0, _results2.receiveWishlistData)(wishlistData));
            });
        });
    };
};

var getOrder = exports.getOrder = function getOrder(orderNumber) {
    return function (dispatch) {
        return (0, _utils2.makeApiRequest)('/orders/' + orderNumber, { method: 'GET' }).then(function (response) {
            return response.json();
        }).then(function (responseJSON) {
            var orderData = (0, _parsers.parseOrder)(responseJSON);
            return dispatch((0, _utils2.fetchItemData)(orderData[orderNumber].items)).then(function (_ref9) {
                var updatedProducts = _ref9.updatedProducts,
                    updatedCartItems = _ref9.updatedCartItems;

                orderData[orderNumber].items = updatedCartItems;
                dispatch((0, _results3.receiveProductsData)(updatedProducts));
                dispatch((0, _results2.receiveAccountOrderListData)(orderData));
            });
        });
    };
};

var getOrderList = exports.getOrderList = function getOrderList() {
    return function (dispatch) {
        var customerID = (0, _utils2.getCustomerID)();
        return (0, _utils2.makeApiRequest)('/customers/' + customerID + '/orders?count=200', { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (resJSON) {
            return dispatch((0, _results2.receiveAccountOrderListData)((0, _parsers.parseOrdersResponse)(resJSON)));
        });
    };
};

/* eslint-disable camelcase */
var addItemsToCart = function addItemsToCart(items) {
    return function (dispatch) {
        (0, _utils3.createBasket)().then(function (_ref10) {
            var basket_id = _ref10.basket_id;

            return (0, _utils2.makeApiJsonRequest)('/baskets/' + basket_id + '/items', items, { method: 'POST' });
        }).then(function (basket) {
            return dispatch((0, _utils3.handleCartData)(basket));
        });
    };
};
/* eslint-enable camelcase */

var reorderPreviousOrder = exports.reorderPreviousOrder = function reorderPreviousOrder(orderNumber) {
    return function (dispatch) {
        return (0, _utils2.makeApiRequest)('/orders/' + orderNumber, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (responseJSON) {
            return dispatch(addItemsToCart(responseJSON.product_items));
        }).then(function () {
            return (0, _config.getCartURL)();
        });
    };
};

var removeItemFromWishlist = exports.removeItemFromWishlist = function removeItemFromWishlist(itemId, wishlistId) {
    return function (dispatch) {
        var customerID = (0, _utils2.getCustomerID)();
        return (0, _utils2.makeApiRequest)('/customers/' + customerID + '/product_lists/' + wishlistId + '/items/' + itemId, { method: 'DELETE' }).then(function (response) {
            return response.text();
        }).then(function (responseText) {
            if (!responseText.length) {
                return _promise2.default.resolve({});
            }

            return JSON.parse(responseText);
        }).then(_utils2.checkForResponseFault).then(function () {
            return dispatch((0, _results2.removeWishlistItem)(itemId));
        });
    };
};

var addToCartFromWishlist = exports.addToCartFromWishlist = function addToCartFromWishlist(productId, _ref11) {
    var quantity = _ref11.quantity,
        wishlistId = _ref11.wishlistId,
        itemId = _ref11.itemId;
    return function (dispatch) {
        // add the item to the cart
        return dispatch((0, _commands3.addToCart)(productId, quantity)).then(function () {
            return dispatch((0, _commands4.removeItemFromWishlist)(itemId, wishlistId, productId, quantity));
        });
    };
};

var updateWishlistItem = exports.updateWishlistItem = function updateWishlistItem(itemId, wishlistId, quantity) {
    return function (dispatch, getState) {
        var productId = (0, _selectors.getCurrentProductId)(getState());
        var productUrl = (0, _selectors.getProductHref)(getState());
        // PATCH is only for updating priority, quantity, public properties of the wishlist item.
        // POST then DELETE is required for replacing products
        return dispatch((0, _commands4.removeItemFromWishlist)(itemId, wishlistId, productId)).then(function () {
            return dispatch((0, _commands.addItemToWishlist)(productId, productUrl, quantity));
        });
    };
};

var updateWishlistItemQuantity = exports.updateWishlistItemQuantity = function updateWishlistItemQuantity(quantity, itemId, wishlistId) {
    return function (dispatch) {
        var customerID = (0, _utils2.getCustomerID)();
        dispatch((0, _results2.receiveUpdatedWishlistItem)({ itemId: itemId, quantity: quantity }));
        return (0, _utils2.makeApiJsonRequest)('/customers/' + customerID + '/product_lists/' + wishlistId + '/items/' + itemId, { quantity: quantity }, { method: 'PATCH' });
    };
};