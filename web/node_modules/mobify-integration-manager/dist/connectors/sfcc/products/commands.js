'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getProducts = exports.getProduct = exports.addItemToWishlist = exports.getProductVariantData = exports.initProductDetailsPage = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _results = require('../../../integration-manager/api/products/results');

var _results2 = require('../../../integration-manager/results');

var _utils = require('progressive-web-sdk/dist/utils/utils');

var _utils2 = require('../utils');

var _parsers = require('../parsers');

var _utils3 = require('../../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var initProductDetailsPage = exports.initProductDetailsPage = function initProductDetailsPage(url) {
    return function (dispatch) {
        var productURL = '/products/' + (0, _parsers.getCurrentProductID)(url) + '?expand=availability,prices,images,variations';
        var productPathKey = (0, _utils.urlToPathKey)(url);

        return (0, _utils2.makeApiRequest)(productURL, { method: 'GET' }).then(function (response) {
            return response.json();
        }).then(function (responseJSON) {
            var productDetailsData = (0, _extends3.default)({}, (0, _parsers.parseProductDetails)(responseJSON), {
                href: productPathKey
            });
            var id = productDetailsData.id;


            var productDetailsMap = (0, _defineProperty3.default)({}, id, productDetailsData);
            productDetailsData.variants.forEach(function (_ref) {
                var id = _ref.id;

                var variantData = (0, _extends3.default)({}, productDetailsData, {
                    id: id
                });
                productDetailsMap[id] = variantData;
            });

            // Use the first variation id as the current product id, as you can't add
            // master products to the cart and we always have the first variation selected
            // on page load.
            var currentProductId = productDetailsData.variants.length ? productDetailsData.variants[0].id : id;

            dispatch((0, _results2.receiveCurrentProductId)(currentProductId));
            dispatch((0, _results.receiveProductDetailsProductData)(productDetailsMap));
            dispatch((0, _results.receiveProductDetailsUIData)((0, _defineProperty3.default)({}, currentProductId, { itemQuantity: responseJSON.step_quantity })));

            // since the pathname will always be master, the productHref will
            // only === pathname when landing on master page
            // TODO: Need an AMP-friendly version of this, when AMP is ready for variants
            if (typeof window !== 'undefined' && (0, _parsers.getProductHref)(productDetailsData.id) === window.location.pathname && productDetailsData.variants.length) {
                var variants = productDetailsData.variants,
                    initialValues = productDetailsData.initialValues;

                var defaultVariant = (0, _parsers.getInitialSelectedVariant)(variants, initialValues);
                var currentProductHref = defaultVariant.id;

                dispatch((0, _results2.setCurrentURL)((0, _parsers.getProductHref)(currentProductHref)));
                dispatch(initProductDetailsPage((0, _parsers.getProductHref)(currentProductHref)));
            }
        });
    };
};

var getProductVariantData = exports.getProductVariantData = function getProductVariantData(variationSelections, variants, categoryIds) {
    return function (dispatch) {
        if (categoryIds.some(function (id) {
            return !variationSelections[id];
        })) {
            return _promise2.default.resolve();
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            var _loop = function _loop() {
                var _ref2 = _step.value;
                var values = _ref2.values,
                    id = _ref2.id;

                if (categoryIds.every(function (id) {
                    return variationSelections[id] === values[id];
                })) {
                    var currentProductHref = (0, _parsers.getProductHref)(id);
                    dispatch((0, _results2.setCurrentURL)(currentProductHref));

                    return {
                        v: dispatch(initProductDetailsPage(currentProductHref))
                    };
                }
            };

            for (var _iterator = (0, _getIterator3.default)(variants), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ret = _loop();

                if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return _promise2.default.resolve();
    };
};

var NEW_WISHILIST_PAYLOAD = {
    type: 'wish_list',
    name: 'My Wish List'
};

var addItemToWishlist = exports.addItemToWishlist = function addItemToWishlist(productId, productUrl, quantity) {
    return function (dispatch) {
        // eslint-disable-line no-unused-vars
        var customerID = (0, _utils2.getCustomerID)();

        return (0, _utils2.makeApiRequest)('/customers/' + customerID + '/product_lists', { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (_ref3) {
            var count = _ref3.count,
                data = _ref3.data;

            if (count) {
                return data[0];
            }
            // create a list if one doesn't exist
            return (0, _utils2.makeApiJsonRequest)('/customers/' + customerID + '/product_lists', NEW_WISHILIST_PAYLOAD, { method: 'POST' }).then(_utils2.checkForResponseFault);
        }).then(function (_ref4) {
            var id = _ref4.id;

            var requestBody = {
                type: 'product',
                product_id: productId,
                quantity: quantity
            };

            return (0, _utils2.makeApiJsonRequest)('/customers/' + customerID + '/product_lists/' + id + '/items', requestBody, { method: 'POST' }).then(_utils2.checkForResponseFault);
        }).catch(function () {
            throw new Error('Unable to add item to wishlist.');
        });
    };
};

var getProduct = exports.getProduct = _utils3.notImplementedCommand;
var getProducts = exports.getProducts = _utils3.notImplementedCommand;