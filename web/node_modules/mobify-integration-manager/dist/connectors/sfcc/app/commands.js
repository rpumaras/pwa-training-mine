'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initApp = exports.getSearchSuggestions = exports.fetchNavigationData = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _actions = require('progressive-web-sdk/dist/analytics/actions');

var _results = require('../../../integration-manager/results');

var _results2 = require('../../../integration-manager/api/checkout/results');

var _constants = require('../../../constants/navigation/constants');

var _config = require('../config');

var _parsers = require('../parsers');

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _session = require('../session');

var _utils2 = require('../cart/utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var formatCategorySearch = function formatCategorySearch(categoryIds) {
    return '(' + categoryIds.join(',') + ')';
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var findNonLeafCategoryIds = function findNonLeafCategoryIds(categories) {
    return categories.reduce(function (list, _ref) {
        var categories = _ref.categories;

        if (categories) {
            categories.forEach(function (category) {
                list.push(category.id);
            });
        }
        return list;
    }, []);
};

/**
 * @function insertCategory
 * This function traverses the category tree
 * and inserts sub-categories to the correct nodes of the category tree
 * @param {object} categories The entire category tree
 * @param {object} subCategory The sub-category to be added to the category tree
 */
var insertCategory = function insertCategory(categories, subCategory) {
    categories.forEach(function (category) {
        if (category.id === subCategory.id) {
            category.categories = subCategory.categories;
        } else if (category.categories) {
            insertCategory(category.categories, subCategory);
        }
    });
};

/**
 * This is a recursive function that can fetch and build the category tree
 * It mutates the `categories` parameter and returns Promise.resolve()
 * This function blocks the `fetchNavigationData` command until the entire category tree is built
 * You should try to avoid having a deeply nested category tree in your SFCC configuration
 * to improve performance
 *
 * SFCC OCAPI v17.7 Constraints:
 * 1. Only allow the client to fetch up to 2 levels of categories per request
 * 2. Only allow the client to fetch up to 50 categories per request
 * @param {array} categories The accumulated category tree
 * @param {array} nonLeafCategories The array contains the list of non leaf category ids
 * @returns Promise.resolve()
 */
var fetchCategories = function fetchCategories(categories, nonLeafCategories) {
    var categorySearchString = nonLeafCategories ? formatCategorySearch(nonLeafCategories) : '(root)';
    return utils.makeUnAuthenticatedApiRequest('/categories/' + categorySearchString + '?levels=2', { method: 'GET' }).then(function (response) {
        return response.json();
    }).then(function (_ref2) {
        var data = _ref2.data;

        if (!categories.length) {
            // the first response for /categories/(root)
            data[0].categories.forEach(function (category) {
                return categories.push(category);
            });
        } else {
            data.forEach(function (category) {
                return insertCategory(categories, category);
            });
        }
        nonLeafCategories = findNonLeafCategoryIds(data);

        if (nonLeafCategories.length > 0) {
            var pendingRequests = [];
            while (nonLeafCategories.length > 50) {
                pendingRequests.push(fetchCategories(categories, nonLeafCategories.splice(0, 50)));
            }
            return _promise2.default.all(pendingRequests.concat(fetchCategories(categories, nonLeafCategories)));
        }
        return _promise2.default.resolve();
    });
};

var fetchNavigationData = exports.fetchNavigationData = function fetchNavigationData() {
    return function (dispatch) {
        var categories = [];
        return fetchCategories(categories).then(function () {
            var navData = (0, _parsers.parseCategories)(categories);
            var isLoggedIn = utils.isUserLoggedIn(utils.getAuthToken());
            var accountNode = [{
                type: isLoggedIn ? _constants.ACCOUNT_NAV_ITEM : _constants.SIGNED_OUT_ACCOUNT_NAV_ITEM,
                title: 'My Account',
                options: {
                    icon: 'user',
                    className: 'u-margin-top-md u-border-top'
                },
                path: (0, _config.getDashboardURL)()
            }, {
                type: isLoggedIn ? _constants.ACCOUNT_NAV_ITEM : _constants.SIGNED_OUT_ACCOUNT_NAV_ITEM,
                title: 'Wishlist',
                options: {
                    icon: 'star'
                },
                path: (0, _config.getWishlistURL)()
            }, (0, _extends3.default)({}, isLoggedIn ? _constants.LOGGED_IN_NAV : _constants.GUEST_NAV, {
                options: {
                    icon: isLoggedIn ? 'lock' : 'user',
                    className: !isLoggedIn ? 'u-margin-top-md u-border-top' : ''
                },
                path: (0, _config.getSignInURL)()
            })];

            return dispatch((0, _results.receiveNavigationData)({
                path: '/',
                root: {
                    title: 'root',
                    path: '/',
                    children: navData.concat(accountNode)
                }
            }));
        });
    };
};

var getSearchSuggestions = exports.getSearchSuggestions = function getSearchSuggestions(query) {
    return function (dispatch) {
        // SFCC API requires min length of 3
        if (query.length < 3) {
            return dispatch((0, _results.receiveSearchSuggestions)(null));
        }
        var queryURL = '/search_suggestion?q=' + query;
        return utils.makeApiRequest(queryURL).then(function (response) {
            return response.json();
        }).then(function (responseJSON) {
            return dispatch((0, _results.receiveSearchSuggestions)((0, _parsers.parseSearchSuggestions)(responseJSON)));
        });
    };
};

var initApp = exports.initApp = function initApp() {
    return function (dispatch) {
        return (0, _session.initSfccAuthAndSession)().then(function () {
            return (0, _utils2.requestCartData)();
        }).then(function (basket) {
            var currency = (0, _parsers.parseCurrency)(basket.currency);
            dispatch((0, _results.receiveSelectedCurrency)(currency));

            // Send currency analytics
            dispatch((0, _actions.setCurrencyCode)(currency.code));
            dispatch((0, _results.receiveAvailableCurrencies)([currency]));
        }).then(function () {
            return dispatch(fetchNavigationData());
        }).then(function () {
            var customerData = utils.getCustomerData(utils.getAuthToken());
            dispatch((0, _results.setCheckoutShippingURL)((0, _config.getCheckoutShippingURL)()));
            dispatch((0, _results.setCartURL)((0, _config.getCartURL)()));
            dispatch((0, _results.setWishlistURL)((0, _config.getWishlistURL)()));
            dispatch((0, _results.setSignInURL)((0, _config.getSignInURL)()));
            dispatch((0, _results.setAccountOrderListURL)((0, _config.getAccountOrderListURL)()));
            dispatch((0, _results.setAccountAddressURL)((0, _config.getAccountAddressURL)()));
            dispatch((0, _results.setAccountInfoURL)((0, _config.getAccountInfoURL)()));
            dispatch((0, _results.setAccountURL)((0, _config.getDashboardURL)()));
            if (!customerData.guest) {
                dispatch((0, _results.setLoggedIn)(true));
                return utils.makeApiRequest('/customers/' + customerData.customer_id, { method: 'GET' }).then(function (response) {
                    return response.json();
                }).then(function (_ref3) {
                    var email = _ref3.email;

                    return dispatch((0, _results2.receiveUserEmail)(email));
                });
            }

            dispatch((0, _results.setLoggedIn)(false));
            return _promise2.default.resolve();
        });
    };
};