'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCategories = exports.getCategory = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('../utils');

var _results = require('../../../integration-manager/api/categories/results');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var makeCategoryURL = function makeCategoryURL(id) {
    return '/categories/' + id;
};
var makeCategoriesURL = function makeCategoriesURL(ids) {
    return '/categories/(' + ids.join(',') + ')';
};

/* eslint-disable camelcase, no-use-before-define */
var processCategory = function processCategory(pathKey, _ref) {
    var parent_category_id = _ref.parent_category_id,
        id = _ref.id,
        name = _ref.name,
        page_title = _ref.page_title,
        page_description = _ref.page_description,
        page_keywords = _ref.page_keywords;
    return function (dispatch) {
        var parentId = parent_category_id !== 'root' ? parent_category_id : null;

        dispatch((0, _results.receiveCategoryInformation)(pathKey, {
            id: id,
            title: name,
            href: pathKey,
            pageMeta: {
                title: page_title,
                description: page_description,
                keywords: page_keywords
            },
            parentId: parentId
        }));

        if (parentId) {
            dispatch(fetchCategoryInfo(parentId));
        }
    };
};
/* eslint-enable camelcase, no-use-before-define */

var fetchCategoryInfo = function fetchCategoryInfo(pathKey, id) {
    return function (dispatch) {
        if (id) {
            return (0, _utils.makeApiRequest)(makeCategoryURL(id), { method: 'GET' }).then(function (response) {
                return response.json();
            }).then(function (responseJSON) {
                return dispatch(processCategory(pathKey, responseJSON));
            });
        }
        return _promise2.default.resolve();
    };
};

var getCategory = exports.getCategory = function getCategory(id) {
    return function (dispatch) {
        return (0, _utils.makeApiRequest)(makeCategoryURL(id), { method: 'GET' }).then(function (response) {
            return response.json();
        }).then(function (responseJSON) {
            return dispatch(processCategory(id, responseJSON));
        });
    };
};

var getCategories = exports.getCategories = function getCategories(ids) {
    return function (dispatch) {
        // TODO: Build processor to handle results with multiple categories and dispatch
        // them in one call.
        return (0, _utils.makeApiRequest)(makeCategoriesURL(ids), { method: 'GET' }).then(function (response) {
            return response.json();
        }).then(function (responseJSON) {
            return dispatch(processCategory(ids, responseJSON));
        });
    };
};