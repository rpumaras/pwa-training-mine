'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseCurrency = exports.parsePageMeta = exports.parseOrdersResponse = exports.parseOrder = exports.parseFilterOptions = exports.parseWishlistProducts = exports.parseSearchSuggestions = exports.parseSortedProductKeys = exports.parseProductListData = exports.parseProductHit = exports.parseCategories = exports.getInitialSelectedVariant = exports.parseAddressResponse = exports.getCurrentProductID = exports.parseBasketContents = exports.parseProductDetails = exports.getProductHref = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _config = require('./config');

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var parseImages = function parseImages(imageGroups) {
    var largeImages = imageGroups.filter(function (imageGroup) {
        return imageGroup.view_type === 'large';
    })[0];

    return largeImages.images.map(function (_ref) {
        var alt = _ref.alt,
            link = _ref.link;
        return {
            alt: alt,
            src: link
        };
    });
};

/* eslint-disable camelcase */
var parseVariationCategories = function parseVariationCategories(variation_attributes) {
    return variation_attributes.map(function (_ref2) {
        var id = _ref2.id,
            name = _ref2.name,
            values = _ref2.values;
        return {
            id: id,
            name: id,
            label: name,
            values: values.map(function (_ref3) {
                var name = _ref3.name,
                    value = _ref3.value;
                return {
                    label: name,
                    value: value
                };
            })
        };
    });
};

var setInitialVariantValues = function setInitialVariantValues(variants, id, variationCategories) {
    var currentVariant = variants.find(function (_ref4) {
        var product_id = _ref4.product_id;
        return product_id === id;
    });

    if (currentVariant) {
        return currentVariant.variation_values;
    }

    var defaultVariant = {};
    variationCategories.forEach(function (_ref5) {
        var id = _ref5.id,
            values = _ref5.values;

        defaultVariant[id] = values[0].value;
    });

    return defaultVariant;
};

var getProductHref = exports.getProductHref = function getProductHref(productID) {
    return '/s/' + (0, _config.getSiteID)() + '/' + productID + '.html';
};

var parseProductDetails = exports.parseProductDetails = function parseProductDetails(_ref6) {
    var id = _ref6.id,
        name = _ref6.name,
        price = _ref6.price,
        inventory = _ref6.inventory,
        long_description = _ref6.long_description,
        page_title = _ref6.page_title,
        page_description = _ref6.page_description,
        page_keywords = _ref6.page_keywords,
        image_groups = _ref6.image_groups,
        variants = _ref6.variants,
        variation_attributes = _ref6.variation_attributes;

    var images = parseImages(image_groups);
    return {
        id: id,
        title: name,
        price: '' + price,
        description: long_description,
        pageMeta: {
            title: page_title,
            description: page_description,
            keywords: page_keywords || ''
        },
        available: inventory.orderable,
        thumbnail: images[0],
        images: images,
        initialValues: variants ? setInitialVariantValues(variants, id, variation_attributes) : {},
        variationCategories: variants ? parseVariationCategories(variation_attributes) : [],
        variants: variants ? variants.map(function (_ref7) {
            var product_id = _ref7.product_id,
                variation_values = _ref7.variation_values;

            return {
                id: product_id,
                values: variation_values
            };
        }) : []
    };
};

var parseBasketContents = exports.parseBasketContents = function parseBasketContents(_ref8) {
    var product_items = _ref8.product_items,
        product_sub_total = _ref8.product_sub_total,
        product_total = _ref8.product_total,
        order_total = _ref8.order_total;

    var summary_count = 0;
    var items = product_items ? product_items.map(function (_ref9) {
        var item_id = _ref9.item_id,
            product_name = _ref9.product_name,
            product_id = _ref9.product_id,
            base_price = _ref9.base_price,
            quantity = _ref9.quantity;

        summary_count += quantity;
        return {
            product_name: product_name,
            product_price: '' + base_price,
            product_image: {},
            qty: quantity,
            // item_id is different from product_id
            // it is used when updating the item in the cart
            // (delete item, update item qty etc)
            item_id: item_id,
            // product_id is used to describe which product the item is
            // (used to fetch product images, or build the product URL etc)
            product_id: product_id
        };
    }) : [];
    return {
        items: items,
        subtotal: '' + product_total,
        subtotal_excl_tax: '' + product_sub_total,
        summary_count: summary_count,
        orderTotal: '' + order_total
    };
};

/* eslint-enable camelcase */

var getCurrentProductID = exports.getCurrentProductID = function getCurrentProductID(url) {
    var productID = void 0;

    var productIDMatch = /\/([^/]+).html/.exec(url);

    if (productIDMatch) {
        productID = productIDMatch[1];
    }

    if (!productID) {
        // Cart edit style: https://.../checkout/cart/configure/id/{basket_id}/product_id/{product_id}/
        productIDMatch = /product_id\/(\d+)/.exec(url);
        productID = productIDMatch ? productIDMatch[1] : '';
    }

    console.log('[getCurrentProductID]', productID);
    return productID;
};

/* eslint-disable camelcase */
var parseAddressResponse = exports.parseAddressResponse = function parseAddressResponse(_ref10) {
    var first_name = _ref10.first_name,
        last_name = _ref10.last_name,
        phone = _ref10.phone,
        postal_code = _ref10.postal_code,
        address1 = _ref10.address1,
        address2 = _ref10.address2,
        city = _ref10.city,
        state_code = _ref10.state_code,
        preferred = _ref10.preferred,
        country_code = _ref10.country_code,
        address_id = _ref10.address_id;


    return {
        firstname: first_name,
        lastname: last_name ? last_name : '', // eslint-disable-line
        telephone: phone,
        postcode: postal_code,
        addressLine1: address1,
        addressLine2: address2,
        preferred: preferred,
        id: address_id,
        city: city,
        countryId: country_code.toUpperCase(),
        regionId: state_code,
        region: state_code,
        regionCode: state_code
    };
};
/* eslint-enable camelcase */

var getInitialSelectedVariant = exports.getInitialSelectedVariant = function getInitialSelectedVariant(variants, initialValues) {
    return variants.find(function (_ref11) {
        var values = _ref11.values;

        return (0, _keys2.default)(values).every(function (key) {
            return values[key] === initialValues[key];
        });
    });
};

var parseCategories = exports.parseCategories = function parseCategories(categories) {
    return categories.map(function (category) {
        return {
            title: category.name,
            path: (0, _config.getCategoryPath)(category.id),
            isCategoryLink: true,
            children: category.categories ? parseCategories(category.categories) : []
        };
    });
};

/* eslint-disable camelcase */
var parseProductHit = exports.parseProductHit = function parseProductHit(_ref12) {
    var product_id = _ref12.product_id,
        product_name = _ref12.product_name,
        price = _ref12.price,
        prices = _ref12.prices,
        orderable = _ref12.orderable,
        image = _ref12.image;

    // Some products don't have _any_ pricing on them!
    var finalPrice = price || prices && prices['usd-sale-prices'] || undefined;
    var thumbnail = image ? {
        alt: image.alt,
        src: image.link
    } : undefined;

    return {
        id: product_id,
        title: product_name,
        price: '' + (finalPrice ? finalPrice : ' N/A'),
        available: orderable,
        href: getProductHref(product_id),
        thumbnail: thumbnail,
        images: [thumbnail]
    };
};
/* eslint-enable camelcase */

var parseProductListData = exports.parseProductListData = function parseProductListData(products) {
    var productListData = {};

    products.forEach(function (productHit) {
        productListData[productHit.product_id] = parseProductHit(productHit);
    });
    return productListData;
};

var parseSortedProductKeys = exports.parseSortedProductKeys = function parseSortedProductKeys(products) {
    var sortedProductKeys = [];

    products.forEach(function (productHit) {
        sortedProductKeys.push(productHit.product_id);
    });
    return sortedProductKeys;
};

var parseSearchSuggestions = exports.parseSearchSuggestions = function parseSearchSuggestions(_ref13) {
    var products = _ref13.product_suggestions.products;

    if (!products) {
        return [];
    }

    var suggestions = products.map(function (suggestion) {
        var productIdMatch = suggestion.link.match(/products\/(.*?)\?/);
        var productId = productIdMatch ? productIdMatch[1] : '';

        return {
            href: getProductHref(productId),
            children: suggestion.product_name
        };
    });

    return suggestions;
};

var parseWishlistProducts = exports.parseWishlistProducts = function parseWishlistProducts(wishlistData) {
    if (wishlistData.customer_product_list_items) {
        return wishlistData.customer_product_list_items.map(function (wishlistItem) {
            var productId = wishlistItem.product_id;
            return {
                productId: productId,
                quantity: wishlistItem.quantity,
                itemId: wishlistItem.id
            };
        });
    }
    return [];
};

var parseFilterOptions = exports.parseFilterOptions = function parseFilterOptions(refinements) {
    return refinements.reduce(function (filters, filter) {
        if (filter.attribute_id !== 'cgid' && filter.values) {
            var uniqueKey = 0;
            var ruleset = filter.attribute_id;

            var kinds = filter.values.map(function (kind) {
                return {
                    count: kind.hit_count,
                    label: kind.label,
                    query: kind.presentation_id ? kind.presentation_id : '' + uniqueKey++,
                    ruleset: filter.label,
                    searchKey: ruleset + '=' + kind.value
                };
            });

            filters.push({
                label: filter.label,
                ruleset: ruleset,
                kinds: kinds
            });
        }
        return filters;
    }, []);
};

var getOrderStatus = function getOrderStatus(order) {
    if (order.status === 'cancelled') {
        return (0, _utils.stringToTitleCase)(order.status);
    }

    if (order.shipping_status === 'shipped') {
        return (0, _utils.stringToTitleCase)(order.shipping_status);
    }

    return 'Being Processed';
};

/* eslint-disable camelcase */
var getPaymentMethod = function getPaymentMethod(paymentInstruments) {
    return paymentInstruments.map(function (_ref14) {
        var _ref14$payment_card = _ref14.payment_card,
            card_type = _ref14$payment_card.card_type,
            masked_number = _ref14$payment_card.masked_number;

        return card_type + ' ' + masked_number;
    });
};

var parseOrder = exports.parseOrder = function parseOrder(order) {
    var order_no = order.order_no,
        creation_date = order.creation_date,
        order_total = order.order_total,
        tax_total = order.tax_total,
        shipping_total = order.shipping_total,
        shipping_total_tax = order.shipping_total_tax,
        product_sub_total = order.product_sub_total,
        billing_address = order.billing_address,
        product_items = order.product_items,
        _order$shipments = (0, _slicedToArray3.default)(order.shipments, 1),
        _order$shipments$ = _order$shipments[0],
        shipping_method = _order$shipments$.shipping_method,
        shipping_address = _order$shipments$.shipping_address,
        payment_instruments = order.payment_instruments;

    return (0, _defineProperty3.default)({}, order_no, {
        orderNumber: order_no,
        date: new Date(creation_date).toLocaleDateString(),
        status: getOrderStatus(order),
        total: '' + order_total,
        tax: '' + tax_total,
        shippingTotal: '' + (shipping_total + shipping_total_tax),
        subtotal: '' + product_sub_total,
        paymentMethods: getPaymentMethod(payment_instruments),
        shippingMethod: shipping_method.name + ': ' + shipping_method.description,
        shippingAddress: parseAddressResponse(shipping_address),
        billingAddress: parseAddressResponse(billing_address),
        items: product_items.map(function (_ref15) {
            var item_text = _ref15.item_text,
                product_id = _ref15.product_id,
                quantity = _ref15.quantity,
                price = _ref15.price;

            return {
                itemName: item_text,
                price: '' + price,
                quantity: '' + quantity,
                productId: product_id
            };
        })
    });
};
/* eslint-enable camelcase */

/* eslint-disable camelcase */
var parseOrdersResponse = exports.parseOrdersResponse = function parseOrdersResponse(_ref17) {
    var data = _ref17.data;

    var ordersMap = {};
    data && data.forEach(function (order) {
        var order_no = order.order_no,
            creation_date = order.creation_date,
            customer_info = order.customer_info,
            order_total = order.order_total;


        ordersMap[order_no] = {
            orderNumber: order_no,
            pageMeta: {
                title: 'Order Number: ' + order_no,
                description: '',
                keywords: ''
            },
            date: new Date(creation_date).toLocaleDateString(),
            shippingAddress: {
                fullName: customer_info.customer_name
            },
            total: '' + order_total,
            status: getOrderStatus(order)
        };
    });

    return ordersMap;
};
/* eslint-enable camelcase */

var parsePageMeta = exports.parsePageMeta = function parsePageMeta(contentData) {
    return {
        pageMeta: {
            title: contentData.page_title,
            description: contentData.page_description,
            keywords: contentData.page_keywords
        }
    };
};

var currencyFormats = {
    USD: {
        label: 'Dollar',
        code: 'USD',
        symbol: '$'
    }
};

var parseCurrency = exports.parseCurrency = function parseCurrency(code) {
    if (code in currencyFormats) {
        return currencyFormats[code];
    } else {
        return currencyFormats.USD;
    }
};