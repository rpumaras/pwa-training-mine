'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchSavedShippingAddresses = exports.updateShippingAndBilling = exports.submitPayment = exports.submitShipping = exports.initCheckoutPaymentPage = exports.initCheckoutConfirmationPage = exports.initCheckoutShippingPage = exports.fetchShippingMethodsEstimate = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _utils = require('../cart/utils');

var _config = require('../config');

var _utils2 = require('../utils');

var _parsers = require('../parsers');

var _results = require('../../../integration-manager/api/checkout/results');

var _utils3 = require('./utils');

var _parsers2 = require('./parsers');

var _utils4 = require('../../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import {fetchAddressData} from '../account/commands'

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var fetchShippingMethodsEstimate = exports.fetchShippingMethodsEstimate = _utils4.notImplementedCommand;

// export const fetchShippingMethodsEstimate = (inputAddress = {}) => (dispatch, getState) => {
//     const selectedShippingMethodId = getSelectedShippingMethodValue(getState())
//     return createBasket()
//         .then((basket) => makeApiRequest(`/baskets/${basket.basket_id}/shipments/me/shipping_methods`, {method: 'GET'}))
//         .then((response) => response.json())
//         .then((basket) => dispatch(updateExpiredCart(basket)))
//         .then(({applicable_shipping_methods}) => {
//             const shippingMethods = applicable_shipping_methods
//                   .map(({name, description, price, id}) => ({
//                       label: `${name} - ${description}`,
//                       cost: `${price}`,
//                       id
//                   }))

//             dispatch(receiveShippingAddress({
//                 ...inputAddress
//             })) // set initial values for the shipping form
//             dispatch(receiveSelectedShippingMethod(selectedShippingMethodId || shippingMethods[0].id))
//             return dispatch(receiveShippingMethods(shippingMethods))
//         })
// }

// import {getOrderTotal} from 'progressive-web-sdk/dist/store/cart/selectors'
// import {receiveOrderConfirmationContents} from '../../../integration-manager/results'
// import {getCardData} from 'progressive-web-sdk/dist/card-utils'

// import {getSelectedShippingMethodValue} from '../../../store/checkout/shipping/selectors'

var initCheckoutShippingPage = exports.initCheckoutShippingPage = _utils4.notImplementedCommand;

// export const initCheckoutShippingPage = () => (dispatch) => {
//     const gettingSavedAddress = dispatch(fetchAddressData())

//     const gettingCartData = requestCartData()
//         .then((basket) => dispatch(updateExpiredCart(basket)))
//         .then((basket) => {
//             const {
//                 customer_info: {
//                     email
//                 },
//                 shipments: [{
//                     shipping_address,
//                     shipping_method
//                 }]
//             } = basket

//             // Ensure required properties for Address runtype are present
//             let initialValues = {
//                 countryId: 'us',
//                 name: '',
//                 firstname: '',
//                 lastname: '',
//                 addressLine1: '',
//                 postcode: '',
//                 telephone: '',
//                 city: ''
//             }

//             /* eslint-disable camelcase */
//             if (shipping_address) {
//                 initialValues = {
//                     ...initialValues,
//                     username: email,
//                     name: shipping_address.full_name,
//                     firstname: shipping_address.first_name,
//                     lastname: shipping_address.last_name,
//                     company: shipping_address.company_name,
//                     addressLine1: shipping_address.address1,
//                     addressLine2: shipping_address.address2,
//                     countryId: shipping_address.country_code,
//                     city: shipping_address.city,
//                     regionId: shipping_address.state_code,
//                     postcode: shipping_address.postal_code,
//                     telephone: shipping_address.phone
//                 }
//             }

//             dispatch(receiveSelectedShippingMethod(shipping_method ? shipping_method.id : undefined))
//             /* eslint-enable camelcase */
//             dispatch(receiveShippingAddress(initialValues))
//             dispatch(populateLocationsData())
//             return initialValues
//         })
//         .then((initialValues) => dispatch(fetchShippingMethodsEstimate(initialValues)))

//     const gettingPageMeta = requestContentById(CHECKOUT_SHIPPING_CONTENT_ID)
//         .then((resJSON) => {
//             dispatch(receiveCheckoutPageMeta(parsePageMeta(resJSON).pageMeta))
//         })

//     return Promise.all([gettingSavedAddress, gettingCartData, gettingPageMeta])
// }

var initCheckoutConfirmationPage = exports.initCheckoutConfirmationPage = function initCheckoutConfirmationPage() {
    return function (dispatch) {
        return (0, _utils2.requestContentById)(_config.CHECKOUT_CONFIRMATION_CONTENT_ID).then(function (resJSON) {
            dispatch((0, _results.receiveCheckoutPageMeta)((0, _parsers.parsePageMeta)(resJSON).pageMeta));
        });
    };
};

var initCheckoutPaymentPage = exports.initCheckoutPaymentPage = function initCheckoutPaymentPage() {
    return function (dispatch) {
        dispatch((0, _utils3.populateLocationsData)());
        var gettingPaymentData = (0, _utils.requestCartData)().then(function (basket) {
            return dispatch((0, _utils.updateExpiredCart)(basket));
        }).then(function (basket) {
            var shippingMethod = basket.shipments[0].shipping_method;
            var addressData = (0, _parsers2.parseShippingAddressFromBasket)(basket);

            dispatch((0, _results.receiveSelectedShippingMethod)(shippingMethod ? shippingMethod.id : undefined));
            dispatch((0, _results.receiveShippingAddress)(addressData));
            dispatch((0, _results.receiveBillingSameAsShipping)(true));
            dispatch((0, _results.receiveBillingAddress)(addressData));
        });
        var gettingPageMeta = (0, _utils2.requestContentById)(_config.CHECKOUT_PAYMENT_CONTENT_ID).then(function (resJSON) {
            dispatch((0, _results.receiveCheckoutPageMeta)((0, _parsers.parsePageMeta)(resJSON).pageMeta));
        });
        return _promise2.default.all([gettingPaymentData, gettingPageMeta]);
    };
};

var setCustomerNameAndEmail = function setCustomerNameAndEmail(formValues, basket) {
    return function () {
        var customerID = (0, _utils2.getCustomerID)();
        var requestBody = {
            email: formValues.username,
            customer_name: formValues.name,
            customer_id: customerID
        };

        return (0, _utils2.makeApiJsonRequest)('/baskets/' + basket.basket_id + '/customer', requestBody, { method: 'PUT' });
    };
};

var setShippingAddress = function setShippingAddress(formValues, basket) {
    return function () {
        return (0, _utils2.makeApiJsonRequest)('/baskets/' + basket.basket_id + '/shipments/me/shipping_address?use_as_billing=true', (0, _utils3.createOrderAddressObject)(formValues), { method: 'PUT' }).then(_utils2.checkForResponseFault);
    };
};

var setShippingMethod = function setShippingMethod(formValues, basket) {
    return function () {
        return (0, _utils2.makeApiJsonRequest)('/baskets/' + basket.basket_id + '/shipments/me/shipping_method', { id: formValues.shippingMethodId }, { method: 'PUT' }).then(_utils2.checkForResponseFault);
    };
};

var submitShipping = exports.submitShipping = function submitShipping(formValues) {
    return function (dispatch) {
        return (0, _utils.createBasket)().then(function (basket) {
            return dispatch(setCustomerNameAndEmail(formValues, basket));
        }).then(function (basket) {
            return dispatch((0, _utils.updateExpiredCart)(basket));
        }).then(function (basket) {
            return dispatch(setShippingAddress(formValues, basket));
        }).then(function (basket) {
            return dispatch(setShippingMethod(formValues, basket));
        }).catch(function (error) {
            if (error.message.includes('expired')) {
                throw error;
            }
            throw new Error({ _error: 'Unable to save shipping data' });
        }).then(function (basket) {
            dispatch((0, _utils.handleCartData)(basket));
            return (0, _config.getPaymentURL)();
        });
    };
};

// const addPaymentMethod = (formValues, basket) => (dispatch, getState) => {
//     const orderTotal = getOrderTotal(getState())
//     const type = getCardData(formValues.ccnumber).cardType
//     const amount = parseFloat(orderTotal)
//     const requestBody = {
//         amount,
//         payment_method_id: 'CREDIT_CARD',
//         payment_card: {
//             card_type: type
//         }
//     }

//     return makeApiJsonRequest(
//         `/baskets/${basket.basket_id}/payment_instruments`,
//         requestBody,
//         {method: 'POST'}
//     )
// }

// const setBillingAddress = (formValues, basket) => () => {
//     if (formValues.billingSameAsShipping) {
//         // No change to the address is necessary
//         return Promise.resolve(basket)
//     }

//     // set billing address
//     return makeApiJsonRequest(
//         `/baskets/${basket.basket_id}/billing_address?use_as_shipping=false`,
//         createOrderAddressObject(formValues),
//         {method: 'PUT'}
//     )
//     .then(checkForResponseFault)
// }

// const createOrder = (basket) => () => makeApiJsonRequest('/orders', basket, {method: 'POST'})

// const setPaymentMethod = (formValues, order) => () => {
//    // set payment method
//     const type = getCardData(formValues.ccnumber).cardType
//     const expiryMonth = /^\d\d/.exec(formValues.ccexpiry)[0]
//     const expiryYear = /\d\d$/.exec(formValues.ccexpiry)[0]
//     const paymentInstrumentID = order.payment_instruments[0].payment_instrument_id
//     const requestBody = {
//         payment_card: {
//             card_type: type,
//             expiration_month: parseInt(expiryMonth),
//             expiration_year: 2000 + parseInt(expiryYear),
//             holder: formValues.ccname,
//             number: formValues.ccnumber,
//             security_code: formValues.cvv
//         },
//         payment_method_id: 'CREDIT_CARD'
//     }

//     return makeApiJsonRequest(
//         `/orders/${order.order_no}/payment_instruments/${paymentInstrumentID}`,
//         requestBody,
//         {method: 'PATCH'}
//     )
// }

var submitPayment = exports.submitPayment = _utils4.notImplementedCommand;
// export const submitPayment = (formValues) => (dispatch) => {
//     return createBasket()
//         .then((basket) => dispatch(addPaymentMethod(formValues, basket)))
//         .then((basket) => dispatch(updateExpiredCart(basket)))
//         .then((basket) => dispatch(setBillingAddress(formValues, basket)))
//         .then((basket) => dispatch(createOrder(basket)))
//         .then((order) => dispatch(setPaymentMethod(formValues, order)))
//         .then((order) => {
//             dispatch(receiveOrderConfirmationContents({
//                 orderNumber: order.order_no
//             }))
//             // The new basket data isn't required for the confirmation page,
//             // so we can return the URL without waiting for this to complete
//             dispatch(createNewBasket())

//             return getConfirmationURL()
//         })
// }

var updateShippingAndBilling = exports.updateShippingAndBilling = function updateShippingAndBilling() {
    return function () {
        return _promise2.default.resolve();
    };
};

var fetchSavedShippingAddresses = exports.fetchSavedShippingAddresses = function fetchSavedShippingAddresses() {
    return function () {
        return _promise2.default.resolve();
    };
};