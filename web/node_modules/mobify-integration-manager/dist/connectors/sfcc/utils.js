'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchItemData = exports.makeUnAuthenticatedApiRequest = exports.checkForResponseFault = exports.requestContentById = exports.makeApiJsonRequest = exports.makeApiRequest = exports.isUserLoggedIn = exports.getCustomerID = exports.getCustomerData = exports.getAuthTokenPayload = exports.storeBasketID = exports.getBasketID = exports.deleteBasketID = exports.deleteAuthToken = exports.getAuthToken = exports.storeAuthToken = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _atob = require('atob');

var _atob2 = _interopRequireDefault(_atob);

var _fetchUtils = require('progressive-web-sdk/dist/utils/fetch-utils');

var _selectors = require('progressive-web-sdk/dist/store/products/selectors');

var _storage = require('../../utils/storage');

var _parsers = require('./parsers');

var _config = require('./config');

var _session = require('./session');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AUTH_KEY_NAME = 'mob-auth'; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var BASKET_KEY_NAME = 'mob-basket';

var storeAuthToken = exports.storeAuthToken = function storeAuthToken(authorization) {
    if (authorization) {
        (0, _storage.getStorage)().set(AUTH_KEY_NAME, authorization);
    }
};

var getAuthToken = exports.getAuthToken = function getAuthToken() {
    return (0, _storage.getStorage)().get(AUTH_KEY_NAME);
};

var deleteAuthToken = exports.deleteAuthToken = function deleteAuthToken() {
    (0, _storage.getStorage)().remove(AUTH_KEY_NAME);
};

var deleteBasketID = exports.deleteBasketID = function deleteBasketID() {
    (0, _storage.getStorage)().remove(BASKET_KEY_NAME);
};

var getBasketID = exports.getBasketID = function getBasketID() {
    return (0, _storage.getStorage)().get(BASKET_KEY_NAME);
};

var storeBasketID = exports.storeBasketID = function storeBasketID(basketID) {
    if (basketID === undefined) {
        throw new Error('Storing basketID that is undefined!!');
    }

    (0, _storage.getStorage)().set(BASKET_KEY_NAME, basketID);
};

var getAuthTokenPayload = exports.getAuthTokenPayload = function getAuthTokenPayload(authToken) {
    if (!authToken) {
        authToken = getAuthToken().replace('Bearer ', '');
    }
    // The token consists of 3 parts: header, payload and signature
    // separated by a '.', each part is encoded
    // we only need the payload
    return JSON.parse((0, _atob2.default)(authToken.split('.')[1]));
};

var getCustomerData = exports.getCustomerData = function getCustomerData(authorization) {
    var _getAuthTokenPayload = getAuthTokenPayload(authorization),
        sub = _getAuthTokenPayload.sub;

    var subData = JSON.parse(sub);
    return subData.customer_info;
};

var getCustomerID = exports.getCustomerID = function getCustomerID() {
    return getCustomerData().customer_id;
};

var isUserLoggedIn = exports.isUserLoggedIn = function isUserLoggedIn(authorization) {
    try {
        return !getCustomerData(authorization).guest;
    } catch (e) {
        console.log('Error checking if user is logged in. Assuming `false`', e);
        return false;
    }
};

var makeApiRequest = exports.makeApiRequest = function makeApiRequest(path, options) {
    return (0, _session.initSfccAuthAndSession)().then(function (headers) {
        var requestOptions = (0, _extends3.default)({}, options, {
            headers: headers
        });
        return (0, _fetchUtils.makeRequest)((0, _config.getApiEndPoint)() + path, requestOptions);
    });
};

var makeApiJsonRequest = exports.makeApiJsonRequest = function makeApiJsonRequest(path, body, options) {
    return makeApiRequest(path, (0, _extends3.default)({}, options, {
        body: (0, _stringify2.default)(body)
    })).then(function (response) {
        return response.json();
    });
};

var requestContentById = exports.requestContentById = function requestContentById(id) {
    return makeApiRequest('/content/' + id, { method: 'GET' }).then(function (res) {
        return res.json();
    });
};

var checkForResponseFault = exports.checkForResponseFault = function checkForResponseFault(responseJSON) {
    if (responseJSON.fault) {
        throw new Error(responseJSON.fault.message);
    }
    return responseJSON;
};

var makeUnAuthenticatedApiRequest = exports.makeUnAuthenticatedApiRequest = function makeUnAuthenticatedApiRequest(path, options) {
    var requestOptions = (0, _extends3.default)({}, options, {
        headers: (0, _config.getRequestHeaders)()
    });
    return (0, _fetchUtils.makeRequest)((0, _config.getApiEndPoint)() + path, requestOptions);
};

var imageFromJson = function imageFromJson(imageJson, name, description) {
    return {
        /* Image */
        src: imageJson.link,
        alt: name + ' - ' + description,
        caption: imageJson.title
    };
};

var fetchItemData = exports.fetchItemData = function fetchItemData(items) {
    return function (dispatch, getState) {
        /* TODO: The `view_type` is configurable per instance. This is something that
        *       might have to be configurable in the connector to say what `view_type`
        *       is a thumbnail and which one is the large image type. */
        var thumbnailViewType = 'medium';
        var largeViewType = 'large';
        var updatedProducts = {};
        var updatedCartItems = [];
        return _promise2.default.all(items.map(function (cartItem) {
            var productId = cartItem.productId || cartItem.id;
            return makeApiRequest('/products/' + productId + '?expand=images,prices,variations&all_images=false&view_type=' + largeViewType + ',' + thumbnailViewType, { method: 'GET' }).then(function (response) {
                return response.json();
            }).then(function (responseJSON) {
                var productHref = (0, _parsers.getProductHref)(productId);
                var productState = (0, _selectors.getProductById)(productId)(getState()).toJS();
                var options = responseJSON.variation_values ? responseJSON.variation_attributes.map(function (attribute) {
                    // eslint-disable-line
                    var selectedId = responseJSON.variation_values[attribute.id];
                    var selectedVariant = attribute.values.find(function (val) {
                        return val.value === selectedId;
                    }); // eslint-disable-line

                    return {
                        label: attribute.name,
                        value: selectedVariant.name
                    };
                }) : [];

                var product = (0, _extends3.default)({}, productState, {
                    id: productId,
                    title: responseJSON.page_title,
                    available: true,
                    href: productHref,
                    price: '' + (productState.price || responseJSON.price)
                });

                var thumbnail = responseJSON.image_groups.find(function (group) {
                    return group.view_type === thumbnailViewType;
                });
                if (thumbnail) {
                    product.thumbnail = imageFromJson(thumbnail.images[0], name, responseJSON.short_description);
                }
                var largeGroup = responseJSON.image_groups.find(function (group) {
                    return group.view_type === largeViewType;
                });
                if (largeGroup) {
                    product.images = largeGroup.images.map(function (image) {
                        return imageFromJson(image, name, responseJSON.short_description);
                    });
                }

                updatedProducts[productId] = product;

                updatedCartItems.push((0, _extends3.default)({}, cartItem, {
                    options: options,
                    thumbnail: product.thumbnail,
                    title: product.title
                }));
            });
        })).then(function () {
            return { updatedProducts: updatedProducts, updatedCartItems: updatedCartItems };
        });
    };
};