'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseProductSearch = exports.parseProductSearchSelectedFilters = exports.parseProductSearchFilters = exports.parseProductSearchHit = exports.parseProductImage = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable camelcase, no-use-before-define */

var parseProductImage = exports.parseProductImage = function parseProductImage(image) {
    return image;
};

var parseProductSearchHit = exports.parseProductSearchHit = function parseProductSearchHit(_ref) {
    var product_id = _ref.product_id,
        product_name = _ref.product_name,
        link = _ref.link,
        image = _ref.image,
        orderable = _ref.orderable,
        price = _ref.price;


    return {
        available: orderable,
        productId: product_id,
        productName: product_name,
        link: link,
        image: parseProductImage(image),
        price: price
    };
};

var parseProductSearchFilters = exports.parseProductSearchFilters = function parseProductSearchFilters(_ref2) {
    var label = _ref2.label,
        attribute_id = _ref2.attribute_id,
        _ref2$values = _ref2.values,
        values = _ref2$values === undefined ? [] : _ref2$values;

    return {
        label: label,
        ruleset: attribute_id,
        kinds: values.map(function (_ref3) {
            var label = _ref3.label,
                hit_count = _ref3.hit_count,
                value = _ref3.value;
            return {
                label: label,
                count: hit_count,
                searchKey: value,
                query: value
            };
        })
    };
};

var parseProductSearchSelectedFilters = exports.parseProductSearchSelectedFilters = function parseProductSearchSelectedFilters() {
    var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var selectedFilters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


    return (0, _keys2.default)(selectedFilters).map(function (key) {
        var filter = filters.find(function (filter) {
            return filter.attribute_id === key;
        });

        if (!filter) {
            return false;
        }

        var values = filter.values || [];
        var value = values.find(function (value) {
            return value.value === selectedFilters[key];
        });

        return {
            label: value ? value.label : filter.label,
            query: key + '=' + selectedFilters[key],
            ruleset: filter.label
        };
    }).filter(function (filter) {
        return !!filter;
    });
};

// TODO: Parse the hit's in to products and parse all other relavent information.
var parseProductSearch = exports.parseProductSearch = function parseProductSearch(_ref4) {
    var _ref4$hits = _ref4.hits,
        hits = _ref4$hits === undefined ? [] : _ref4$hits,
        count = _ref4.count,
        start = _ref4.start,
        total = _ref4.total,
        query = _ref4.query,
        sorting_options = _ref4.sorting_options,
        selected_sorting_option = _ref4.selected_sorting_option,
        _ref4$refinements = _ref4.refinements,
        refinements = _ref4$refinements === undefined ? [] : _ref4$refinements,
        selected_refinements = _ref4.selected_refinements;

    var result = {
        products: hits.map(function (hit) {
            return parseProductSearchHit(hit);
        }),
        query: query || '',
        count: count,
        start: start,
        total: total,
        filters: refinements.map(function (refinement) {
            return parseProductSearchFilters(refinement);
        }),
        selectedFilters: parseProductSearchSelectedFilters(refinements, selected_refinements),
        sortingOptions: sorting_options,
        selectedSortingOption: selected_sorting_option
    };

    return result;
};
/* eslint-enable camelcase, no-use-before-define */