'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setCustomContent = exports.mergePayloadSkipList = exports.skipListsMerger = exports.mergePayload = undefined;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mergePayload = exports.mergePayload = function mergePayload(state, _ref) {
    var payload = _ref.payload;
    return state.mergeDeep(payload);
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var isList = _immutable2.default.List.isList;
// Ensures the new list is always used when merging Maps that contain lists
// Otherwise we would end up with something like this:
// for a = {test: [1, 2, 3]}, b = {test: [1, 2]}
// a.mergeDeep(b) => {test: [1, 2, 3]}
// When we want it to return {test: [1, 2]} (ie. delete the third item)
// Based on: https://github.com/facebook/immutable-js/issues/762
var skipListsMerger = exports.skipListsMerger = function skipListsMerger(a, b) {
    if (a && a.mergeWith && !isList(a) && !isList(b)) {
        return a.mergeWith(skipListsMerger, b);
    }
    return b;
};

var mergePayloadSkipList = exports.mergePayloadSkipList = function mergePayloadSkipList(state, _ref2) {
    var payload = _ref2.payload;
    return state.mergeWith(skipListsMerger, payload);
};

var setCustomContent = exports.setCustomContent = function setCustomContent() {
    for (var _len = arguments.length, customPath = Array(_len), _key = 0; _key < _len; _key++) {
        customPath[_key] = arguments[_key];
    }

    return function (state, _ref3) {
        var payload = _ref3.payload;
        return state.setIn([].concat(customPath, ['custom']), payload);
    };
};