'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStorage = undefined;

var _storeEngine = require('store/src/store-engine');

var _storeEngine2 = _interopRequireDefault(_storeEngine);

var _sessionStorage = require('store/storages/sessionStorage');

var _sessionStorage2 = _interopRequireDefault(_sessionStorage);

var _localStorage = require('store/storages/localStorage');

var _localStorage2 = _interopRequireDefault(_localStorage);

var _memoryStorage = require('store/storages/memoryStorage');

var _memoryStorage2 = _interopRequireDefault(_memoryStorage);

var _expire = require('store/plugins/expire');

var _expire2 = _interopRequireDefault(_expire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var store = _storeEngine2.default.createStore([_sessionStorage2.default, _localStorage2.default, _memoryStorage2.default], [_expire2.default]);

/**
 * Provides central access to "browser" storage. Uses the `store`
 * npm package to provide sensible fallbacks all the way to
 * in-memory (non-durable) storage for severely constrained
 * environments (like Safari Private Browsing).
 */
// Fallback for crazy environments like Safari Incognito
var getStorage = exports.getStorage = function getStorage() {
  return store;
};