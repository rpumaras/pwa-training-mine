'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProducts = exports.getProduct = exports.addItemToWishlist = exports.getProductVariantData = exports.initProductDetailsPage = exports.register = undefined;

var _dataObjects = require('progressive-web-sdk/dist/analytics/data-objects/');

var _actions = require('progressive-web-sdk/dist/analytics/actions');

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var connector = {};

var register = exports.register = function register(commands) {
  connector = commands;
};

/**
 * Initializes any required data for the Product Details page
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 */
var initProductDetailsPage = exports.initProductDetailsPage = function initProductDetailsPage(url, routeName) {
  return function (dispatch) {
    console.warn('[Integration Manager] ⚠️ Deprecation warning: initProductDetailsPage will be removed in a future release.');
    return dispatch(connector.initProductDetailsPage(url, routeName)).then(function () {
      dispatch((0, _actions.sendProductDetailAnalytics)(routeName));
    });
  };
};

/**
 * Called when the user selects a product variation. This provides a
 * hook so that the connector can take some action if needed.
 * @function
 * @param {object} variationSelections The user's product variation selections
 * @param {object} variants The list of product variants
 * @param {object} categoryIds The list of product variation category IDs
 */
var getProductVariantData = exports.getProductVariantData = function getProductVariantData(variationSelections, variants, categoryIds) {
  return connector.getProductVariantData(variationSelections, variants, categoryIds);
};

/**
 * Add a product to the wishlist
 * @function
 * @param productId {string} The product's ID
 * @param productURL {string} The URL of the product's detail page
 * @param quantity {string} The quantity of items being added to the wishlist
 */
var addItemToWishlist = exports.addItemToWishlist = function addItemToWishlist(productId, productURL, quantity) {
  return function (dispatch, getState) {
    return dispatch(connector.addItemToWishlist(productId, productURL, quantity)).then(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (0, _actions.dispatchWishlistAnalytics)(_dataObjects.EVENT_ACTION.addToWishlist, dispatch, getState, productId, quantity);
      return args;
    });
  };
};

/**
 * Returns a product model for the given product ids
 * @function
 * @param {String} id The id of the Product you want to get
 * @return {Object} a {@link module:models/Product}
 */
var getProduct = exports.getProduct = function getProduct(id, opts) {
  return connector.getProduct(id, opts);
};

/**
 * Returns a list of category models for the given product ids
 * @function
 * @param {Array.<String>} ids An array of ids of the Products you want to get
 * @return {Object} a {@link module:models/Product}
 */
var getProducts = exports.getProducts = function getProducts(ids, opts) {
  return connector.getProducts(ids, opts);
};