'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.receiveBillingAddressCustomContent = exports.receiveShippingAddressCustomContent = exports.receiveLocationsCustomContent = exports.receiveSelectedShippingMethod = exports.receiveUserEmail = exports.receiveCheckoutConfirmationData = exports.realReceiveCheckoutConfirmationData = exports.clearShippingAddress = exports.receiveBillingSameAsShipping = exports.setDefaultShippingAddressId = exports.receiveCheckoutCustomContent = exports.receiveCheckoutPageMeta = exports.receiveHasExistingCard = exports.receiveBillingAddress = exports.receiveShippingAddress = exports.receiveShippingMethods = exports.receiveCheckoutLocations = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _runtypes = require('runtypes');

var Runtypes = _interopRequireWildcard(_runtypes);

var _actionCreation = require('progressive-web-sdk/dist/utils/action-creation');

var _dataObjects = require('progressive-web-sdk/dist/analytics/data-objects/');

var _selectors = require('progressive-web-sdk/dist/store/cart/selectors');

var _types = require('./types');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var receiveCheckoutLocations = exports.receiveCheckoutLocations = (0, _actionCreation.createTypedAction)('Receive Checkout Locations', _types.LocationList, 'locations'); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var receiveShippingMethods = exports.receiveShippingMethods = (0, _actionCreation.createTypedAction)('Receive Shipping Methods', _types.ShippingMethods);
var receiveShippingAddress = exports.receiveShippingAddress = (0, _actionCreation.createTypedAction)('Receive Shipping Address', _types.Address, 'shippingAddress');
var receiveBillingAddress = exports.receiveBillingAddress = (0, _actionCreation.createTypedAction)('Receive Billing Address', _types.Address, 'billingAddress');
var receiveHasExistingCard = exports.receiveHasExistingCard = (0, _actionCreation.createTypedAction)('Receive Has Existing Cart flag', Runtypes.Boolean, 'hasExistingCreditCard');

var receiveCheckoutPageMeta = exports.receiveCheckoutPageMeta = (0, _actionCreation.createAction)('Receive Checkout Page Meta', ['pageMeta']);
var receiveCheckoutCustomContent = exports.receiveCheckoutCustomContent = (0, _actionCreation.createAction)('Receive Checkout Custom Content', ['custom']);
var setDefaultShippingAddressId = exports.setDefaultShippingAddressId = (0, _actionCreation.createAction)('Receive default shipping address ID', ['defaultShippingAddressId']);
var receiveBillingSameAsShipping = exports.receiveBillingSameAsShipping = (0, _actionCreation.createAction)('Receive Billing same as Shipping', ['billingSameAsShipping']);
var clearShippingAddress = exports.clearShippingAddress = (0, _actionCreation.createAction)('Clear Shipping Address');

var remapProducts = function remapProducts(products) {
    var mappedProducts = [];
    products.forEach(function (product) {
        var _mappedProducts$push;

        var detail = 'product' in product ? product.product : product;
        mappedProducts.push((_mappedProducts$push = {}, (0, _defineProperty3.default)(_mappedProducts$push, _dataObjects.Product.ID, detail.id), (0, _defineProperty3.default)(_mappedProducts$push, _dataObjects.Product.NAME, detail.title), (0, _defineProperty3.default)(_mappedProducts$push, _dataObjects.Product.PRICE, detail.price), (0, _defineProperty3.default)(_mappedProducts$push, _dataObjects.Product.QUANTITY, product.quantity), _mappedProducts$push));
    });
    return mappedProducts;
};

var realReceiveCheckoutConfirmationData = exports.realReceiveCheckoutConfirmationData = (0, _actionCreation.createActionWithAnalytics)('Receive Checkout Confirmation Data', ['confirmationData'], _dataObjects.EVENT_ACTION.purchase, function (confirmationData, purchaseData) {
    var _ref;

    return new _dataObjects.Transaction((_ref = {}, (0, _defineProperty3.default)(_ref, _dataObjects.Transaction.ID, confirmationData.orderNumber), (0, _defineProperty3.default)(_ref, _dataObjects.Transaction.REVENUE, purchaseData[_dataObjects.Transaction.REVENUE]), (0, _defineProperty3.default)(_ref, _dataObjects.Transaction.TAX, purchaseData[_dataObjects.Transaction.TAX]), _ref), purchaseData.products);
});

// This is a proxy action to get state information before dispatching the real intended action
// The idea here is that we obtain the data in the state using selectors so that is can be
// used to build out the analytic data required for analytic manager
var receiveCheckoutConfirmationData = exports.receiveCheckoutConfirmationData = function receiveCheckoutConfirmationData(confirmationData) {
    return function (dispatch, getState) {
        var _realReceiveCheckoutC;

        var currentState = getState();
        return dispatch(realReceiveCheckoutConfirmationData(confirmationData, (_realReceiveCheckoutC = {}, (0, _defineProperty3.default)(_realReceiveCheckoutC, _dataObjects.Transaction.REVENUE, (0, _selectors.getOrderTotal)(currentState)), (0, _defineProperty3.default)(_realReceiveCheckoutC, _dataObjects.Transaction.TAX, (0, _selectors.getTax)(currentState)), (0, _defineProperty3.default)(_realReceiveCheckoutC, 'products', remapProducts((0, _selectors.getCartItems)(currentState).toJS())), _realReceiveCheckoutC)));
    };
};

var receiveUserEmail = exports.receiveUserEmail = (0, _actionCreation.createAction)('Receive User Email Address', ['email']);
var receiveSelectedShippingMethod = exports.receiveSelectedShippingMethod = (0, _actionCreation.createAction)('Receive Selected Shipping Method', ['selectedShippingMethodId']);
var receiveLocationsCustomContent = exports.receiveLocationsCustomContent = (0, _actionCreation.createAction)('Receive Locations Custom Content');
var receiveShippingAddressCustomContent = exports.receiveShippingAddressCustomContent = (0, _actionCreation.createAction)('Receive Shipping Address Custom Content');
var receiveBillingAddressCustomContent = exports.receiveBillingAddressCustomContent = (0, _actionCreation.createAction)('Receive Billing Address Custom Content');