'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchSavedShippingAddresses = exports.updateShippingAndBilling = exports.fetchShippingMethodsEstimate = exports.submitPayment = exports.submitShipping = exports.initCheckoutConfirmationPage = exports.initCheckoutPaymentPage = exports.initCheckoutShippingPage = exports.register = undefined;

var _actions = require('progressive-web-sdk/dist/analytics/actions');

var connector = {}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var register = exports.register = function register(commands) {
  connector = commands;
};

/**
 * Initializes any required data for the Checkout Shipping page
 * @function
 * @deprecated Please use relevant commands in the cart branch
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 */
var initCheckoutShippingPage = exports.initCheckoutShippingPage = function initCheckoutShippingPage(url, routeName) {
  return connector.initCheckoutShippingPage(url, routeName);
};

/**
 * Initializes any required data for the Checking Payment page
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 */
var initCheckoutPaymentPage = exports.initCheckoutPaymentPage = function initCheckoutPaymentPage(url, routeName) {
  return connector.initCheckoutPaymentPage(url, routeName);
};

/**
 * Initializes any required data for the Checkout Confirmation page
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 */
var initCheckoutConfirmationPage = exports.initCheckoutConfirmationPage = function initCheckoutConfirmationPage(url, routeName) {
  return connector.initCheckoutConfirmationPage(url, routeName);
};

/**
 * Submits the shipping stage of the checkout flow.
 * @function
 * @param {object} formValues All of the values from the shipping form (see store/checkout/constants:SHIPPING_FORM_NAME)
 * @return {Promise} Resolves to the URL to redirect to for
 *                   payment. This is often controlled by the
 *                   backend/connector. If the connector returns a
 *                   valid URL from this command, the app will
 *                   navigate to the URL.
 */
var submitShipping = exports.submitShipping = function submitShipping(formValues) {
  return (0, _actions.formSubmitErrorWrapper)(connector.submitShipping(formValues));
};

/**
 * Submits the payment stage of the checkout flow.
 * @function
 * @param {object} formValues All of the values from the payment form (see store/checkout/constants:PAYMENT_FORM_NAME)
 * @return {Promise} Resolves to the URL to redirect to for
 *                   confirmation. This is often controlled by the
 *                   backend/connector. If the connector returns a
 *                   valid URL from this command, the app will
 *                   navigate to the URL.
 */
var submitPayment = exports.submitPayment = function submitPayment(formValues) {
  return connector.submitPayment(formValues);
};

/**
 * Fetches shipping methods estimates for the given checkout stage
 * @function
 * @param {object} inputAddress The address to estimate shipping for
 */
var fetchShippingMethodsEstimate = exports.fetchShippingMethodsEstimate = function fetchShippingMethodsEstimate(inputAddress) {
  return connector.fetchShippingMethodsEstimate(inputAddress);
};

/**
 * Updates the registered customer's billing and shipping addresses using the
 * address that was given during checkout. This should be called during checkout
 * once shipping information has been provided.
 * @function
 * @deprecated Please use setShippingAddress command instead
 */
var updateShippingAndBilling = exports.updateShippingAndBilling = function updateShippingAndBilling() {
  return connector.updateShippingAndBilling();
};

/**
 * Fetches the registered customer's saved shipping addresses
 * @function
 */
var fetchSavedShippingAddresses = exports.fetchSavedShippingAddresses = function fetchSavedShippingAddresses() {
  return connector.fetchSavedShippingAddresses();
};