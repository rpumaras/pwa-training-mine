'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccountViewOrderPage = exports.initWishlistPage = exports.initRegisterPage = exports.initLoginPage = exports.initAccountAddressPage = exports.initAccountInfoPage = exports.initAccountOrderListPage = exports.initAccountDashboardPage = exports.reorderPreviousOrder = exports.deleteAddress = exports.editAddress = exports.addAddress = exports.getSavedAddresses = exports.updateBillingAddress = exports.updateShippingAddress = exports.registerUser = exports.logout = exports.login = exports.navigateToSection = exports.updateWishlistItem = exports.updateWishlistItemQuantity = exports.removeItemFromWishlist = exports.addToCartFromWishlist = exports.getOrder = exports.getWishlist = exports.getOrderList = exports.updateAccountPassword = exports.updateAccountInfo = exports.getAccountInfo = exports.register = undefined;

var _actions = require('progressive-web-sdk/dist/analytics/actions');

var _dataObjects = require('progressive-web-sdk/dist/analytics/data-objects/');

var _commandUtils = require('../../../utils/command-utils');

var connector = {}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
var register = exports.register = function register(commands) {
  connector = commands;
};

/**
 * Gets the user's account info.
 * @function
 */
var getAccountInfo = exports.getAccountInfo = function getAccountInfo() {
  return connector.getAccountInfo();
};

/**
 * Updates the user's account info.
 * @function
 * @param {object} formValues The form values provided from the account info
 */
var updateAccountInfo = exports.updateAccountInfo = function updateAccountInfo(formValues) {
  return connector.updateAccountInfo(formValues);
};

/**
 * Updates the user's account password.
 * @function
 * @param {object} formValues The form values provided from the account password
 */
var updateAccountPassword = exports.updateAccountPassword = function updateAccountPassword(formValues) {
  return connector.updateAccountPassword(formValues);
};

/**
 * Gets the order history for current user
 * @function
 */
var getOrderList = exports.getOrderList = function getOrderList() {
  return connector.getOrderList();
};

/**
 * Gets the saved wishlist for a user
 * @function
 */
var getWishlist = exports.getWishlist = function getWishlist() {
  return connector.getWishlist();
};

/**
 * Gets the order detail for current user
 * @function
 * @param {string} orderNumber The id of the order
 */
var getOrder = exports.getOrder = function getOrder(orderNumber) {
  return connector.getOrder(orderNumber);
};

/**
 * Adds an item to the cart from the wishlist
 * This command is separate from the add to cart command since
 * some connectors will also remove the item from the wishlist
 * @function
 * @param {string} productId The ID for the product that's being added to the cart
 * @param {object} formValues The form values required for the command
 */
var addToCartFromWishlist = exports.addToCartFromWishlist = function addToCartFromWishlist(productId, formValues) {
  return function (dispatch, getState) {
    return dispatch(connector.addToCartFromWishlist(productId, formValues)).then(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.addToCart, dispatch, getState, productId);
      return args;
    });
  };
};

/**
 * Removes an item from the wishlist
 * Some connectors might not give items within a wishlist a different ID
 * than their product ID. In that case use the same value for both params
 * @function
 * @param {string} itemID The id for the item in the wishlist that should be removed
 * @param {string} wishlistID The id for the wishlist the item should be removed from
 * @param {string} productID The product id for the item being removed
 * @param {string} quantity The quantity of items being removed
 */
var removeItemFromWishlist = exports.removeItemFromWishlist = function removeItemFromWishlist(itemID, wishlistID, productId, quantity) {
  return function (dispatch, getState) {
    return dispatch(connector.removeItemFromWishlist(itemID, wishlistID, productId)).then(function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (0, _actions.dispatchWishlistAnalytics)(_dataObjects.EVENT_ACTION.removeFromWishlist, dispatch, getState, productId, quantity);
      return args;
    });
  };
};

/**
 * Updates the quantity of an item in a wishlist
 * @function
 * @param {string} quantity The new quantity of the item in the wishlist
 * @param {string} itemId  The wishlist item ID
 * @param {string} wishlistId The ID of the wishlist
 */
var updateWishlistItemQuantity = exports.updateWishlistItemQuantity = function updateWishlistItemQuantity(quantity, itemId, wishlistId) {
  return function (dispatch) {
    return dispatch(connector.updateWishlistItemQuantity(quantity, itemId, wishlistId));
  };
};

/**
 * Updates an item in the wishlist
 * Some connectors might not give items within a wishlist a different ID
 * than their product ID. In that case use the same value for both params
 * @function
 * @param {string} itemID The id for the item in the wishlist that should be removed
 * @param {string} wishlistID The id for the wishlist the item should be removed from
 * @param {string} quantity The quantity of items being removed
 */
var updateWishlistItem = exports.updateWishlistItem = function updateWishlistItem(itemID, wishlistID, quantity) {
  return function (dispatch) {
    return dispatch(connector.updateWishlistItem(itemID, wishlistID, quantity));
  };
};

/**
 * Called when the user switches between the Sign In and Register sections.
 * @function
 * @param {object} router The React router object
 * @param {string} routes The routes configured in this application
 * @param {string} sectionName The section that was selected (typically this maps to a route name, but that is not guaranteed)
 */
var navigateToSection = exports.navigateToSection = function navigateToSection(router, routes, sectionName) {
  return connector.navigateToSection(router, routes, sectionName);
};

/**
 * Logs the user in with the given credentials.
 * @function
 * @param {string} username The user's username
 * @param {string} password The password provided by the user in clear text
 * @param {boolean} rememberMe `true` if the login should be persistent (this may be ignored by the connector)
 *
 * @return {Promise} Resolves to the URL to redirect to. This is often
 *                   controlled by the backend/connector. If the
 *                   connector returns a valid URL from this command,
 *                   the app will navigate to the URL.
 */
var login = exports.login = function login(username, password, rememberMe) {
  return connector.login(username, password, rememberMe);
};

/**
 * Logs the current user out.
 * @function
 */
var logout = exports.logout = function logout() {
  return connector.logout();
};

/**
 * Creates an account using the given parameters.
 * @function
 * @param {string} firstname The user's first name
 * @param {string} lastname The user's lastname
 * @param {string} email The user's email
 * @param {string} password The user's password
 * @param {object} opts An optional object contains custom data or connector specific data
 */
var registerUser = exports.registerUser = function registerUser(firstname, lastname, email, password) {
  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  return connector.registerUser(firstname, lastname, email, password, opts);
};

/**
 * Updates the user's shipping address to the given address.
 * Some backends don't distinguish between a save shipping and saved billing address.
 * In those cases this command will still save the address for the user.
 * @function
 * @param {object} formValues The form values provided from the address form
 */
var updateShippingAddress = exports.updateShippingAddress = function updateShippingAddress(formValues) {
  return (0, _actions.formSubmitErrorWrapper)(connector.updateShippingAddress(formValues));
};

/**
 * Updates the user's billing address to the given address.
 * Some backends don't distinguish between a saved shipping and saved billing addresses.
 * In those cases this command will still save the address for the user.
 * @function
 * @param {object} formValues The form values provided from the address form
 */
var updateBillingAddress = exports.updateBillingAddress = function updateBillingAddress(formValues) {
  return (0, _actions.formSubmitErrorWrapper)(connector.updateBillingAddress(formValues));
};

/**
 * Gets the saved address from user's account
 * @function
 */
var getSavedAddresses = exports.getSavedAddresses = function getSavedAddresses() {
  return connector.getSavedAddresses();
};

/**
 * Adds a new address to a user's account
 * @function
 * @param {Object} address - the address object
 */
var addAddress = exports.addAddress = function addAddress(address) {
  return connector.addAddress(address);
};

/**
 * Edits an existing address on a user's account
 * @param {Object} address - the address object
 * @param {String} addressId - the unique ID of the address to be edited
 */
var editAddress = exports.editAddress = function editAddress(address, addressId) {
  return connector.editAddress(address, addressId);
};

/**
 * Deletes an address from the user's account
 * @function
 * @param {String} addressId - the unique ID of the address to be deleted
 */
var deleteAddress = exports.deleteAddress = function deleteAddress(addressId) {
  return connector.deleteAddress(addressId);
};

/**
 * Adds a previous order's items to a user's cart
 * @function
 * @param {String} orderNumber
 */
var reorderPreviousOrder = exports.reorderPreviousOrder = function reorderPreviousOrder(orderNumber) {
  return connector.reorderPreviousOrder(orderNumber);
};

/**
 * Initializes any required data for Account Dashboard page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initAccountDashboardPage = exports.initAccountDashboardPage = (0, _commandUtils.deprecatedCommand)('initAccountDashboardPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for Account Order List page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initAccountOrderListPage = exports.initAccountOrderListPage = (0, _commandUtils.deprecatedCommand)('initAccountOrderListPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for Account Info page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initAccountInfoPage = exports.initAccountInfoPage = (0, _commandUtils.deprecatedCommand)('initAccountInfoPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for Account Address page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initAccountAddressPage = exports.initAccountAddressPage = (0, _commandUtils.deprecatedCommand)('initAccountAddressPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for the Login page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initLoginPage = exports.initLoginPage = (0, _commandUtils.deprecatedCommand)('initLoginPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for the Register page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initRegisterPage = exports.initRegisterPage = (0, _commandUtils.deprecatedCommand)('initRegisterPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for the Wishlist page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initWishlistPage = exports.initWishlistPage = (0, _commandUtils.deprecatedCommand)('initWishlistPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');

/**
 * Initializes any required data for the Account View Order  page.
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 * @deprecated
 */
var initAccountViewOrderPage = exports.initAccountViewOrderPage = (0, _commandUtils.deprecatedCommand)('initAccountViewOrderPage is deprecated. Place logic previously implemented in this command in your container\'s actions.js file.');