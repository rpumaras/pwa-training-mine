'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deletePromoCode = exports.putPromoCode = exports.fetchTaxEstimate = exports.addToWishlist = exports.updateItemQuantity = exports.updateCartItem = exports.removeFromCart = exports.addToCart = exports.getCart = exports.initCartPage = exports.register = undefined;

var _dataObjects = require('progressive-web-sdk/dist/analytics/data-objects/');

var _actions = require('progressive-web-sdk/dist/analytics/actions');

var _selectors = require('progressive-web-sdk/dist/store/cart/selectors');

var connector = {}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var register = exports.register = function register(commands) {
    connector = commands;
};
/**
 * Initializes any required data for the Cart page
 * @function
 * @param {string} url The url of the current page
 * @param {string} routeName The route name of the current page
 */
var initCartPage = exports.initCartPage = function initCartPage(url, routeName) {
    return connector.initCartPage(url, routeName);
};

/**
 * Retrieves the current cart information.
 * @function
 */
var getCart = exports.getCart = function getCart() {
    return connector.getCart();
};

/**
 * Adds a product to the cart
 * @function
 * @param productId {string} The product's ID
 * @param quantity {number} The quantity to add
 * @param variant {object} (optional, connector-specific object) The variant to be added.
 * Check out the configured connector's commands for the required variant object-shape
 */
var addToCart = exports.addToCart = function addToCart(productId, quantity, variant) {
    return function (dispatch, getState) {
        return dispatch(connector.addToCart(productId, quantity, variant)).then(function (cart) {
            (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.addToCart, dispatch, getState, productId, quantity);
            return cart;
        });
    };
};

/**
 * Removes an item from the cart
 * @function
 * @param itemID {string} The cart item ID to remove
 */
var removeFromCart = exports.removeFromCart = function removeFromCart(itemId) {
    return function (dispatch, getState) {
        var state = getState();
        var productId = (0, _selectors.getProductIdByItemId)(itemId)(state);
        var currentQuantity = (0, _selectors.getItemById)(itemId)(state).get('quantity');
        return dispatch(connector.removeFromCart(itemId)).then(function (cart) {
            (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.removeFromCart, dispatch, getState, productId, currentQuantity);
            return cart;
        });
    };
};

/**
 * Removes an item from the cart
 * @function
 * @param itemID {string} The cart item ID to update
 * @param quantity {number} The new quantity
 * @param productId {string} The new product ID to replace cart item
 * @param variant {object} (optional, connector-specific object) The new product variant
 * Check out the configured connector's commands for the required variant object-shape
 */
var updateCartItem = exports.updateCartItem = function updateCartItem(itemId, quantity, productId, variant) {
    return function (dispatch, getState) {
        var currentQuantity = (0, _selectors.getItemById)(itemId)(getState()).get('quantity');
        var deltaQuantity = quantity - currentQuantity;
        return dispatch(connector.updateCartItem(itemId, quantity, productId, variant)).then(function (cart) {
            if (deltaQuantity > 0) {
                (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.addToCart, dispatch, getState, productId, deltaQuantity);
            } else if (deltaQuantity < 0) {
                (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.removeFromCart, dispatch, getState, productId, -deltaQuantity);
            }
            return cart;
        });
    };
};

/**
 * Updates the quantity of the given item in the cart
 * @function
 * @param itemID {string} The cart item ID to update
 * @param quantity {number} The new quantity
 */
var updateItemQuantity = exports.updateItemQuantity = function updateItemQuantity(itemId, newQuantity) {
    return function (dispatch, getState) {
        var currentQuantity = (0, _selectors.getItemById)(itemId)(getState()).get('quantity');
        var deltaQuantity = newQuantity - currentQuantity;
        return dispatch(connector.updateItemQuantity(itemId, newQuantity)).then(function (cart) {
            var productId = (0, _selectors.getProductIdByItemId)(itemId)(getState());
            if (deltaQuantity > 0) {
                (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.addToCart, dispatch, getState, productId, deltaQuantity);
            } else if (deltaQuantity < 0) {
                (0, _actions.dispatchCartAnalytics)(_dataObjects.EVENT_ACTION.removeFromCart, dispatch, getState, productId, -deltaQuantity);
            }
            return cart;
        });
    };
};

/**
 * Add a product to the wishlist
 * @deprecated Use the addItemToWishlist command instead found under integration-manager/products/commands
 * @function
 * @param productId {string} The product's ID
 * @param productURL {strin} The URL of the product's detail page
 */
var addToWishlist = exports.addToWishlist = function addToWishlist(productId, productURL) {
    console.warn('The addToWishlist command has been deprecated in favour of addItemToWishlist found under integration-manager/products/commands.');
    return connector.addToWishlist(productId, productURL);
};

/**
 * Estimates taxes for a proposed address and shipping method
 * @function
 * @param address {object} The address to use for tax estimation
 * @param shippingMethod {string} The shipping method to use for tax estimation (connector-specific!)
 */
var fetchTaxEstimate = exports.fetchTaxEstimate = function fetchTaxEstimate(address, shippingMethod) {
    return connector.fetchTaxEstimate(address, shippingMethod);
};

/**
 * Adds promo code
 * @function
 * @param couponCode {string} The coupon code to be applied
 */
var putPromoCode = exports.putPromoCode = function putPromoCode(couponCode) {
    return connector.putPromoCode(couponCode);
};

/**
 * Deletes promo code
 * @function
 * @param couponCode {string} The coupon code to be removed
 */
var deletePromoCode = exports.deletePromoCode = function deletePromoCode(couponCode) {
    return connector.deletePromoCode(couponCode);
};