'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _freeze = require('babel-runtime/core-js/object/freeze');

var _freeze2 = _interopRequireDefault(_freeze);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _defaultsDeep = require('lodash/defaultsDeep');

var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);

var _pickBy = require('lodash/pickBy');

var _pickBy2 = _interopRequireDefault(_pickBy);

var _api = require('./integration-manager/api');

var commands = _interopRequireWildcard(_api);

var _reducer = require('./integration-manager/reducer');

var _commands = require('./integration-manager/api/products/commands');

var productsCommands = _interopRequireWildcard(_commands);

var _commands2 = require('./integration-manager/api/product-search/commands');

var productSearchCommands = _interopRequireWildcard(_commands2);

var _commands3 = require('./integration-manager/api/categories/commands');

var categoriesCommands = _interopRequireWildcard(_commands3);

var _commands4 = require('./integration-manager/api/cart/commands');

var cartCommands = _interopRequireWildcard(_commands4);

var _commands5 = require('./integration-manager/api/app/commands');

var appCommands = _interopRequireWildcard(_commands5);

var _commands6 = require('./integration-manager/api/checkout/commands');

var checkoutCommands = _interopRequireWildcard(_commands6);

var _commands7 = require('./integration-manager/api/account/commands');

var accountCommands = _interopRequireWildcard(_commands7);

var _commandUtils = require('./utils/command-utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var setExtensionFlag = function setExtensionFlag(im, selectedCommands, flag) {
    (0, _keys2.default)(selectedCommands).forEach(function (branch) {
        (0, _keys2.default)(selectedCommands[branch]).forEach(function (commandName) {
            if (im[branch] && im[branch][commandName] && !im[branch][commandName].extensionMode) {
                im[branch][commandName].extensionMode = flag;
            }
        });
    });
    return selectedCommands;
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var registerOverrideCommands = function registerOverrideCommands(im, connector, extension) {
    var extendedConnector = (0, _merge2.default)({}, connector.commands, extension);
    if (extension) {
        setExtensionFlag(im, extension, _commandUtils.EXTENSION_FLAG.override);
    }
    commands.register(extendedConnector);
    setExtensionFlag(im, connector.commands, _commandUtils.EXTENSION_FLAG.connector);
    // This set commands that is not implemented in the connector
    setExtensionFlag(im, im, _commandUtils.EXTENSION_FLAG.missing);
};

var registerCustomCommands = function registerCustomCommands(im, extension) {
    if (!extension) {
        return;
    }
    (0, _keys2.default)(extension).forEach(function (branch) {
        if (im.isReservedBranch(branch)) {
            throw new Error('Cannot extend IM using reserved branch: ' + branch);
        }
    });
    (0, _defaultsDeep2.default)(im, extension);
    setExtensionFlag(im, extension, _commandUtils.EXTENSION_FLAG.custom);
};

var removeDeprecatedCommands = function removeDeprecatedCommands(im, extension) {
    (0, _keys2.default)(im).forEach(function (branch) {
        (0, _keys2.default)(im[branch]).forEach(function (commandName) {
            if (im[branch][commandName].extensionMode === _commandUtils.EXTENSION_FLAG.deprecated) {
                if (!extension || !extension[branch] || !extension[branch][commandName]) {
                    delete im[branch][commandName];
                }
            }
        });
    });
};

var freezeCommandTree = function freezeCommandTree(im) {
    (0, _keys2.default)(im).forEach(function (branch) {
        if (im.isReservedBranch(branch)) {
            return;
        }
        // On unsupported browser: Freeze is polyfilled and will have no effect
        (0, _freeze2.default)(im[branch]);
    });

    (0, _freeze2.default)(im);
};

// Safari breaks SPA due to console log not bind with console scope when assigned to another variable
// Reference: https://stackoverflow.com/questions/2619187/assigning-console-log-to-another-object-webkit-issue
var boundConsole = function boundConsole(consoleFn) {
    return consoleFn.bind(console);
};

var integrationManagerOptions = {};

var IntegrationManager = function () {
    function IntegrationManager() {
        (0, _classCallCheck3.default)(this, IntegrationManager);

        var isCommandExport = function isCommandExport(_, commandName) {
            return commandName !== 'register';
        };
        this.products = (0, _pickBy2.default)(productsCommands, isCommandExport);
        this.productSearch = (0, _pickBy2.default)(productSearchCommands, isCommandExport);
        this.categories = (0, _pickBy2.default)(categoriesCommands, isCommandExport);
        this.cart = (0, _pickBy2.default)(cartCommands, isCommandExport);
        this.app = (0, _pickBy2.default)(appCommands, isCommandExport);
        this.checkout = (0, _pickBy2.default)(checkoutCommands, isCommandExport);
        this.account = (0, _pickBy2.default)(accountCommands, isCommandExport);
    }

    /**
     * Initialize the Integration manager with given connector and extensions
     *
     * @param {Object} connector Object of commands and reducer under related keys
     * @param {Object} extension Object used to extend Integration Manager - see {@link https://docs.mobify.com/progressive-web/latest/ecommerce-integrations/usage/}
     * @param {Object} options An object contain various flags: debug - print the Command Tree on initialization
     */


    (0, _createClass3.default)(IntegrationManager, [{
        key: 'initialize',
        value: function initialize(connector, extension) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var self = this;

            (0, _reducer.register)(connector.reducer);

            registerOverrideCommands(self, connector, extension);
            registerCustomCommands(self, extension);
            removeDeprecatedCommands(self, extension);

            integrationManagerOptions = options;

            freezeCommandTree(self);

            if (options.debug) {
                this.logCommandTree();
            }
        }
    }, {
        key: 'getOption',
        value: function getOption(key) {
            return integrationManagerOptions[key];
        }

        /**
         * Determine if the branch can be used in command tree
         * @return {boolean} if branch is reserved
         */

    }, {
        key: 'isReservedBranch',
        value: function isReservedBranch(branch) {
            return this[branch] && typeof this[branch] === 'function';
        }

        /**
         * Print the command tree of the Integration Manager to console
         */

    }, {
        key: 'logCommandTree',
        value: function logCommandTree() {
            var _this = this;

            // Node 6 does not have groupCollapsed
            var hasConsoleGroup = !!(console.groupCollapsed && console.groupEnd);
            var consoleGroup = hasConsoleGroup ? boundConsole(console.groupCollapsed) : boundConsole(console.log);
            var consoleEnd = hasConsoleGroup ? boundConsole(console.groupEnd) : function () {};

            consoleGroup('ðŸ“‚ Integration Manager Command tree');
            (0, _keys2.default)(this).sort().forEach(function (branch) {
                var _commandCount;

                if (_this.isReservedBranch(branch)) {
                    return;
                }
                var branchCommands = _this[branch];
                var commandCount = (_commandCount = {
                    all: 0
                }, (0, _defineProperty3.default)(_commandCount, _commandUtils.EXTENSION_FLAG.connector, 0), (0, _defineProperty3.default)(_commandCount, _commandUtils.EXTENSION_FLAG.override, 0), (0, _defineProperty3.default)(_commandCount, _commandUtils.EXTENSION_FLAG.custom, 0), (0, _defineProperty3.default)(_commandCount, _commandUtils.EXTENSION_FLAG.missing, 0), (0, _defineProperty3.default)(_commandCount, _commandUtils.EXTENSION_FLAG.deprecated, 0), _commandCount);
                (0, _keys2.default)(branchCommands).forEach(function (commandName) {
                    commandCount.all += 1;
                    var extensionFlag = branchCommands[commandName].extensionMode;
                    if (extensionFlag) {
                        commandCount[extensionFlag] += 1;
                    }
                });
                consoleGroup('\uD83D\uDCC1 ' + branch + ' (' + commandCount.all + ' commands' + ('' + (commandCount.connector > 0 ? ', ' + commandCount.connector + ' from connector' : '')) + ('' + (commandCount.missing > 0 ? ', ' + commandCount.missing + ' missing' : '')) + ('' + (commandCount.override > 0 ? ', ' + commandCount.override + ' overrides' : '')) + ('' + (commandCount.custom > 0 ? ', ' + commandCount.custom + ' custom' : '')) + ('' + (commandCount.deprecated > 0 ? ', ' + commandCount.deprecated + ' deprecated' : '')) + ')');
                (0, _keys2.default)(branchCommands).sort().forEach(function (commandName) {
                    console.log('%c' + commandName + ' - ' + branchCommands[commandName].extensionMode, '' + (branchCommands[commandName].extensionMode === 'deprecated' && 'color: red;'));
                });
                consoleEnd();
            });
            consoleEnd();
        }
    }]);
    return IntegrationManager;
}();

exports.default = new IntegrationManager();