'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _statefulStepper = require('./partials/stateful-stepper');

var _statefulStepper2 = _interopRequireDefault(_statefulStepper);

var _reduxFormStepper = require('./partials/redux-form-stepper');

var _reduxFormStepper2 = _interopRequireDefault(_reduxFormStepper);

var _utils = require('../../utils/utils');

var _dataObjects = require('../../analytics/data-objects/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getUniqueId = function () {
  var i = 0;

  return function () {
    return 'stepper-' + i++;
  };
}();

/**
 * The `Stepper` is a type of input that contains a number, which can be incremented
 * or decremented by clicking buttons. A common use for a stepper is a quantity
 * picker on a product page.
 *
 * @example ./DESIGN.md
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Stepper = function (_React$Component) {
  (0, _inherits3.default)(Stepper, _React$Component);

  function Stepper(props) {
    (0, _classCallCheck3.default)(this, Stepper);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Stepper.__proto__ || (0, _getPrototypeOf2.default)(Stepper)).call(this, props));

    _this.inputId = props.idForLabel || getUniqueId();
    return _this;
  }

  (0, _createClass3.default)(Stepper, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          useReduxForm = _props.useReduxForm,
          label = _props.label;


      var classes = (0, _classnames2.default)('pw-stepper', className);

      return _react2.default.createElement(
        'div',
        { className: classes },
        label && _react2.default.createElement(
          'label',
          { htmlFor: this.inputId },
          label
        ),
        useReduxForm ? _react2.default.createElement(_reduxFormStepper2.default, (0, _extends3.default)({}, this.props, { inputId: this.inputId })) : _react2.default.createElement(_statefulStepper2.default, (0, _extends3.default)({}, this.props, { inputId: this.inputId }))
      );
    }
  }]);
  return Stepper;
}(_react2.default.Component);

Stepper.defaultProps = {
  countAnalyticsName: _dataObjects.UI_NAME.count,
  decrementAnalyticsName: _dataObjects.UI_NAME.decrementQuantity,
  decrementText: 'decrement quantity',
  disabled: false,
  incrementAnalyticsName: _dataObjects.UI_NAME.incrementQuantity,
  incrementText: 'increment quantity',
  maximumValue: null,
  minimumValue: 0,
  onDecreaseClick: _utils.noop,
  onIncreaseClick: _utils.noop,
  useReduxForm: false
};

Stepper.propTypes = {
  /**
   * The name of the input.
   */
  name: _propTypes2.default.string.isRequired,

  /**
   * Click handler for decrease quantity button when using `redux-form` stepper.
   */
  onDecreaseClick: _propTypes2.default.func.isRequired,
  /**
   * Click handler for increase quantity button when using `redux-form` stepper.
   */
  onIncreaseClick: _propTypes2.default.func.isRequired,

  /**
   * Adds values to the `class` attribute of the root element.
   */
  className: _propTypes2.default.string,
  /**
   * Analytics name to use for the count input.
   */
  countAnalyticsName: _propTypes2.default.string,
  /**
   * Analytics name to use for the decrement button.
   */
  decrementAnalyticsName: _propTypes2.default.string,
  /**
   * Icon to use for the decrement button.
   * For more information about available icons, see the [Icon component](#!/Icon).
   */
  decrementIcon: _propTypes2.default.string,
  /**
   * Text for the decrement button.
   */
  decrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  /**
   * Defines if the stepper button is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Used as the `id` attr for the input and the `for` attr for the label.
   * If not provided, a default ID is generated.
   */
  idForLabel: _propTypes2.default.string,
  /**
   * Analytics name to use for the increment button.
   */
  incrementAnalyticsName: _propTypes2.default.string,
  /**
   * Icon to use for the increment button.
   * For more information about available icons, see the [Icon component](#!/Icon).
   */
  incrementIcon: _propTypes2.default.string,
  /**
   * Text for the increment button.
   */
  incrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  /**
   * Sets the initial value of the Field's input.
   */
  initialValue: _propTypes2.default.number,
  /**
   * Label of the stepper
   */
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  /**
   * Sets the lower limit for the stepper.
   */
  maximumValue: _propTypes2.default.number,
  /**
   * Sets the upper limit for the stepper.
   */
  minimumValue: _propTypes2.default.number,
  /**
   * Determines if the component works with redux-form or not.
   */
  useReduxForm: _propTypes2.default.bool
};

exports.default = Stepper;