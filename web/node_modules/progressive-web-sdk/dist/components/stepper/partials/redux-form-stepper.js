'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _stepperButton = require('../partials/stepper-button');

var _stepperButton2 = _interopRequireDefault(_stepperButton);

var _dataObjects = require('../../../analytics/data-objects/');

var _reduxForm = require('redux-form');

var ReduxForm = _interopRequireWildcard(_reduxForm);

var _componentUtils = require('../../../utils/component-utils');

var _utils = require('../../../utils/utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var QuantityInput = function QuantityInput(_ref) {
  var countAnalyticsName = _ref.countAnalyticsName,
      disabled = _ref.disabled,
      input = _ref.input,
      inputId = _ref.inputId,
      decrementAnalyticsName = _ref.decrementAnalyticsName,
      decrementIcon = _ref.decrementIcon,
      decrementText = _ref.decrementText,
      incrementAnalyticsName = _ref.incrementAnalyticsName,
      incrementIcon = _ref.incrementIcon,
      incrementText = _ref.incrementText,
      onDecreaseClick = _ref.onDecreaseClick,
      onIncreaseClick = _ref.onIncreaseClick,
      maximumValue = _ref.maximumValue,
      minimumValue = _ref.minimumValue;

  var incrementDisabled = disabled || maximumValue && input.value === maximumValue;
  var decrementDisabled = disabled || input.value === minimumValue;

  return _react2.default.createElement(
    'div',
    { className: 'pw-stepper__inner' },
    _react2.default.createElement(_stepperButton2.default, {
      isDecrement: true,
      icon: decrementIcon,
      text: decrementText,
      title: decrementText,
      disabled: decrementDisabled,
      analyticsName: decrementAnalyticsName,
      onClick: onDecreaseClick
    }),
    _react2.default.createElement(
      'div',
      { className: 'pw-stepper__count' },
      _react2.default.createElement('input', (0, _extends3.default)({
        className: 'pw-stepper__input',
        type: 'tel',
        disabled: disabled,
        'data-analytics-name': countAnalyticsName,
        id: inputId
      }, input))
    ),
    _react2.default.createElement(_stepperButton2.default, {
      icon: incrementIcon,
      text: incrementText,
      title: incrementText,
      disabled: incrementDisabled,
      analyticsName: incrementAnalyticsName,
      onClick: onIncreaseClick
    })
  );
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

QuantityInput.propTypes = {
  /**
   * Click handler for decrease quantity button.
   */
  onDecreaseClick: _propTypes2.default.func.isRequired,

  /**
   * Click handler for increase quantity button.
   */
  onIncreaseClick: _propTypes2.default.func.isRequired,

  /**
   * Adds values to the `class` attribute of the root element.
   */
  className: _propTypes2.default.string,

  /**
   * Analytics name to use for the count input.
   */
  countAnalyticsName: _propTypes2.default.string,

  /**
   * Analytics name to use for the decrement button.
   */
  decrementAnalyticsName: _propTypes2.default.string,

  /**
   * Icon to use for the decrement button.
   */
  decrementIcon: _propTypes2.default.string,

  /**
   * Text for the decrement button.
   */
  decrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

  /**
   * Defines if the stepper button is disabled.
   */
  disabled: _propTypes2.default.bool,

  /**
   * Analytics name to use for the increment button.
   */
  incrementAnalyticsName: _propTypes2.default.string,

  /**
   * Icon to use for the increment button.
   */
  incrementIcon: _propTypes2.default.string,

  /**
   * Text for the increment button.
   */
  incrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

  /**
   * [Internal] Props for input element added by redux form
   */
  input: _propTypes2.default.object,

  /**
   * This prop sets the id for input.
   */
  inputId: _propTypes2.default.string,

  /**
   * Sets the lower limit for the stepper.
   */
  maximumValue: _propTypes2.default.number,

  /**
   * Sets the upper limit for the stepper.
   */
  minimumValue: _propTypes2.default.number,

  /**
   * The name of the input.
   */
  name: _propTypes2.default.string

  /**
   * The `ReduxFormStepper` is used in the `Stepper` component.
   * Use this stepper inside redux form so you can use redux form to manage it's value.
   */

};var ReduxFormStepper = function ReduxFormStepper(_ref2) {
  var countAnalyticsName = _ref2.countAnalyticsName,
      decrementAnalyticsName = _ref2.decrementAnalyticsName,
      decrementIcon = _ref2.decrementIcon,
      decrementText = _ref2.decrementText,
      disabled = _ref2.disabled,
      name = _ref2.name,
      incrementAnalyticsName = _ref2.incrementAnalyticsName,
      incrementIcon = _ref2.incrementIcon,
      incrementText = _ref2.incrementText,
      inputId = _ref2.inputId,
      maximumValue = _ref2.maximumValue,
      minimumValue = _ref2.minimumValue,
      onDecreaseClick = _ref2.onDecreaseClick,
      onIncreaseClick = _ref2.onIncreaseClick;


  return _react2.default.createElement(ReduxForm.Field, {
    component: QuantityInput,
    name: name,
    props: {
      countAnalyticsName: countAnalyticsName,
      disabled: disabled,
      inputId: inputId,
      decrementAnalyticsName: decrementAnalyticsName,
      decrementIcon: decrementIcon,
      decrementText: decrementText,
      incrementAnalyticsName: incrementAnalyticsName,
      incrementIcon: incrementIcon,
      incrementText: incrementText,
      onDecreaseClick: onDecreaseClick,
      onIncreaseClick: onIncreaseClick,
      maximumValue: maximumValue,
      minimumValue: minimumValue
    },
    normalize: function normalize(value) {
      return (0, _componentUtils.getBoundedValue)(value, minimumValue, maximumValue);
    }
  });
};
ReduxFormStepper.defaultProps = {
  countAnalyticsName: _dataObjects.UI_NAME.count,
  decrementAnalyticsName: _dataObjects.UI_NAME.decrementQuantity,
  decrementText: 'decrement quantity',
  disabled: false,
  incrementAnalyticsName: _dataObjects.UI_NAME.incrementQuantity,
  incrementText: 'increment quantity',
  maximumValue: null,
  minimumValue: 0,
  onDecreaseClick: _utils.noop,
  onIncreaseClick: _utils.noop
};

ReduxFormStepper.propTypes = {
  /**
   * The name of the input.
   */
  name: _propTypes2.default.string.isRequired,

  /**
   * Click handler for decrease quantity button.
   */
  onDecreaseClick: _propTypes2.default.func.isRequired,

  /**
   * Click handler for increase quantity button.
   */
  onIncreaseClick: _propTypes2.default.func.isRequired,

  /**
   * Adds values to the `class` attribute of the root element.
   */
  className: _propTypes2.default.string,

  /**
   * Analytics name to use for the count input.
   */
  countAnalyticsName: _propTypes2.default.string,

  /**
   * Analytics name to use for the decrement button.
   */
  decrementAnalyticsName: _propTypes2.default.string,

  /**
   * Icon to use for the decrement button.
   */
  decrementIcon: _propTypes2.default.string,

  /**
   * Text for the decrement button.
   */
  decrementText: _propTypes2.default.string,

  /**
   * Defines if the stepper button is disabled.
   */
  disabled: _propTypes2.default.bool,

  /**
   * Analytics name to use for the increment button.
   */
  incrementAnalyticsName: _propTypes2.default.string,

  /**
   * Icon to use for the increment button.
   */
  incrementIcon: _propTypes2.default.string,

  /**
   * Text for the increment button.
   */
  incrementText: _propTypes2.default.string,

  /**
   * This prop sets the id for input.
   */
  inputId: _propTypes2.default.string,

  /**
   * Sets the lower limit for the stepper.
   */
  maximumValue: _propTypes2.default.number,

  /**
   * Sets the upper limit for the stepper.
   */
  minimumValue: _propTypes2.default.number
};

exports.default = ReduxFormStepper;