'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _stepperButton = require('../partials/stepper-button');

var _stepperButton2 = _interopRequireDefault(_stepperButton);

var _dataObjects = require('../../../analytics/data-objects/');

var _componentUtils = require('../../../utils/component-utils');

var utils = _interopRequireWildcard(_componentUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The `StatefulStepper` is used in the `Stepper` component.
 * It manages it's own value as internal state.
 */
var StatefulStepper = function (_React$Component) {
    (0, _inherits3.default)(StatefulStepper, _React$Component);

    function StatefulStepper(props) {
        (0, _classCallCheck3.default)(this, StatefulStepper);

        var _this = (0, _possibleConstructorReturn3.default)(this, (StatefulStepper.__proto__ || (0, _getPrototypeOf2.default)(StatefulStepper)).call(this, props));

        var initialValue = props.initialValue;

        initialValue = _this.getBoundedValue(initialValue);

        _this.state = {
            value: initialValue
        };

        _this.incrementValue = _this.incrementValue.bind(_this);
        _this.decrementValue = _this.decrementValue.bind(_this);
        _this.getBoundedValue = _this.getBoundedValue.bind(_this);
        _this.onChange = _this.onChange.bind(_this);
        _this.setBoundedValue = _this.setBoundedValue.bind(_this);
        _this.interval = 1;
        return _this;
    }

    (0, _createClass3.default)(StatefulStepper, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var boundedValue = this.getBoundedValue(this.state.value, nextProps);
            // This is an optimization, so we can't really test it
            /* istanbul ignore else */
            if (boundedValue !== this.state.value) {
                this.setState({
                    value: boundedValue
                });
            }
        }
    }, {
        key: 'setBoundedValue',
        value: function setBoundedValue(value) {
            var nextValue = this.getBoundedValue(value);

            if (!isNaN(nextValue)) {
                this.setState({
                    value: nextValue
                });
            }

            this.props.onChange && this.props.onChange(nextValue);
        }
    }, {
        key: 'incrementValue',
        value: function incrementValue() {
            this.setBoundedValue(this.state.value + this.interval);
        }
    }, {
        key: 'decrementValue',
        value: function decrementValue() {
            this.setBoundedValue(this.state.value - this.interval);
        }
    }, {
        key: 'getBoundedValue',
        value: function getBoundedValue(newValue) {
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;

            return utils.getBoundedValue(newValue, props.minimumValue, props.maximumValue);
        }
    }, {
        key: 'onChange',
        value: function onChange(e) {
            this.setBoundedValue(e.target.value);
        }
    }, {
        key: 'onClickInput',
        value: function onClickInput(e) {
            var input = e.target;
            input.setSelectionRange(0, input.value.length);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                countAnalyticsName = _props.countAnalyticsName,
                decrementAnalyticsName = _props.decrementAnalyticsName,
                decrementIcon = _props.decrementIcon,
                decrementText = _props.decrementText,
                disabled = _props.disabled,
                name = _props.name,
                incrementAnalyticsName = _props.incrementAnalyticsName,
                incrementIcon = _props.incrementIcon,
                incrementText = _props.incrementText,
                inputId = _props.inputId;


            var decrementDisabled = disabled || this.getBoundedValue(this.state.value - this.interval) === this.state.value;
            var incrementDisabled = disabled || this.getBoundedValue(this.state.value + this.interval) === this.state.value;

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-stepper__inner' },
                        _react2.default.createElement(_stepperButton2.default, {
                            isDecrement: true,
                            onClick: this.decrementValue,
                            icon: decrementIcon,
                            text: decrementText,
                            title: decrementText,
                            disabled: decrementDisabled,
                            analyticsName: decrementAnalyticsName
                        }),
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-stepper__count' },
                            _react2.default.createElement('input', {
                                className: 'pw-stepper__input',
                                id: inputId,
                                type: 'tel',
                                value: this.state.value,
                                name: name,
                                disabled: disabled,
                                onChange: this.onChange,
                                onClick: this.onClickInput,
                                'data-analytics-name': countAnalyticsName
                            })
                        ),
                        _react2.default.createElement(_stepperButton2.default, {
                            isIncrement: true,
                            onClick: this.incrementValue,
                            icon: incrementIcon,
                            text: incrementText,
                            title: incrementText,
                            disabled: incrementDisabled,
                            analyticsName: incrementAnalyticsName
                        })
                    )
                )
            );
        }
    }]);
    return StatefulStepper;
}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

StatefulStepper.defaultProps = {
    countAnalyticsName: _dataObjects.UI_NAME.count,
    decrementAnalyticsName: _dataObjects.UI_NAME.decrementQuantity,
    decrementText: 'decrement quantity',
    disabled: false,
    incrementAnalyticsName: _dataObjects.UI_NAME.incrementQuantity,
    incrementText: 'increment quantity',
    initialValue: 0,
    maximumValue: null,
    minimumValue: 0
};

StatefulStepper.propTypes = {
    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Analytics name to use for the count input.
     */
    countAnalyticsName: _propTypes2.default.string,

    /**
     * Analytics name to use for the decrement button.
     */
    decrementAnalyticsName: _propTypes2.default.string,

    /**
     * Icon to use for the decrement button.
     */
    decrementIcon: _propTypes2.default.string,

    /**
     * Text for the decrement button.
     */
    decrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Defines if the stepper button is disabled.
     */
    disabled: _propTypes2.default.bool,

    /**
     * Analytics name to use for the increment button.
     */
    incrementAnalyticsName: _propTypes2.default.string,

    /**
     * Icon to use for the increment button.
     */
    incrementIcon: _propTypes2.default.string,

    /**
     * Text for the increment button.
     */
    incrementText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Sets the initial value of the Field's input.
     */
    initialValue: _propTypes2.default.number,

    /**
     * This prop sets the id for input.
     */
    inputId: _propTypes2.default.string,

    /**
     * Sets the lower limit for the stepper.
     */
    maximumValue: _propTypes2.default.number,

    /**
     * Sets the upper limit for the stepper.
     */
    minimumValue: _propTypes2.default.number,

    /**
     * The name of the input.
     */
    name: _propTypes2.default.string,

    /**
     * A function called when the stepper changes, and gets the new value
     * passed as an argument.
     */
    onChange: _propTypes2.default.func
};

exports.default = StatefulStepper;