'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _a11yUtils = require('../../a11y-utils');

var _link = require('../link');

var _link2 = _interopRequireDefault(_link);

var _image = require('../image');

var _image2 = _interopRequireDefault(_image);

var _rating = require('../rating');

var _rating2 = _interopRequireDefault(_rating);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TilePrimary = function TilePrimary(_ref) {
    var href = _ref.href,
        children = _ref.children,
        onClick = _ref.onClick;

    var tileProps = {
        className: 'pw-tile__primary'
    };

    if (onClick) {
        tileProps.onClick = onClick;
    }

    if (href) {
        return _react2.default.createElement(
            _link2.default,
            (0, _extends3.default)({ href: href }, tileProps),
            children
        );
    } else {
        // Disabling the jsx-a11y/no-static-element-interactions rule because
        // there are some cases where we want the this container to behave as a
        // button, but it also contains a button. Nesting buttons inside buttons
        // in not valid markup.
        //
        // @url: https://developer.mozilla.org/en/docs/Web/HTML/Element/button
        /* eslint-disable jsx-a11y/no-static-element-interactions */
        var a11y = onClick && {
            role: 'button',
            tabIndex: '0',
            onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(onClick),
            onClick: onClick
        };
        return _react2.default.createElement(
            'div',
            (0, _extends3.default)({}, a11y, tileProps),
            children
        );
        /* eslint-enable jsx-a11y/no-static-element-interactions */
    }
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

TilePrimary.propTypes = {
    children: _propTypes2.default.node,
    className: _propTypes2.default.string,
    href: _propTypes2.default.string,
    onClick: _propTypes2.default.func

    /**
     * `Tile` Component is used to display product/category list.
     * It includes 4 variants (row, column, row+full and column+full).
     * It accepts image, product info (title, quantity, ...) and ratings.
     *
     * @example ./DESIGN.md
     */

};var Tile = function Tile(_ref2) {
    var className = _ref2.className,
        imageProps = _ref2.imageProps,
        href = _ref2.href,
        title = _ref2.title,
        options = _ref2.options,
        price = _ref2.price,
        quantity = _ref2.quantity,
        quantityLabel = _ref2.quantityLabel,
        onClick = _ref2.onClick,
        ratingProps = _ref2.ratingProps,
        isColumn = _ref2.isColumn,
        isFull = _ref2.isFull,
        isSimple = _ref2.isSimple;

    var classes = (0, _classnames2.default)('pw-tile', {
        'pw--column': isColumn,
        'pw--full': isFull,
        'pw--simple': isSimple
    }, className);

    return _react2.default.createElement(
        'article',
        { className: classes },
        _react2.default.createElement(
            TilePrimary,
            { href: href, onClick: onClick },
            _react2.default.createElement(_image2.default, imageProps)
        ),
        _react2.default.createElement(
            'div',
            { className: 'pw-tile__details' },
            _react2.default.createElement(
                'div',
                { className: 'pw-tile__info' },
                _react2.default.createElement(
                    'div',
                    { className: 'pw-tile__info-inner' },
                    _react2.default.createElement(
                        'header',
                        { className: 'pw-tile__header' },
                        _react2.default.createElement(
                            TilePrimary,
                            {
                                className: 'pw-tile__title',
                                href: href,
                                onClick: onClick
                            },
                            title
                        )
                    ),
                    options && _react2.default.createElement(
                        'div',
                        { className: 'pw-tile__options' },
                        options.map(function (option, idx) {
                            return _react2.default.createElement(
                                'div',
                                { className: 'pw-tile__option', key: idx },
                                option.label,
                                option.value
                            );
                        })
                    )
                ),
                ratingProps && _react2.default.createElement(_rating2.default, (0, _extends3.default)({}, ratingProps, { className: (0, _classnames2.default)('pw-tile__rating-stars', ratingProps.className) }))
            ),
            _react2.default.createElement(
                'div',
                { className: 'pw-tile__footer' },
                _react2.default.createElement(
                    'div',
                    { className: 'pw-tile__footer-inner' },
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-tile__quantity' },
                        quantityLabel,
                        quantity
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-tile__price' },
                        price
                    )
                )
            )
        )
    );
};

Tile.propTypes = {
    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * If provided, element will render as a link.
     */
    href: _propTypes2.default.string,

    /**
     * The properties for Image.
     */
    imageProps: _propTypes2.default.object,

    /**
     * Defines if Tile is column.
     */
    isColumn: _propTypes2.default.bool,

    /**
     * Defines if Tile is a bigger version.
     */
    isFull: _propTypes2.default.bool,

    /**
     * Defines if Tile is a simplified version.
     */
    isSimple: _propTypes2.default.bool,

    /**
     * An array of information related to the product.
     */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.string,
        value: _propTypes2.default.string
    })),

    /**
     * Price of the product.
     */
    price: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Quantity of the product.
     */
    quantity: _propTypes2.default.number,

    /**
     * Label for quantity of the product.
     */
    quantityLabel: _propTypes2.default.string,

    /**
     * The properties for Rating.
     */
    ratingProps: _propTypes2.default.object,

    /**
     * Title of the product.
     */
    title: _propTypes2.default.string,

    /**
     * Callback for when the primary is clicked. Not called if an href is passed.
     */
    onClick: _propTypes2.default.func
};

exports.default = Tile;