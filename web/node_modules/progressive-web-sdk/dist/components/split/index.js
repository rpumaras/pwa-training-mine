'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cookieManager = require('../../utils/cookie-manager');

var _cookieManager2 = _interopRequireDefault(_cookieManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cloneChildren = function cloneChildren(children) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return _react2.default.Children.map(children, function (child) {
        if (typeof child.type === 'function') {
            return _react2.default.cloneElement(child, props);
        } else {
            return _react2.default.cloneElement(child);
        }
    });
};

/**
 * A component that maintains the split variant value in state
 * when given a cookie name
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Split = function (_Component) {
    (0, _inherits3.default)(Split, _Component);

    function Split(props) {
        (0, _classCallCheck3.default)(this, Split);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Split.__proto__ || (0, _getPrototypeOf2.default)(Split)).call(this, props));

        _this.state = {
            splitValue: _this.getCookieValue()
        };
        return _this;
    }

    (0, _createClass3.default)(Split, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            if (this.props.splitCookieName) {
                this.cookieSubscriber = _cookieManager2.default.subscribe(this.props.splitCookieName, function (splitValue) {
                    if (_this2.state.splitValue !== splitValue) {
                        _this2.setState({ splitValue: splitValue });
                    }
                });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.props.splitCookieName) {
                this.cookieSubscriber.unsubscribe();
            }
        }
    }, {
        key: 'getCookieValue',
        value: function getCookieValue() {
            return _cookieManager2.default.get(this.props.splitCookieName, this.props.defaultSplitValue);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                splitCookieName = _props.splitCookieName,
                showOnVariant = _props.showOnVariant;


            if (splitCookieName) {
                if (showOnVariant) {
                    if (showOnVariant === this.state.splitValue || showOnVariant === 'null' && !this.state.splitValue) {
                        return _react2.default.createElement(
                            'div',
                            null,
                            cloneChildren(children)
                        );
                    } else {
                        return null;
                    }
                } else {
                    return _react2.default.createElement(
                        'div',
                        null,
                        cloneChildren(children, { splitValue: this.state.splitValue })
                    );
                }
            } else {
                return children;
            }
        }
    }]);
    return Split;
}(_react.Component);

Split.propTypes = {
    /**
     * Node children
     */
    children: _propTypes2.default.node,
    /**
     * Default value of split cookie
     */
    defaultSplitValue: _propTypes2.default.string,
    /**
     * Show children only if the split value matches this value or "null"
     */
    showOnVariant: _propTypes2.default.string,
    /**
     * Name of split cookie
     */
    splitCookieName: _propTypes2.default.string
};

Split.defaultProps = {
    defaultSplitValue: null,
    splitCookieName: null,
    showOnVariant: null
};

exports.default = Split;