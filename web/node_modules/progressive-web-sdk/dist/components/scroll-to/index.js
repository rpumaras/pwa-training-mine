'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var documentBodyElement = document.scrollingElement || document.body;

var animateScroll = function animateScroll(targetPos, duration) {
    var startPos = documentBodyElement.scrollTop;
    var posDelta = targetPos - startPos;
    // Assumes 60 frames per second
    var totalFrames = duration * 0.06;

    // Robert Penner's easeOutCubic function
    var easeOutCubic = function easeOutCubic(currentFrame) {
        return posDelta * (Math.pow(currentFrame / totalFrames - 1, 3) + 1) + startPos;
    };

    var handleAnimationFrame = function handleAnimationFrame(currentFrame) {
        if (currentFrame > totalFrames) {
            return;
        }

        window.requestAnimationFrame(function () {
            documentBodyElement.scrollTop = easeOutCubic(currentFrame);
            handleAnimationFrame(currentFrame + 1);
        });
    };

    handleAnimationFrame(0);
};

var calculateSelectorPos = function calculateSelectorPos(selector) {
    // Grab the first element returned by querySelectorAll
    var element = document.querySelectorAll(selector)[0];

    if (!element) {
        // If the element doesn't exist, return the current scroll position
        return documentBodyElement.scrollTop;
    } else {
        // set focus on the element for a11y purposes
        element.focus();

        return element.getBoundingClientRect().top + window.pageYOffset;
    }
};

var scrollToPosition = function scrollToPosition(target, duration) {
    // Decide whether the target is a height or an element selector
    var targetPos = typeof target === 'number' ? target : calculateSelectorPos(target);

    // If duration is zero, set the scroll position to the target's position
    if (duration === 0) {
        documentBodyElement.scrollTop = targetPos;
    } else {
        animateScroll(targetPos, duration);
    }
};

/**
 * A wrapper-component for `<Button\>` that allows you to scroll to different points on the page.
 * This component can be passed either a page height (in pixels) or an element selector
 * as its target. If multiple elements with the target selector are found, it will scroll
 * to the first one returned by querySelectorAll().
 */
var ScrollTo = function ScrollTo(props) {
    var classes = (0, _classnames2.default)('pw-scroll-to', props.className);

    return _react2.default.createElement(_button2.default, (0, _extends3.default)({}, props, {
        className: classes,
        onClick: function onClick() {
            scrollToPosition(props.target, props.duration);
        }
    }));
};

ScrollTo.defaultProps = {
    duration: 500
};

ScrollTo.propTypes = {
    /**
     * Any children to be nested within this component.
     */
    children: _propTypes2.default.node.isRequired,

    /**
     * The target's height position from the top of the page, in pixels OR
     * the target's selector, such as it's ID or class name.
     */
    target: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * If specified, overrides the default scrolling speed.
     */
    duration: _propTypes2.default.number
};

exports.default = ScrollTo;