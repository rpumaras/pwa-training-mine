'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _listTile = require('../list-tile');

var _listTile2 = _interopRequireDefault(_listTile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The `List` component is used to enclose a series of related items, providing a
 * consistent balance of space and separation between each item.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var List = function List(_ref) {
    var items = _ref.items,
        className = _ref.className,
        clickHandler = _ref.clickHandler,
        component = _ref.component,
        children = _ref.children;

    var classes = (0, _classnames2.default)('pw-list', className);

    return _react2.default.createElement(
        'div',
        { className: classes },
        _react2.default.Children.count(children) ? children : items.map(function (item, idx) {
            var componentToRender = item.component || component || _listTile2.default;

            return _react2.default.createElement(componentToRender, (0, _extends3.default)({
                key: idx,
                onClick: function onClick() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return clickHandler.apply(undefined, [idx].concat(args));
                },
                children: item.children || item.title
            }, item));
        })
    );
};

List.defaultProps = {
    items: []
};

List.propTypes = {
    /**
     * Any children to be nested within the List.
     */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),

    /**
     * The CSS class/classes to be applied to the root element.
     */
    className: _propTypes2.default.string,

    /**
     * A function to be called when an item in the list is
     * clicked. Not called if the item has an `href` set, or if
     * children are passed directly.
     */
    clickHandler: _propTypes2.default.func,

    /**
     * The component to render for each item.
     * By default, List will render ListTiles.
     * If an item has a component prop defined within its data,
     * that component will be rendered instead.
     */
    component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

    /**
     * An array of the items that should be rendered.
     */
    items: _propTypes2.default.arrayOf(_propTypes2.default.object)
};

exports.default = List;