'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypeUtils = require('../../prop-type-utils');

var _utils = require('../../utils/utils');

var _tabsStrip = require('./tabs-strip');

var _tabsStrip2 = _interopRequireDefault(_tabsStrip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related component:
 *
 * * [TabsPanel](#!/TabsPanel)
 *
 * This component is used to display tabbed navigation.
 * User can select a tab to view its related content.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Tabs = function (_React$Component) {
    (0, _inherits3.default)(Tabs, _React$Component);

    function Tabs(props) {
        (0, _classCallCheck3.default)(this, Tabs);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Tabs.__proto__ || (0, _getPrototypeOf2.default)(Tabs)).call(this, props));

        _this.state = {
            activeTabIndex: props.activeIndex

            // Bind class functions to object
        };_this.setIndex = _this.setIndex.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Tabs, [{
        key: 'setIndex',
        value: function setIndex(index) {
            var activeTabIndex = this.state.activeTabIndex;

            // This is an optimization and does not need testing
            /* istanbul ignore if */

            if (index === activeTabIndex) {
                return;
            }

            this.setState({
                activeTabIndex: index
            });

            this.props.onChange(index);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.activeIndex !== this.props.activeIndex) {
                this.setState({
                    activeTabIndex: newProps.activeIndex
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var activeTabIndex = this.state.activeTabIndex;
            var _props = this.props,
                children = _props.children,
                className = _props.className,
                isScrollable = _props.isScrollable;

            var classes = (0, _classnames2.default)('pw-tabs', className);

            return _react2.default.createElement(
                'div',
                { className: classes, 'data-selected-index': activeTabIndex },
                _react2.default.createElement(
                    _tabsStrip2.default,
                    {
                        activeIndex: activeTabIndex,
                        setIndex: this.setIndex,
                        isScrollable: isScrollable
                    },
                    children
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'pw-tabs__panels' },
                    _react2.default.Children.map(children, function (child, idx) {
                        return _react2.default.cloneElement(child, {
                            isActive: activeTabIndex === idx,
                            key: idx
                        });
                    })
                )
            );
        }
    }]);
    return Tabs;
}(_react2.default.Component);

Tabs.defaultProps = {
    activeIndex: 0,
    onChange: _utils.noop
};

Tabs.propTypes = {
    /**
     * Nodes to be used as tab panels, can be a combination of markup and/or
     * React components. There should be more than 1 child panel.
     */
    children: _propTypes2.default.node.isRequired,

    /**
     * ActiveIndex defines the active panel(selected).
     */
    activeIndex: _propTypeUtils.childIndexProp,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Indicates whether the tab links are scrollable or not.
     */
    isScrollable: _propTypes2.default.bool,

    /**
     * This function is called whenever the tab is changed.
     */
    onChange: _propTypes2.default.func
};

exports.default = Tabs;