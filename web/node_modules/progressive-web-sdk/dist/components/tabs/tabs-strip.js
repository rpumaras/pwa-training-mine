'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

var _a11yUtils = require('../../a11y-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OVERFLOW_CHECK_INTERVAL = 200;

/**
 * This component is internally used inside `Tab` compoent.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var TabsStrip = function (_React$Component) {
    (0, _inherits3.default)(TabsStrip, _React$Component);

    function TabsStrip(props) {
        (0, _classCallCheck3.default)(this, TabsStrip);

        var _this = (0, _possibleConstructorReturn3.default)(this, (TabsStrip.__proto__ || (0, _getPrototypeOf2.default)(TabsStrip)).call(this, props));

        _this.state = {
            overflowLeft: false,
            overflowRight: false,
            overflowWidth: 0
        };

        _this.checkOverflow = (0, _lodash2.default)(_this.checkOverflow.bind(_this), OVERFLOW_CHECK_INTERVAL);
        _this.handleScroll = (0, _lodash2.default)(_this.handleScroll.bind(_this), OVERFLOW_CHECK_INTERVAL);
        return _this;
    }

    (0, _createClass3.default)(TabsStrip, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.isScrollable) {
                // Check if tab links are overflowing and apply styling classes
                this.checkOverflow();

                // Re-calculate tab list content width when viewport changes size
                window.addEventListener('resize', this.checkOverflow);

                this._tabStrip.addEventListener('scroll', this.handleScroll, false);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            /* istanbul ignore else */
            if (this.props.isScrollable) {
                // Remove eventListeners if component gets removed
                window.removeEventListener('resize', this.checkOverflow);

                this._tabStrip.removeEventListener('scroll', this.handleScroll, false);
            }
        }
    }, {
        key: 'checkOverflow',
        value: function checkOverflow() {
            var scrollWidth = this._tabStrip.scrollWidth;
            var containerWidth = this._tabStrip.clientWidth;

            if (scrollWidth > containerWidth) {
                this.setState({
                    overflowRight: true,
                    overflowWidth: scrollWidth - containerWidth
                });
            } else {
                this.setState({
                    overflowLeft: false,
                    overflowRight: false
                });
            }
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll() {
            var container = this._tabStrip;

            // If scroll position is not at the initial position, set overflowLeft to true
            if (container.scrollLeft > 0 && !this.state.overflowLeft) {
                this.setState({
                    overflowLeft: true
                });
            } else if (container.scrollLeft === 0) {
                this.setState({
                    overflowLeft: false
                });
            }

            // If scroll position reached all the way to the right, set overflowRight to false
            if (container.scrollLeft < this.state.overflowWidth && !this.state.overflowRight) {
                this.setState({
                    overflowRight: true
                });
            } else if (container.scrollLeft === this.state.overflowWidth) {
                this.setState({
                    overflowRight: false
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                activeIndex = _props.activeIndex,
                setIndex = _props.setIndex,
                isScrollable = _props.isScrollable;


            var classes = (0, _classnames2.default)('pw-tabs__strip-container', {
                'pw--is-scrollable': isScrollable,
                'pw--overflow-left': this.state.overflowLeft,
                'pw--overflow-right': this.state.overflowRight
            });

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    'ol',
                    {
                        role: 'tablist',
                        className: 'pw-tabs__strip',
                        ref: function ref(el) {
                            _this2._tabStrip = el;
                        }
                    },
                    _react2.default.Children.map(children, function (item, idx) {
                        var isActive = idx === activeIndex;
                        var onClick = function onClick() {
                            return setIndex(idx);
                        };
                        var tabClasses = (0, _classnames2.default)('pw-tabs__tab', {
                            'pw--is-active': isActive
                        });

                        return _react2.default.createElement(
                            'li',
                            {
                                className: tabClasses,
                                role: 'presentation',
                                key: idx
                            },
                            _react2.default.createElement(
                                'a',
                                {
                                    className: 'pw-tabs__link',
                                    role: 'tab',
                                    tabIndex: '0',
                                    'aria-selected': isActive,
                                    onClick: onClick,
                                    onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(onClick)
                                },
                                item.props.title
                            )
                        );
                    })
                )
            );
        }
    }]);
    return TabsStrip;
}(_react2.default.Component);

TabsStrip.propTypes = {
    /**
     * ActiveIndex defines the active tab.
     */
    activeIndex: _propTypes2.default.number,

    /**
     * The content of the TabStrip.
     */
    children: _propTypes2.default.node,

    /**
     * Indicates whether the strip is scrollable or not.
     */
    isScrollable: _propTypes2.default.bool,

    /**
     * This function is called wto change the active tab.
     */
    setIndex: _propTypes2.default.func
};

exports.default = TabsStrip;