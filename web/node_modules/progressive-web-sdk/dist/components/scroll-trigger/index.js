'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The ScrollTrigger component allows you to register callbacks for when it is scrolled into or out of view
 */

var ScrollTrigger = function (_React$Component) {
    (0, _inherits3.default)(ScrollTrigger, _React$Component);

    function ScrollTrigger(props) {
        (0, _classCallCheck3.default)(this, ScrollTrigger);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ScrollTrigger.__proto__ || (0, _getPrototypeOf2.default)(ScrollTrigger)).call(this, props));

        _this.state = {
            inView: false
        };

        _this.handleScroll = (0, _lodash2.default)(_this.handleScroll.bind(_this), props.throttle);
        return _this;
    }

    (0, _createClass3.default)(ScrollTrigger, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.addEventListener('scroll', this.handleScroll);
            window.addEventListener('resize', this.handleScroll);

            // Check if the component has mounted in view
            this.handleScroll();
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll() {
            var _props = this.props,
                offsetTop = _props.offsetTop,
                offsetBottom = _props.offsetBottom,
                onEnter = _props.onEnter,
                onLeave = _props.onLeave;


            var top = 0;
            var bottom = 0;
            var boundingClientRect = void 0;

            // When using enzyme's `shallow`, then `this.element` will be undefined!
            // Check that it exists, before using it...
            if (this.element && this.element.getBoundingClientRect) {
                boundingClientRect = this.element.getBoundingClientRect();
                top = boundingClientRect.top;
                bottom = boundingClientRect.bottom;
            }

            var boundingBoxTop = top + offsetTop;
            var boundingBoxBottom = bottom + offsetBottom;

            var innerHeight = window.innerHeight;

            var inView = boundingBoxTop <= innerHeight && boundingBoxTop >= 0 || boundingBoxBottom <= innerHeight && boundingBoxBottom >= 0;

            var hasChanged = inView !== this.state.inView;

            if (hasChanged) {
                this.setState({
                    inView: inView
                });

                if (inView) {
                    onEnter();
                } else {
                    onLeave();
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('scroll', this.handleScroll);
            window.removeEventListener('resize', this.handleScroll);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                children = _props2.children,
                className = _props2.className;


            var classes = (0, _classnames2.default)('pw-scroll-trigger', className);

            return _react2.default.createElement(
                'div',
                { className: classes, ref: function ref(el) {
                        _this2.element = el;
                    } },
                children
            );
        }
    }]);
    return ScrollTrigger;
}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ScrollTrigger.defaultProps = {
    offsetBottom: 0,
    offsetTop: 0,
    throttle: 50,
    onEnter: _utils.noop,
    onLeave: _utils.noop
};

ScrollTrigger.propTypes = {
    /**
     * This children of this component.
     * ScrollTrigger will take their height into account when determining if the component is in view
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,

    /**
     * Offsets the "bottom" position of the component.
     * A negative value offsets the bottom above its real position,
     * while a positive value offsets the bottom below its real position
     */
    offsetBottom: _propTypes2.default.number,

    /**
     * Offsets the "top" position of the component.
     * A negative value offsets the top above its real position,
     * while a positive value offsets the top below its real position
     */
    offsetTop: _propTypes2.default.number,

    /**
     * Determines how frequently the component checks if it has been scrolled into view
     */
    throttle: _propTypes2.default.number,

    /**
     * This function is called when the element is scrolled into view
     */
    onEnter: _propTypes2.default.func,

    /**
     * This function is called when the element is scrolled out of view
     */
    onLeave: _propTypes2.default.func
};

exports.default = ScrollTrigger;