'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _static = require('inline-style-prefixer/static');

var _static2 = _interopRequireDefault(_static);

var _a11yUtils = require('../../a11y-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var WRAPPER_CLASSES = 'pw-sheet__wrapper';

var nextInt = function () {
    var i = 0;
    return function () {
        return i++;
    };
}();

/**
 * Return the (possibly prefixed) name of the 'transitionend' event
 * on the current browser or null if unsupported.
 *
 * @example ./DESIGN.md
 */
var getTransitionEndEventName = function getTransitionEndEventName() {
    var body = document.body;
    var transitions = {
        transition: 'transitionend',
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd otransitionend'
    };

    for (var t in transitions) {
        /* We can't really test this in jest */
        /* istanbul ignore if */
        if (body.style[t] !== undefined) {
            return transitions[t];
        }
    }
    return null;
};

/* Lookup tables for styling */

var STYLE_PARAMETERS = {
    'slide-right': {
        gutter: 'left',
        axis: 'X',
        extreme: 100
    },
    'slide-left': {
        gutter: 'right',
        axis: 'X',
        extreme: -100
    },
    'slide-top': {
        gutter: 'bottom',
        axis: 'Y',
        extreme: -100
    },
    'slide-bottom': {
        gutter: 'top',
        axis: 'Y',
        extreme: 100
    }
};

var IS_OPEN = {
    enter: false,
    enterActive: true,
    leave: true,
    leaveActive: false
};

var IS_ANIMATING = {
    enter: false,
    enterActive: true,
    leave: false,
    leaveActive: true
};

var MASK_OPACITY_MULTIPLIER = {
    enter: 0,
    enterActive: 1,
    leave: 1,
    leaveActive: 0

    // The props from the Sheet component pass directly to SheetContent,
    // making propType validation redundant.
    /* eslint-disable react/prop-types */
    // All props inherited from parent on this private component.

};
var SheetContent = function (_React$Component) {
    (0, _inherits3.default)(SheetContent, _React$Component);

    function SheetContent(props) {
        (0, _classCallCheck3.default)(this, SheetContent);

        // Unique ids for ARIA attributes
        var _this = (0, _possibleConstructorReturn3.default)(this, (SheetContent.__proto__ || (0, _getPrototypeOf2.default)(SheetContent)).call(this, props));

        var baseId = _this.props.id || nextInt();
        _this.id = _this.props.id || 'pw-sheet-' + baseId;
        _this.headerId = 'sheet__header-' + baseId;
        _this.footerId = 'sheet__footer-' + baseId;

        // Determine if we are in mobile safari, we need this to apply a scroll fix.
        _this.isIOS = !!navigator.userAgent.match(/Version\/([\d.]+)([^S](Safari)|[^M]*(Mobile)[^S]*(Safari))/);

        // Bind functions to this components scope.
        _this.onWrapperClick = _this.onWrapperClick.bind(_this);
        _this.triggerDismiss = _this.triggerDismiss.bind(_this);
        _this.onWrapperMountOrUnmount = _this.onWrapperMountOrUnmount.bind(_this);
        _this.onInnerScroll = _this.onInnerScroll.bind(_this);
        _this.callbackOnTransitionEnd = _this.callbackOnTransitionEnd.bind(_this);

        _this.state = { phase: 'enter' };
        _this.transitionEndEventName = getTransitionEndEventName();
        _this.wrapperEl = null;
        return _this;
    }

    (0, _createClass3.default)(SheetContent, [{
        key: 'onWrapperMountOrUnmount',
        value: function onWrapperMountOrUnmount(el) {
            this.wrapperEl = el;

            // Bump the content 1px down to account for the iOS scrolling
            // issue, but only if the component is mounted
            if (this.wrapperEl !== null) {
                this.wrapperEl.scrollTop = 1;
            }
        }
    }, {
        key: 'onInnerScroll',
        value: function onInnerScroll() {
            if (!this.isIOS) {
                return;
            }

            // Bump the inner content div down or up 1px, so the underlying content
            // isn't scrolled (iOS issue)
            var el = this.wrapperEl;
            var scrollTop = el.scrollTop,
                scrollHeight = el.scrollHeight;

            var currentScroll = scrollTop + el.offsetHeight;

            clearTimeout(this.scrollTimer);

            if (el.scrollTop === 1 || el.scrollTop === scrollTop - 1) {
                return;
            }

            this.scrollTimer = setTimeout(function () {
                if (scrollTop === 0) {
                    el.scrollTop = 1;
                } else if (currentScroll === scrollHeight) {
                    el.scrollTop = scrollTop - 1;
                }
            }, 100);
        }
    }, {
        key: 'getWrapperStyle',
        value: function getWrapperStyle() {
            var _props = this.props,
                coverage = _props.coverage,
                duration = _props.duration,
                effect = _props.effect,
                easing = _props.easing;
            var phase = this.state.phase;

            // This is a sanity test that is difficult to test.
            /* istanbul ignore if */

            if (!phase) {
                return {};
            }
            var open = IS_OPEN[phase];
            var style = {};
            var gutterCoverage = 100 - parseFloat(coverage);

            if (effect === 'modal-center') {
                var modalCoverage = gutterCoverage / 2 + '%';

                style.transform = 'scale(' + (open ? '1' : '0') + ')';
                style.top = modalCoverage;
                style.right = modalCoverage;
                style.bottom = modalCoverage;
                style.left = modalCoverage;
            } else {
                var _STYLE_PARAMETERS$eff = STYLE_PARAMETERS[effect],
                    gutter = _STYLE_PARAMETERS$eff.gutter,
                    axis = _STYLE_PARAMETERS$eff.axis,
                    extreme = _STYLE_PARAMETERS$eff.extreme;


                style[gutter] = gutterCoverage + '%';
                style.transform = 'translate' + axis + '(' + (open ? 0 : extreme) + '%)';
            }

            if (IS_ANIMATING[phase]) {
                style.transition = 'transform ' + duration + 'ms ' + easing;
            }

            return (0, _static2.default)(style);
        }
    }, {
        key: 'getMaskStyle',
        value: function getMaskStyle() {
            var _props2 = this.props,
                duration = _props2.duration,
                maskOpacity = _props2.maskOpacity,
                easing = _props2.easing;
            var phase = this.state.phase;

            // This is a sanity test that is difficult to test.
            /* istanbul ignore if */

            if (!phase) {
                return {};
            }
            var style = {};

            // MASK_OPACITY_MULTIPLIER is 0 or 1 depending whether the
            // mask should be transparent
            style.opacity = maskOpacity * MASK_OPACITY_MULTIPLIER[phase];

            if (IS_ANIMATING[phase]) {
                style.transition = 'opacity ' + duration + 'ms ' + easing;
            }
            return style;
        }
    }, {
        key: 'componentWillAppear',
        value: function componentWillAppear(callback) {
            this.componentWillEnter(callback);
        }
    }, {
        key: 'componentDidAppear',
        value: function componentDidAppear() {
            this.componentDidEnter();
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter(callback) {
            var _this2 = this;

            this.props.onBeforeOpen();

            requestAnimationFrame(function () {
                _this2.setState({ phase: 'enter' }, function () {
                    requestAnimationFrame(function () {
                        _this2.setState({ phase: 'enterActive' });
                        _this2.callbackOnTransitionEnd(_this2.wrapperEl, _this2.props.duration, callback);
                    });
                });
            });
        }
    }, {
        key: 'componentDidEnter',
        value: function componentDidEnter() {
            this.props.onOpen();
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave(callback) {
            var _this3 = this;

            this.props.onBeforeClose();

            requestAnimationFrame(function () {
                _this3.setState({ phase: 'leave' }, function () {
                    requestAnimationFrame(function () {
                        _this3.setState({ phase: 'leaveActive' });
                        _this3.callbackOnTransitionEnd(_this3.wrapperEl, _this3.props.duration, callback);
                    });
                });
            });
        }
    }, {
        key: 'componentDidLeave',
        value: function componentDidLeave() {
            this.props.onClose();
        }
    }, {
        key: 'callbackOnTransitionEnd',
        value: function callbackOnTransitionEnd(el, duration, callback) {
            var _this4 = this;

            // Can't really test the if here in Jest
            /* istanbul ignore if */
            if (this.transitionEndEventName) {
                var onTransitionEnd = function onTransitionEnd(event) {
                    if (event.target === el) {
                        callback();
                        el.removeEventListener(_this4.transitionEndEventName, onTransitionEnd);
                    }
                };
                el.addEventListener(this.transitionEndEventName, onTransitionEnd);
            } else {
                // Fallback to setTimeout if event not supported (JsDOM, for example)
                setTimeout(callback, duration);
            }
        }
    }, {
        key: 'onWrapperClick',
        value: function onWrapperClick(e) {
            // Only close if the WRAPPER was clicked. This is necessary for when the
            // sheet's `shrinkToContent` prop is set to true and the INNER container
            // is smaller than the wrapper which can create the situation where the
            // wrapper is indistinguishable from the mask element. As such, when the
            // user BELIEVES they clicked the mask, the modal should close...
            if (e.target.className === WRAPPER_CLASSES) {
                this.triggerDismiss();
            }
        }
    }, {
        key: 'triggerDismiss',
        value: function triggerDismiss() {
            this.props.onDismiss();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this5 = this;

            var _props3 = this.props,
                shrinkToContent = _props3.shrinkToContent,
                title = _props3.title,
                headerContent = _props3.headerContent,
                footerContent = _props3.footerContent,
                children = _props3.children,
                effect = _props3.effect,
                className = _props3.className;


            var classes = (0, _classnames2.default)('pw-sheet', 'pw--' + effect, className);
            var maskClasses = (0, _classnames2.default)('pw-sheet__mask', 'pw--is-visible');
            var innerClasses = (0, _classnames2.default)('pw-sheet__inner', {
                'pw--shrink-to-content': shrinkToContent
            });

            var header = (headerContent || title) && _react2.default.createElement(
                'div',
                { className: 'pw-sheet__header', id: this.headerId },
                title && _react2.default.createElement(
                    'h1',
                    null,
                    title
                ),
                headerContent
            );

            var footer = footerContent && _react2.default.createElement(
                'div',
                { className: 'pw-sheet__footer', id: this.footerId },
                footerContent
            );

            return _react2.default.createElement(
                'div',
                { className: classes, id: this.id },
                _react2.default.createElement('div', {
                    className: maskClasses,
                    tabIndex: '-1',
                    style: this.getMaskStyle(),
                    'aria-hidden': 'true',
                    onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(this.triggerDismiss),
                    role: 'presentation',
                    onTouchMove: /* istanbul ignore next */function onTouchMove(e) {
                        e.preventDefault();
                    },
                    onClick: this.triggerDismiss
                }),
                _react2.default.createElement(
                    'div',
                    {
                        className: WRAPPER_CLASSES,
                        onScroll: function onScroll() {
                            return _this5.onInnerScroll();
                        },
                        tabIndex: '-1',
                        onClick: this.onWrapperClick,
                        onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(this.onWrapperClick),
                        style: this.getWrapperStyle(),
                        role: 'presentation',
                        ref: this.onWrapperMountOrUnmount
                    },
                    _react2.default.createElement(
                        'div',
                        {
                            className: innerClasses,
                            tabIndex: '0',
                            role: 'dialog',
                            'aria-labelledby': this.headerId
                        },
                        header,
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-sheet__content' },
                            children
                        ),
                        footer
                    )
                )
            );
        }
    }]);
    return SheetContent;
}(_react2.default.Component);

/* eslint-enable react/prop-types */

exports.default = SheetContent;