'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DESKTOP_COLUMN_COUNT = exports.TABLET_COLUMN_COUNT = exports.MOBILE_COLUMN_COUNT = exports.DESKTOP_BREAKPOINT = exports.TABLET_BREAKPOINT = exports.MOBILE_BREAKPOINT = exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MOBILE_BREAKPOINT = 'mobile'; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var TABLET_BREAKPOINT = 'tablet';
var DESKTOP_BREAKPOINT = 'desktop';
var MOBILE_COLUMN_COUNT = 4;
var TABLET_COLUMN_COUNT = 8;
var DESKTOP_COLUMN_COUNT = 12;

var generateModifiers = function generateModifiers(props) {
    var classes = {};
    var breakpoints = [MOBILE_BREAKPOINT, TABLET_BREAKPOINT, DESKTOP_BREAKPOINT];
    var columns = [MOBILE_COLUMN_COUNT, TABLET_COLUMN_COUNT, DESKTOP_COLUMN_COUNT];

    breakpoints.forEach(function (currentBreakpoint, i) {
        var breakpointProps = props[currentBreakpoint];
        var maxColumnsForThisBreakpoint = columns[i];

        // Generate a span modifier class equal to the `span` prop. Can't be
        // larger than the `maxColumnsForThisBreakpoint`
        if (breakpointProps && breakpointProps.span <= maxColumnsForThisBreakpoint && breakpointProps.span !== null) {
            classes['pw--span-' + breakpointProps.span + '@' + currentBreakpoint] = true;
        }

        // Generate full width modifier class for where there is no `span` prop,
        // or if the span value is larger than the `maxColumnsForThisBreakpoint`
        if (!breakpointProps || breakpointProps.span > maxColumnsForThisBreakpoint || !breakpointProps.span) {
            classes['pw--full-width@' + currentBreakpoint] = true;
        }

        // Generate a pre modifier class equal to the `pre` prop. Must be less
        // than the `maxColumnsForThisBreakpoint`
        if (breakpointProps && breakpointProps.pre && breakpointProps.pre < maxColumnsForThisBreakpoint) {
            classes['pw--pre-' + breakpointProps.pre + '@' + currentBreakpoint] = true;
        }

        // Generate a pre modifier class equal to the `post` prop. Must be less
        // than the `maxColumnsForThisBreakpoint`
        if (breakpointProps && breakpointProps.post && breakpointProps.post < maxColumnsForThisBreakpoint) {
            classes['pw--post-' + breakpointProps.post + '@' + currentBreakpoint] = true;
        }
    });

    return classes;
};

/**
 * Related component:
 *
 * * [Grid](#!/Grid)
 *
 * `GridSpan` is the grid component that does much of the heavy lifting. It is where
 * all the grid layout behavior for all the breakpoints is defined.
 *
 * Our grid framework of choice is [Susy](http://susydocs.oddbird.net/en/latest/)
 * and all of Grid's and GridSpan's behaviors are defined with the Susy mixins.
 *
 * @example ./DESIGN.md
 */
var GridSpan = function GridSpan(props) {
    var classes = (0, _classnames2.default)('pw-grid__span', (0, _extends3.default)({}, generateModifiers(props)), props.className);

    return _react2.default.createElement(
        'div',
        { className: classes },
        props.children
    );
};

var breakpointShape = {
    span: _propTypes2.default.number,
    pre: _propTypes2.default.number,
    post: _propTypes2.default.number
};

GridSpan.propTypes = {
    /**
     * Any children to be nested within this component.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Accepts an object shape that defines the `GridSpan`'s behavior at the
     * **desktop** breakpoint. See the below Breakpoint Modifiers section for
     * details about defining the breakpoint behaviors. The actual media query
     * breakpoint is defined in the component's CSS.
     */
    desktop: _propTypes2.default.shape(breakpointShape),

    /**
     * Accepts an object shape that defines the `GridSpan`'s behavior at the
     * **mobile** breakpoint. See the below Breakpoint Modifiers section for
     * details about defining the breakpoint behaviors. The actual media query
     * breakpoint is defined in the component's CSS.
     */
    mobile: _propTypes2.default.shape(breakpointShape),

    /**
     * Accepts an object shape that defines the `GridSpan`'s behavior at the
     * **tablet** breakpoint. See the below Breakpoint Modifiers section for
     * details about defining the breakpoint behaviors. The actual media query
     * breakpoint is defined in the component's CSS.
     */
    tablet: _propTypes2.default.shape(breakpointShape)
};

exports.default = GridSpan;
exports.MOBILE_BREAKPOINT = MOBILE_BREAKPOINT;
exports.TABLET_BREAKPOINT = TABLET_BREAKPOINT;
exports.DESKTOP_BREAKPOINT = DESKTOP_BREAKPOINT;
exports.MOBILE_COLUMN_COUNT = MOBILE_COLUMN_COUNT;
exports.TABLET_COLUMN_COUNT = TABLET_COLUMN_COUNT;
exports.DESKTOP_COLUMN_COUNT = DESKTOP_COLUMN_COUNT;