'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withPushMessaging = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

var _logger = require('../../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

var _messaging = require('../../utils/messaging');

var _constants = require('../../store/push-messaging/constants');

var _actions = require('../../store/push-messaging/actions');

var messagingActions = _interopRequireWildcard(_actions);

var _selectors = require('../../store/push-messaging/selectors');

var messagingSelectors = _interopRequireWildcard(_selectors);

var _componentUtils = require('../../utils/component-utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = new _logger2.default('[Messaging UI]'); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Higher order component that provides props and methods for displaying "ask"
 * components to users before triggering the system-ask for enabling push messaging
 * on a given website.
 */
var withPushMessaging = exports.withPushMessaging = function withPushMessaging(WrappedComponent) {
    var _WithPushMessaging$pr;

    var WithPushMessaging = function (_React$Component) {
        (0, _inherits3.default)(WithPushMessaging, _React$Component);

        function WithPushMessaging(props) {
            (0, _classCallCheck3.default)(this, WithPushMessaging);

            var _this = (0, _possibleConstructorReturn3.default)(this, (WithPushMessaging.__proto__ || (0, _getPrototypeOf2.default)(WithPushMessaging)).call(this, props));

            _this.state = {
                shouldAsk: false
            };

            _this.dismissed = _this.dismissed.bind(_this);
            _this.accepted = _this.accepted.bind(_this);
            return _this;
        }

        (0, _createClass3.default)(WithPushMessaging, [{
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(nextProps) {
                // If we're unable to subscribe (Messaging Client not initialized,
                // visitor blocked permissions, etc.) then don't bother doing anything
                if (!nextProps.canSubscribe && !this.props.canSubscribe) {
                    return false;
                }

                var shouldAskResult = (0, _messaging.shouldAsk)(logger, nextProps, this.state.shouldAsk);

                if (this.state.shouldAsk !== shouldAskResult) {
                    // We only want to trigger a state update if the ask is now eligible
                    // or no longer eligible to be shown
                    this.setState({
                        shouldAsk: shouldAskResult
                    });

                    // We only want to trigger analytics for a shown channel offer
                    // if it is (ostensibly) now shown to the visitor
                    if (shouldAskResult) {
                        this.props.channelOfferShown(this.props.channelName);
                    }
                }

                // Return value for testing
                return true;
            }

            /**
             * This method should be called upon dismissal of the ask (e.g. a visitor
             * clicking the "Dismiss" button on a prompt). It will change the value
             * of the state variable 'shouldAsk' to false.
             *
             * Visit countdown is started, if not disabled
             */

        }, {
            key: 'dismissed',
            value: function dismissed() {
                this.setState({
                    shouldAsk: false
                });

                // TODO: Send softask-dismissed analytics event

                this.startVisitCountdown();
                return _promise2.default.resolve();
            }
        }, {
            key: 'startVisitCountdown',
            value: function startVisitCountdown() {
                if (this.props.deferOnDismissal > 0) {
                    logger.forceLog('Visit countdown started ' + (this.props.channelName ? 'for channel ' + this.props.channelName : ''));
                    this.props.startVisitCountdown(this.props.deferOnDismissal, this.props.channelName);
                }
            }

            /**
             * This method should be called upon acceptance of the ask (e.g. a visitor
             * clicking the "Accept" button on a prompt)
             *
             * Dismissal of the system ask will start a visit countdown, if not disabled
             */

        }, {
            key: 'accepted',
            value: function accepted() {
                var _this2 = this;

                var channels = void 0;

                if (this.props.channelName) {
                    channels = (0, _defineProperty3.default)({}, this.props.channelName, true);
                }

                return this.props.subscribe(channels).then(function (messagingState) {
                    if (messagingState.subscribed) {
                        logger.forceLog('Subscribed ' + (_this2.props.channelName ? 'to channel ' + _this2.props.channelName : ''));
                    } else if (!messagingState.canSubscribe) {
                        logger.forceLog('Permissions blocked by user; can no longer subscribe.');
                    } else {
                        // The user dismissed the system-ask - back-off from asking again
                        _this2.startVisitCountdown();
                        logger.forceLog('System ask was dismissed');
                    }

                    return messagingState;
                });
            }
        }, {
            key: 'render',
            value: function render() {
                return _react2.default.createElement(WrappedComponent
                // Wrapped components should use `shouldAsk` to toggle final
                // visibility of the component
                , (0, _extends3.default)({ shouldAsk: this.state.shouldAsk,
                    accepted: this.accepted,
                    dismissed: this.dismissed

                    // All other props if you'd like to handle it yourself, as
                    // well as those passed through to the wrapped component
                }, this.props));
            }
        }]);
        return WithPushMessaging;
    }(_react2.default.Component);

    WithPushMessaging.displayName = 'WithPushMessaging(' + (0, _componentUtils.getDisplayName)(WrappedComponent) + ')';
    WithPushMessaging.defaultProps = {
        showOnPageCount: 3,
        deferOnDismissal: 3
    };
    WithPushMessaging.propTypes = (_WithPushMessaging$pr = {}, (0, _defineProperty3.default)(_WithPushMessaging$pr, _constants.VISIT_COUNTDOWNS, _propTypes2.default.object.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'canSubscribe', _propTypes2.default.bool.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'channelOfferShown', _propTypes2.default.func.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'channels', _propTypes2.default.array.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'isSubscribed', _propTypes2.default.bool.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'pageCount', _propTypes2.default.number.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'startVisitCountdown', _propTypes2.default.func.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'subscribe', _propTypes2.default.func.isRequired), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'channelName', _propTypes2.default.string), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'deferOnDismissal', _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool])), (0, _defineProperty3.default)(_WithPushMessaging$pr, 'showOnPageCount', _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool])), _WithPushMessaging$pr);

    return WithPushMessaging;
};

var mapStateToProps = (0, _reselectImmutableHelpers.createPropsSelector)((0, _defineProperty3.default)({
    isSubscribed: messagingSelectors.isSubscribed,
    canSubscribe: messagingSelectors.canSubscribe,
    channels: messagingSelectors.getChannels,
    pageCount: messagingSelectors.getPageCount
}, _constants.VISIT_COUNTDOWNS, messagingSelectors.getVisitCountdowns));

var mapDispatchToProps = {
    startVisitCountdown: messagingActions.startVisitCountdown,
    subscribe: messagingActions.subscribe,
    channelOfferShown: messagingActions.channelOfferShown
};

var _withPushMessaging = function _withPushMessaging(WrappedComponent) {
    return (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(withPushMessaging(WrappedComponent));
};

exports.default = _withPushMessaging;