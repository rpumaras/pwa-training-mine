'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.aspectPropType = exports.default = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypeUtils = require('../../prop-type-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var INT_FRAGMENT = '[1-9]\\d*';
var TWO_INT_REGEX = new RegExp('^' + INT_FRAGMENT + ':' + INT_FRAGMENT + '$');

/**
 * Fluid-width element with an intrinsic width/height ratio. Best used with
 * media elements like `img` or `video`.
 */

var Ratio = function Ratio(_ref) {
    var aspect = _ref.aspect,
        children = _ref.children,
        className = _ref.className,
        height = _ref.height,
        width = _ref.width;

    var w = void 0;
    var h = void 0;

    if (aspect) {
        var _aspect$split = aspect.split(':');

        var _aspect$split2 = (0, _slicedToArray3.default)(_aspect$split, 2);

        w = _aspect$split2[0];
        h = _aspect$split2[1];
    } else {
        w = width;
        // these are guaranteed to be defined and positive if proptypes pass

        h = height;
    }

    var ratio = h / w * 100;
    var innerStyle = {
        paddingBottom: ratio + '%'
    };
    var classes = (0, _classnames2.default)('pw-ratio', className);

    return _react2.default.createElement(
        'div',
        { className: classes },
        _react2.default.createElement('div', { className: 'pw-ratio__fill', style: innerStyle }),
        _react2.default.createElement(
            'div',
            { className: 'pw-ratio__inner' },
            children
        )
    );
};

Ratio.defaultProps = {
    style: {},
    height: 1,
    width: 1
};

var aspectPropType = function aspectPropType(props, propName) {
    var aspect = props[propName];

    if (aspect === undefined) {
        // If undefined, assume that the height and width props are being used
        return null;
    }

    var hasTwoIntegers = TWO_INT_REGEX.test(aspect);

    if (!hasTwoIntegers) {
        return new Error('The aspect prop must contain a ":" character between two positive integers, for example 4:3');
    }

    return null;
};

Ratio.propTypes = {
    /**
     * The aspect ratio, which designates the Ratio component's width and
     * height. Written in the format of `x:y`, for example `4:3`.
     */
    aspect: aspectPropType,

    /**
     * The content that will be rendered inside `pw-ratio__inner`.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Designates the Ratio component's height.
     */
    height: _propTypeUtils.positiveValue,

    /**
     * Designates the Ratio component's width.
     */
    width: _propTypeUtils.positiveValue
};

exports.default = Ratio;
exports.aspectPropType = aspectPropType;