'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InlineAsk = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _selectors = require('../../store/push-messaging/selectors');

var selectors = _interopRequireWildcard(_selectors);

var _actions = require('../../store/push-messaging/actions');

var _actions2 = require('./actions');

var actions = _interopRequireWildcard(_actions2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The Inline Ask component is designed to group together the prompts to sign up
 * to the newsletter and for push notifications.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var InlineAsk = exports.InlineAsk = function (_React$Component) {
    (0, _inherits3.default)(InlineAsk, _React$Component);

    function InlineAsk(props) {
        (0, _classCallCheck3.default)(this, InlineAsk);

        var _this = (0, _possibleConstructorReturn3.default)(this, (InlineAsk.__proto__ || (0, _getPrototypeOf2.default)(InlineAsk)).call(this, props));

        _this.onOptIn = _this.onOptIn.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(InlineAsk, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // Let analytics know that we've shown an offer to opt in to push messaging
            this.props.channelOfferShown(this.props.channelName); // eslint-disable-line react/prop-types
        }
    }, {
        key: 'onOptIn',
        value: function onOptIn() {
            if (this.props.canSubscribe) {
                // eslint-disable-line react/prop-types
                // Subscribe!
                this.props.subscribe(this.props.channelName); // eslint-disable-line react/prop-types
            } else {
                // We allow users to click the opt in button, but we'll show an in-
                // app notification letting them know it's currently blocked
                this.props.notSupportedNotification(this.props.notificationText); // eslint-disable-line react/prop-types
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                descriptionText = _props.descriptionText,
                isSubscribed = _props.isSubscribed,
                successText = _props.successText,
                buttonText = _props.buttonText,
                className = _props.className;


            var classes = (0, _classnames2.default)('pw-inline-ask', className);

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    'p',
                    { className: 'pw-inline-ask__description' },
                    descriptionText
                ),
                isSubscribed ? _react2.default.createElement(
                    'div',
                    { className: 'pw-inline-ask__success' },
                    _react2.default.createElement(_icon2.default, { name: 'check', title: 'Successfully subscribed', className: 'pw-inline-ask__success-icon' }),
                    _react2.default.createElement(
                        'p',
                        { className: 'pw-inline-ask__success-text' },
                        successText
                    )
                ) : _react2.default.createElement(
                    _button2.default,
                    { className: 'pw-inline-ask__button', onClick: this.onOptIn },
                    buttonText
                )
            );
        }
    }]);
    return InlineAsk;
}(_react2.default.Component);

InlineAsk.displayName = 'InlineAsk';

InlineAsk.defaultProps = {
    buttonText: 'Opt In',
    descriptionText: 'Get notified on all the latest deals, promotions and new products.',
    successText: 'Successfully subscribed',
    notificationText: 'Notifications are currently blocked for this site. Open "Settings" to allow notifications.'
};

InlineAsk.propTypes = {
    /**
     * The text on the button the visitor taps to subscribe
     */
    buttonText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,
    /**
     * Whether the visitor has blocked notifications or not
     */
    // canSubscribe: PropTypes.bool.isRequired, ignored - internal property
    /**
     * Custom channel name to use for subscription
     */
    // channelName: PropTypes.func.isRequired, ignored for now
    /**
     * The method to call when we display the component to the visitor
     */
    // channelOfferShown: PropTypes.func.isRequired, ignored - internal property
    /**
     * The text that describes what the visitor is subscribing to
     */
    descriptionText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * Text to display in the notification shown to visitors when tapping the
     * opt in button after having blocked push notifications
     */
    notificationText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * Whether the visitor is already subscribed
     */
    // isSubscribed: PropTypes.bool.isRequired, ignored - internal property
    /**
     * A dispatch that will display a notification informing the visitor they
     * have blocked notifications, and how to unblock them
     */
    // notSupportedNotification: PropTypes.func.isRequired, ignored - internal property
    /**
     * The method to call when the visitor has indicated they want to subscribe
     */
    // subscribe: PropTypes.func.isRequired, ignored - internal property
    /**
     * The text to show if the visitor successfully subscribes, or if the visitor
     * is already subscribed
     */
    successText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node])
};

var mapStateToProps = (0, _reselectImmutableHelpers.createPropsSelector)({
    canSubscribe: selectors.canSubscribe,
    isSubscribed: selectors.isSubscribed
});

var mapDispatchToProps = {
    notSupportedNotification: actions.messagingNotSupportedNotification,
    channelOfferShown: _actions.channelOfferShown,
    subscribe: _actions.subscribe
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(InlineAsk);