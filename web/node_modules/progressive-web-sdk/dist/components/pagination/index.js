'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _utils = require('../../utils/utils');

var _dataObjects = require('../../analytics/data-objects');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Pagination is a way of breaking down large listings into smaller,
 * more digestible chunks and allowing the user to step through them in sequential
 * (or random) order.
 *
 * @example ./DESIGN.md
 */
var Pagination = function (_React$Component) {
    (0, _inherits3.default)(Pagination, _React$Component);

    function Pagination(props) {
        (0, _classCallCheck3.default)(this, Pagination);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Pagination.__proto__ || (0, _getPrototypeOf2.default)(Pagination)).call(this, props));

        _this.goToStart = _this.goToStart.bind(_this);
        _this.goBack = _this.goBack.bind(_this);
        _this.goForward = _this.goForward.bind(_this);
        _this.goToEnd = _this.goToEnd.bind(_this);
        _this.goToSelected = _this.goToSelected.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Pagination, [{
        key: 'renderPageButton',
        value: function renderPageButton(i) {
            var pageClasses = (0, _classnames2.default)('pw-pagination__page', {
                'pw--active': i === this.props.currentPage
            });

            return _react2.default.createElement(
                _button2.default,
                {
                    key: i,
                    className: pageClasses,
                    onClick: this.props.onChange.bind(null, i),
                    'data-analytics-name': _dataObjects.UI_NAME.pagination,
                    'data-analytics-content': _dataObjects.UI_NAME.page + ' ' + i
                },
                this.props.getPageButtonMessage(i)
            );
        }
    }, {
        key: 'renderPageButtons',
        value: function renderPageButtons(lower, upper) {
            var list = [];
            for (var i = lower; i <= upper; i++) {
                list.push(this.renderPageButton(i));
            }
            return list;
        }
    }, {
        key: 'buildSelectOptions',
        value: function buildSelectOptions(pageCount) {
            var _this2 = this;

            return new Array(pageCount).fill(undefined).map(function (val, index) {
                var newIndex = ++index;
                var value = newIndex.toString();
                return _react2.default.createElement(
                    'option',
                    { value: value, key: index },
                    _this2.props.currentPage === index ? _this2.props.getCurrentPageMessage(value, pageCount) : _this2.props.getSelectOptionMessage(value, pageCount)
                );
            });
        }
    }, {
        key: 'goToStart',
        value: function goToStart() {
            this.props.onChange(1);
        }
    }, {
        key: 'goBack',
        value: function goBack() {
            this.props.onChange(this.props.currentPage - 1);
        }
    }, {
        key: 'goForward',
        value: function goForward() {
            this.props.onChange(this.props.currentPage + 1);
        }
    }, {
        key: 'goToEnd',
        value: function goToEnd() {
            this.props.onChange(this.props.pageCount);
        }
    }, {
        key: 'goToSelected',
        value: function goToSelected(e) {
            this.props.onChange(parseInt(e.target.value));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                pageCount = _props.pageCount,
                pagesToShow = _props.pagesToShow,
                currentPage = _props.currentPage,
                firstButton = _props.firstButton,
                prevButton = _props.prevButton,
                nextButton = _props.nextButton,
                lastButton = _props.lastButton,
                isSelect = _props.isSelect,
                showPageButtons = _props.showPageButtons,
                showCurrentPageMessage = _props.showCurrentPageMessage,
                getCurrentPageMessage = _props.getCurrentPageMessage,
                selectIcon = _props.selectIcon;
            var _props2 = this.props,
                pagesToShowAtEnd = _props2.pagesToShowAtEnd,
                pagesToShowAtStart = _props2.pagesToShowAtStart;


            var classes = (0, _classnames2.default)('pw-pagination', {
                'pw--select-pagination': isSelect
            }, className);

            var visiblePages = Math.min(pagesToShow || pageCount, pageCount);
            var centerChunkLength = visiblePages - pagesToShowAtStart - pagesToShowAtEnd;

            // if visible pages is equal to pagesToShowAtEnd and pagesToShowAtStart combined
            // show subset of pages without start and end
            if (visiblePages === pagesToShowAtStart + pagesToShowAtEnd) {
                pagesToShowAtStart = 0;
                pagesToShowAtEnd = 0;
                centerChunkLength = visiblePages;
            }

            // Pages are 1 indexed
            var pageBeforeEnd = pageCount - pagesToShowAtEnd;

            // Offset the center chunk from the start and end
            var centerChunkStart = 1 + pagesToShowAtStart;
            var centerChunkEnd = Math.min(centerChunkStart + centerChunkLength - 1, pageBeforeEnd);

            // If the current page isn't visible in the center,
            // shift the center so that it is
            // Also show the value following the current page
            if (currentPage >= centerChunkEnd && centerChunkStart !== centerChunkEnd) {
                centerChunkEnd = Math.min(currentPage + 1, pageBeforeEnd);
                centerChunkStart = centerChunkEnd - centerChunkLength + 1;
            } else if (currentPage > centerChunkEnd && centerChunkStart === centerChunkEnd) {
                // do not shift the center when there is 1 page in the chunk
                centerChunkStart = Math.min(currentPage, pageBeforeEnd);
                centerChunkEnd = centerChunkStart;
            }

            if (pageCount < pagesToShow || centerChunkLength < 0) {
                if (centerChunkLength < 0) {
                    console.error('The pagesToShow prop must be >= pagesToShowAtStart + pagesToShowAtEnd. Ignoring pagesToShowAtStart and pagesToShowAtEnd.');
                }
                pagesToShowAtStart = 0;
                pagesToShowAtEnd = 0;
                centerChunkStart = 1;
                centerChunkEnd = pageCount;
                pageBeforeEnd = pageCount;
            }

            var atStart = currentPage === 1;
            var atEnd = currentPage === pageCount;

            var Ellipsis = function Ellipsis() {
                return _react2.default.createElement(
                    'div',
                    { className: 'pw-pagination__ellipsis' },
                    '...'
                );
            };

            return _react2.default.createElement(
                'nav',
                { role: 'navigation', className: classes },
                firstButton && _react2.default.createElement(
                    _button2.default,
                    (0, _extends3.default)({
                        className: 'pw-pagination__button',
                        onClick: this.goToStart,
                        disabled: atStart,
                        'data-analytics-name': _dataObjects.UI_NAME.pagination,
                        'data-analytics-content': _dataObjects.UI_NAME.page + ' 1'
                    }, firstButton.props),
                    firstButton.text
                ),
                prevButton && _react2.default.createElement(
                    _button2.default,
                    (0, _extends3.default)({
                        className: 'pw-pagination__button',
                        onClick: this.goBack,
                        disabled: atStart,
                        'data-analytics-name': _dataObjects.UI_NAME.pagination,
                        'data-analytics-content': _dataObjects.UI_NAME.previous
                    }, prevButton.props),
                    prevButton.text
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'pw-pagination__content' },
                    showPageButtons && _react2.default.createElement(
                        'div',
                        { className: 'pw-pagination__pages' },
                        this.renderPageButtons(1, pagesToShowAtStart),
                        pagesToShowAtStart && centerChunkStart > pagesToShowAtStart + 1 ? _react2.default.createElement(Ellipsis, { key: 'firstEllipsis' }) : false,
                        this.renderPageButtons(centerChunkStart, centerChunkEnd),
                        pagesToShowAtEnd && centerChunkEnd < pageBeforeEnd ? _react2.default.createElement(Ellipsis, { key: 'secondEllipsis' }) : false,
                        this.renderPageButtons(pageBeforeEnd + 1, pageCount)
                    ),
                    isSelect && _react2.default.createElement(
                        'div',
                        { className: 'pw-pagination__select-wrapper' },
                        _react2.default.createElement(
                            'select',
                            {
                                className: 'pw-pagination__select',
                                onBlur: this.goToSelected,
                                onChange: this.goToSelected,
                                value: currentPage
                            },
                            this.buildSelectOptions(pageCount)
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-pagination__select-icon' },
                            _react2.default.createElement(_icon2.default, { name: selectIcon || 'caret-bottom' })
                        )
                    ),
                    showCurrentPageMessage && _react2.default.createElement(
                        'span',
                        { className: 'pw-pagination__page-count' },
                        getCurrentPageMessage(currentPage, pageCount)
                    )
                ),
                nextButton && _react2.default.createElement(
                    _button2.default,
                    (0, _extends3.default)({
                        className: 'pw-pagination__button',
                        onClick: this.goForward,
                        disabled: atEnd,
                        'data-analytics-name': _dataObjects.UI_NAME.pagination,
                        'data-analytics-content': _dataObjects.UI_NAME.next
                    }, nextButton.props),
                    nextButton.text
                ),
                lastButton && _react2.default.createElement(
                    _button2.default,
                    (0, _extends3.default)({
                        className: 'pw-pagination__button',
                        onClick: this.goToEnd,
                        disabled: atEnd,
                        'data-analytics-name': _dataObjects.UI_NAME.pagination,
                        'data-analytics-content': _dataObjects.UI_NAME.page + ' ' + pageCount
                    }, lastButton.props),
                    lastButton.text
                )
            );
        }
    }]);
    return Pagination;
}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var defaultGetCurrentPageMessage = function defaultGetCurrentPageMessage(current, total) {
    return 'Page ' + current + ' of ' + total;
};

var defaultGetPageButtonMessage = function defaultGetPageButtonMessage(pageNumber) {
    return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(
            'span',
            { className: 'pw-pagination__hidden-label' },
            'Page '
        ),
        pageNumber
    );
};

var defaultSelectOptionMessage = function defaultSelectOptionMessage(current, total) {
    return 'Page ' + current + ' of ' + total;
};

Pagination.defaultProps = {
    getCurrentPageMessage: defaultGetCurrentPageMessage,
    getPageButtonMessage: defaultGetPageButtonMessage,
    getSelectOptionMessage: defaultSelectOptionMessage,
    nextButton: {
        text: 'Next'
    },
    prevButton: {
        text: 'Prev'
    },
    pagesToShowAtStart: 0,
    pagesToShowAtEnd: 0,
    showPageButtons: true,
    showCurrentPageMessage: true,
    onChange: _utils.noop
};

Pagination.propTypes = {
    /**
     * The current page number.
     */
    currentPage: _propTypes2.default.number.isRequired,

    /**
     * The number of pages shown in pagination.
     */
    pageCount: _propTypes2.default.number.isRequired,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * The properties for First Button (It's used to go to the very first page).
     */
    firstButton: _propTypes2.default.shape({
        text: _propTypes2.default.string,
        props: _propTypes2.default.object
    }),

    /**
     * This function should return a string (or node) that describes the user's current location in the pagination.
     * It will be passed the current page and total number of pages.
     */
    getCurrentPageMessage: _propTypes2.default.func,

    /**
     * This function should return a string (or node) to be used for the page buttons.
     * It will be passed the button's page number.
     */
    getPageButtonMessage: _propTypes2.default.func,

    /**
     * This function should return a string for the select option of pagination.
     * It will be passed the current page and total number of pages.
     */
    getSelectOptionMessage: _propTypes2.default.func,

    /**
     * Defines if pagination is a select pagination.
     */
    isSelect: _propTypes2.default.bool,

    /**
     * The properties for Last Button (It's used to go to the very last page).
     */
    lastButton: _propTypes2.default.shape({
        text: _propTypes2.default.string,
        props: _propTypes2.default.object
    }),

    /**
     * The properties for Next Button (It's used to go to the next page).
     */
    nextButton: _propTypes2.default.shape({
        text: _propTypes2.default.string,
        props: _propTypes2.default.object
    }),

    /**
     * The total number of pages to show.
     * If you provide pagesToShowAtStart or pagesToShowAtEnd, they will be subtracted from this number.
     */
    pagesToShow: _propTypes2.default.number,

    /**
     * The number of pages to always show at the end of the pagination.
     */
    pagesToShowAtEnd: _propTypes2.default.number,

    /**
     * The number of pages to always show at the start of the pagination.
     */
    pagesToShowAtStart: _propTypes2.default.number,

    /**
     * The properties for Previous Button (It's used to go to the previous page).
     */
    prevButton: _propTypes2.default.shape({
        text: _propTypes2.default.string,
        props: _propTypes2.default.object
    }),

    /**
     * Name of SVG icon for select drop down.
     * For more information about available icons, see the [Icon component](#!/Icon).
     */
    selectIcon: _propTypes2.default.string,

    /**
     * If false, the current page message will not be shown.
     */
    showCurrentPageMessage: _propTypes2.default.bool,

    /**
     * If false, the page buttons(numbers) will not be shown.
     */
    showPageButtons: _propTypes2.default.bool,

    /**
     * This function is called whenever the page is changed.
     * This function is also responsible for updating the props that are passed to the pagination component.
     */
    onChange: _propTypes2.default.func
};

exports.default = Pagination;