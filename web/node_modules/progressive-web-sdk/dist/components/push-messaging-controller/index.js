'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PushMessagingController = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = require('react-redux');

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

var _actions = require('../../store/push-messaging/actions');

var messagingActions = _interopRequireWildcard(_actions);

var _selectors = require('../../store/push-messaging/selectors');

var _constants = require('../../store/push-messaging/constants');

var _logger = require('../../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

var _sheet = require('../sheet');

var _sheet2 = _interopRequireDefault(_sheet);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var logger = new _logger2.default('[Messaging UI]');

var logMessagingInitError = function logMessagingInitError(e) {
    return console.error('[Messaging UI] Could not initialize the Messaging Client.', /* istanbul ignore next */e ? e.message : null);
};

/**
 * Non-UI component to register with the Messaging Client for state updates, as
 * well as handle the rehydration of the Redux store of persisted values important
 * to the Push Messaging components.
 * Also dims the screen when the browser is asking for notification permission,
 * if the setting is enabled.
 */

var PushMessagingController = exports.PushMessagingController = function (_React$Component) {
    (0, _inherits3.default)(PushMessagingController, _React$Component);

    function PushMessagingController(props) {
        (0, _classCallCheck3.default)(this, PushMessagingController);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PushMessagingController.__proto__ || (0, _getPrototypeOf2.default)(PushMessagingController)).call(this, props));

        _this.handleStateUpdate = _this.handleStateUpdate.bind(_this);
        _this.handleNotificationClick = _this.handleNotificationClick.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(PushMessagingController, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            // Recover visit countdown and page count from local storage
            this.props.rehydrateVisitCountdowns();
            this.props.rehydratePageCount();
            this.props.setVisitEndTimestamp();
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            if (typeof window.Progressive === 'undefined' || typeof window.Progressive.MessagingClientInitPromise === 'undefined') {
                logMessagingInitError();

                // Promise returned for ease of testing
                return _promise2.default.resolve();
            }

            // Promise returned for ease of testing
            return window.Progressive.MessagingClientInitPromise.then(function () {
                logger.log('Init start');

                window.Progressive.MessagingClient.register(_this2.handleNotificationClick, window.Progressive.MessagingClient.Events.notificationClick);

                // Need to return the initial state from registering for state updates
                return window.Progressive.MessagingClient.register(_this2.handleStateUpdate, window.Progressive.MessagingClient.Events.messagingStateChange);
            }).then(function (state) {
                logger.log('Init finish');

                var finalState = (0, _extends3.default)({}, state, {
                    isReady: true, // Deprecated
                    status: _constants.MESSAGING_STATUS.READY
                });

                _this2.props.stateUpdate(finalState);
            }).catch(function (e) {
                _this2.props.stateUpdate({
                    status: _constants.MESSAGING_STATUS.FAILED
                });

                logMessagingInitError(e);
            });
        }

        // Handler for state update events fired from Messaging Client

    }, {
        key: 'handleStateUpdate',
        value: function handleStateUpdate(event) {
            logger.log('State update from Messaging Client', event.detail);
            this.props.stateUpdate(event.detail);
        }

        // Handler for notification clicks on push notifications - ultimately these
        // point to a URL we should navigate the app to

    }, {
        key: 'handleNotificationClick',
        value: function handleNotificationClick(event) {
            var url = event.detail && event.detail.url;

            if (typeof url === 'string' && url.length > 0) {
                this.props.notificationClick(url);
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            if (!nextProps.canSubscribe) {
                return false;
            }

            // The only time render needs to run is if we're showing or hiding the
            // overlay when the system-ask is being shown/hidden - and only if
            // we want to actually dim the screen
            return nextProps.dimScreenOnSystemAsk && nextProps.isSystemAskShown !== this.props.isSystemAskShown;
        }
    }, {
        key: 'render',
        value: function render() {
            return (
                // An empty sheet will allow us to easily display the translucent
                // scroll-and-click blocking mask that comes with it when we display
                // the soft-ask
                _react2.default.createElement(_sheet2.default, {
                    open: this.props.dimScreenOnSystemAsk && !this.props.isSubscribed && this.props.isSystemAskShown,
                    effect: 'modal-center',
                    coverage: '1%',
                    shrinkToContent: true
                })
            );
        }
    }]);
    return PushMessagingController;
}(_react2.default.Component);

PushMessagingController.displayName = 'PushMessagingController';

PushMessagingController.defaultProps = {
    dimScreenOnSystemAsk: true
};

PushMessagingController.propTypes = {
    /**
     * PROVIDED INTERNALLY.
     * Whether we can even ask the visitor to subscribe: i.e. they have not
     * blocked notification permissions, and Messaging Client is ready.
     */
    canSubscribe: _propTypes2.default.bool.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Whether the visitor is subscribed
     *
     */
    isSubscribed: _propTypes2.default.bool.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Set to true when the browser's native notification permission ask is being
     * presented to the user; false otherwise
     */
    isSystemAskShown: _propTypes2.default.bool.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Navigates the app to the provided url - using browserHistory.push if it is
     * a detected valid URL - or by setting window.location.href otherwise
     */
    notificationClick: _propTypes2.default.func.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Rehydrates the Redux store with the persisted page count in local storage,
     * if present
     */
    rehydratePageCount: _propTypes2.default.func.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Rehydrates the Redux store with persisted visit countdowns in local
     * storage, if present
     */
    rehydrateVisitCountdowns: _propTypes2.default.func.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Sets a local timestamp 6 hours in the future - which is checked within an
     * app lifetime to determine if a visit has elapsed.
     */
    setVisitEndTimestamp: _propTypes2.default.func.isRequired,
    /**
     * PROVIDED INTERNALLY.
     * Dispatches an action to update Redux representation of Messaging state:
     * - {boolean} subscribed - whether the user is subscribed to Messaging
     * - {boolean} canSubscribe - whether it's possible to ask the user to subscribe
     * - {array} channels - array of subscribed channels
     */
    stateUpdate: _propTypes2.default.func.isRequired,
    /**
     * Whether to dim the screen and block scroll and clicking when the system ask
     * is being shown
     */
    dimScreenOnSystemAsk: _propTypes2.default.bool

};

var mapStateToProps = (0, _reselectImmutableHelpers.createPropsSelector)({
    canSubscribe: _selectors.canSubscribe,
    isSubscribed: _selectors.isSubscribed,
    isSystemAskShown: _selectors.isSystemAskShown
});

var mapDispatchToProps = {
    stateUpdate: messagingActions.stateUpdate,
    rehydratePageCount: messagingActions.rehydratePageCount,
    rehydrateVisitCountdowns: messagingActions.rehydrateVisitCountdowns,
    notificationClick: messagingActions.notificationClick,
    setVisitEndTimestamp: messagingActions.setVisitEndTimestamp
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PushMessagingController);