'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getUniqueId = function () {
    var i = 0;

    return function () {
        return 'field-' + i++;
    };
}();

/**
 * Related components:
 *
 * * [FieldRow](#!/FieldRow)
 * * [FieldSet](#!/FieldSet)
 *
 * `Field` is a wrapper around a single form input that standardizes layout
 * of labels, hints and errors when using `redux-form`.
 *
 * It expects to receive an `<input>`, `<select>`, `<textarea>` or a custom
 * form-input component. Custom inputs should be compatible with redux-form
 * which typically means accepting `onChange`, `onBlur` and `value` props.
 *
 * @example ./DESIGN.md
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Field = function (_React$Component) {
    (0, _inherits3.default)(Field, _React$Component);

    function Field(props) {
        (0, _classCallCheck3.default)(this, Field);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Field.__proto__ || (0, _getPrototypeOf2.default)(Field)).call(this, props));

        if (props.idForLabel) {
            _this.inputId = props.idForLabel;
        } else {
            _this.inputId = getUniqueId();
        }

        _this.isCheckRadio = false;
        _this.shouldStackLabelInput = _this.shouldStackLabelInput.bind(_this);
        _this.shouldPlaceLabelAtEnd = _this.shouldPlaceLabelAtEnd.bind(_this);
        _this.buildEventHandler = _this.buildEventHandler.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Field, [{
        key: 'shouldStackLabelInput',
        value: function shouldStackLabelInput() {
            if (!this.props.labelPosition) {
                return !this.isCheckRadio;
            } else {
                return this.props.labelPosition === 'top';
            }
        }
    }, {
        key: 'shouldPlaceLabelAtEnd',
        value: function shouldPlaceLabelAtEnd() {
            if (!this.props.labelPosition) {
                return this.isCheckRadio;
            } else {
                return this.props.labelPosition === 'end';
            }
        }
    }, {
        key: 'buildEventHandler',
        value: function buildEventHandler(eventHandlerName) {
            var _this2 = this;

            var customHandler = this.props.customEventHandlers[eventHandlerName];
            var input = this.props.input;

            if (input) {
                return typeof customHandler === 'function' ? function (e) {
                    _this2.props.input[eventHandlerName](e);
                    customHandler(e);
                } : this.props.input[eventHandlerName];
            }
            return customHandler;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                label = _props.label,
                hint = _props.hint,
                error = _props.error,
                caption = _props.caption,
                className = _props.className,
                children = _props.children,
                shouldShowErrorsInstantly = _props.shouldShowErrorsInstantly,
                customEventHandlers = _props.customEventHandlers;


            var childDisabled = false;
            var childChecked = false;
            var onlyChild = _react2.default.Children.count(children) === 1;

            var newChildren = _react2.default.Children.map(children, function (child, idx) {
                var childProps = {};

                var isFormControl = child.type === 'input' || child.type === 'select' || child.type === 'textarea' || typeof child.type == 'function' // Custom component, can handle props
                ;

                if (isFormControl) {
                    childProps = (0, _extends3.default)({}, _this3.props.input);
                }

                if (customEventHandlers) {
                    // Redux form adds it's own handlers for these events
                    // In order to add our own and prevent redux-forms being overwritten
                    // we need to build a new function that calls both
                    // Overwritting redux form's handlers will cause validation to break
                    childProps.onBlur = _this3.buildEventHandler('onBlur', childProps);
                    childProps.onFocus = _this3.buildEventHandler('onFocus', childProps);
                    childProps.onChange = _this3.buildEventHandler('onChange', childProps);
                    childProps.onDrop = _this3.buildEventHandler('onDrop', childProps);
                    childProps.onDragStart = _this3.buildEventHandler('onDragStart', childProps);
                }

                childProps = (0, _extends3.default)({}, childProps, {
                    'aria-invalid': !!error,
                    'aria-required': child.props.required
                }, child.props);

                if (child.props.disabled) {
                    childDisabled = true;
                }

                if (childProps.checked) {
                    childChecked = true;
                }

                if (error) {
                    childProps.className = (0, _classnames2.default)(child.props.className, 'pw--has-error');
                }

                // Give the first child the id for the field
                if (idx === 0) {
                    childProps.id = _this3.inputId;
                }

                if (onlyChild && (child.props.type === 'radio' || child.props.type === 'checkbox')) {
                    _this3.isCheckRadio = true;
                }

                if (child.props.required) {
                    _this3.isRequired = true;
                }

                return _react2.default.cloneElement(child, childProps);
            });

            var metaProps = this.props.meta;
            var shouldShowReduxError = metaProps && (metaProps.touched && !metaProps.active || metaProps.dirty && shouldShowErrorsInstantly);
            var reduxFormError = metaProps && shouldShowReduxError && metaProps.error;
            var fieldError = error || reduxFormError;

            var classes = (0, _classnames2.default)('pw-field', {
                'pw--is-check-radio': this.isCheckRadio,
                'pw--error': fieldError,
                'pw--required': this.isRequired,
                'pw--disabled': childDisabled,
                'pw--checked': childChecked
            }, className);

            var innerClasses = (0, _classnames2.default)('pw-field__inner', {
                'pw--stack': this.shouldStackLabelInput()
            });

            var labelClasses = (0, _classnames2.default)('pw-field__label-wrap', {
                'pw--end': this.shouldPlaceLabelAtEnd()
            });

            var inputClasses = (0, _classnames2.default)('pw-field__input');

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    'div',
                    { className: innerClasses },
                    label && _react2.default.createElement(
                        'div',
                        { className: labelClasses },
                        _react2.default.createElement(
                            'label',
                            {
                                className: 'pw-field__label',
                                htmlFor: this.inputId
                            },
                            label
                        ),
                        hint && _react2.default.createElement(
                            'div',
                            { className: 'pw-field__hint' },
                            hint
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: inputClasses },
                        newChildren
                    )
                ),
                fieldError && _react2.default.createElement(
                    'div',
                    { className: 'pw-field__error' },
                    fieldError
                ),
                caption && _react2.default.createElement(
                    'div',
                    { className: 'pw-field__caption' },
                    caption
                )
            );
        }
    }]);
    return Field;
}(_react2.default.Component);

Field.propTypes = {
    /**
     * The input(s) to include in the field.
     */
    children: _propTypes2.default.node.isRequired,

    /**
     * Extra information that may help the user complete this field.
     */
    caption: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
    * Custom event handlers to be added to the input.
    * If used with redux form these handlers will be called after
    * the handlers added by redux form.
    */
    customEventHandlers: _propTypes2.default.shape({
        onBlur: _propTypes2.default.func,
        onChange: _propTypes2.default.func,
        onDrop: _propTypes2.default.func,
        onDragStart: _propTypes2.default.func,
        onFocus: _propTypes2.default.func
    }),
    /**
     * If this prop is passed in, the pw--error class will be added to the field
     * and the error will be shown.
     * Also adds the aria-invalid attribute.
     */
    error: _propTypes2.default.node,

    /**
     * Extra information that displays beside the label.
     */
    hint: _propTypes2.default.node,

    /**
     * If provided, this will be used as the 'id' attr for the input and the 'for' attr for the label.
     * If not provided, an id will be generated and used.
     */
    idForLabel: _propTypes2.default.string,

    /**
     * Developers can ignore this prop.
     * If our field is used with redux-form this prop gets passed by redux-form.
     */
    input: _propTypes2.default.object,

    /**
     * The label for the input.
     * The id of the input will be used as the 'for' attribute for this label,
     * unless one is already provided.
     */
    label: _propTypes2.default.node,

    /**
     * Specify the position of the label. Default behaviour:
     * If the input is a checkbox or radio, the label will display after the input
     * Else, the label will display on top of the input.
     */
    labelPosition: _propTypes2.default.oneOf(['top', 'start', 'end']),

    /**
     * Developers can ignore this prop.
     * If our field is used with redux-form this prop gets passed by redux-form.
     */
    meta: _propTypes2.default.object,

    /**
     * Indicates whether to show field errors instantly, i.e. as the user types
     * in a field.
     * Set this to `false` to show errors on blur.
     */
    shouldShowErrorsInstantly: _propTypes2.default.bool
};

exports.default = Field;