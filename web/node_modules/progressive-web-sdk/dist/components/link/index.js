'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isReactRoute = require('../../routing/is-react-route');

var _isReactRoute2 = _interopRequireDefault(_isReactRoute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A link that converts to a react-router Link for paths within the React
 * site. It can take the link text/content either as child elements or as
 * a `text` prop.
 * If no href is passed, the link is rendered with a `#` href.
 * The list of routes from your project is automatically used to make decisions
 * whether the component renders a react-route link or an anchor tag'.
 */
var Link = function Link(_ref) {
    var children = _ref.children,
        className = _ref.className,
        data = _ref.data,
        href = _ref.href,
        openInNewTab = _ref.openInNewTab,
        text = _ref.text,
        onClick = _ref.onClick,
        props = (0, _objectWithoutProperties3.default)(_ref, ['children', 'className', 'data', 'href', 'openInNewTab', 'text', 'onClick']);

    var contents = void 0;
    if ((!children || !children.length) && text) {
        contents = text;
    } else {
        contents = children;
    }

    var attrs = (0, _extends3.default)({
        className: (0, _classnames2.default)('pw-link', className),
        onClick: onClick
    }, data, props);

    if (openInNewTab) {
        attrs.target = '_blank';
        attrs.rel = 'noopener';
    }

    if ((0, _isReactRoute2.default)(href)) {
        return _react2.default.createElement(
            _reactRouter.Link,
            (0, _extends3.default)({ to: href.replace(_isReactRoute.ORIGIN, '') }, attrs),
            contents
        );
    } else {
        return _react2.default.createElement(
            'a',
            (0, _extends3.default)({ href: href }, attrs),
            contents
        );
    }
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Link.defaultProps = {
    href: '#'
};

Link.propTypes = {
    /**
     * Any children for the Link component or anchor element.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * <p style="color:red;">Deprecated</p> An object of data key/value pairs that are passed
     * through to the underlying DOM node.
     * Now that the Link component relays arbitrary props, this is unnecessary.
     */
    data: function data(props, propName, componentName) {
        var dataPropObj = props[propName];
        if (dataPropObj) {
            var isDataPropValid = (0, _keys2.default)(dataPropObj).every(function (dataProp) {
                return dataProp.startsWith('data');
            });

            if (!isDataPropValid) {
                return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '.' + // eslint-disable-line prefer-template
                ' Make sure it\'s an object with keys that start with \'data-\'.' + ' Validation failed.');
            }
        }
        return null;
    },

    /**
     * The intended target URL.
     */
    href: _propTypes2.default.string,

    /**
     * If true, target="_blank" will be added to the link.
     * Only use this property if you trust the link! https://mathiasbynens.github.io/rel-noopener
     */
    openInNewTab: _propTypes2.default.bool,

    /**
     * The text of the link (only used if no children are passed)
     */
    text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * A callback to be called when the Link is clicked.
     */
    onClick: _propTypes2.default.func
};

Link.displayName = 'Link';

exports.default = Link;