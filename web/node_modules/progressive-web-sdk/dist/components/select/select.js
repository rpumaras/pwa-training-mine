'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _selectLabel = require('./select-label');

var _selectLabel2 = _interopRequireDefault(_selectLabel);

var _selectOption = require('./select-option');

var _selectOption2 = _interopRequireDefault(_selectOption);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * <strong style="color:red; font-size:20px;">Deprecated.</strong>
 * This component is deprecated in favour of a native `<select>`
 * element in a Form component.
 *
 * Select is a dropdown component that simulates the behavior of a standard HTML
 * `<select>` tag, but with some unique features: easier to customize its visual
 * appearance, and the ability to accept options as a Javascript Array.
 */
var Select = function Select(_ref) {
    var className = _ref.className,
        label = _ref.label,
        iconProps = _ref.iconProps,
        isDisabled = _ref.isDisabled,
        isRequired = _ref.isRequired,
        onBlur = _ref.onBlur,
        onChange = _ref.onChange,
        options = _ref.options,
        selectedIndex = _ref.selectedIndex,
        id = _ref.id,
        multiple = _ref.multiple,
        name = _ref.name;

    console.warn('Select component is deprecated and will be removed from the Progressive Web SDK by v1.0.0');

    var classes = (0, _classnames2.default)('pw-select c-select', className, {
        'pw--inner-label c--inner-label': label,
        'pw--disabled c--disabled': isDisabled,
        'pw--required c--required': isRequired
    });
    var iconClasses = (0, _classnames2.default)('pw-select__icon c-select__icon', (0, _extends3.default)({}, iconProps.className));

    var attrs = { id: id, multiple: multiple, name: name };
    var defaultVal = void 0;

    if (options.length) {
        defaultVal = multiple ? [options[selectedIndex].value] : options[selectedIndex].value;
    }

    return _react2.default.createElement(
        'div',
        { className: classes },
        _react2.default.createElement(_selectLabel2.default, { htmlFor: id, label: label }),
        _react2.default.createElement(
            'select',
            (0, _extends3.default)({}, attrs, {
                className: 'pw-select__select c-select__select',
                onBlur: onBlur,
                onChange: onChange,
                defaultValue: defaultVal,
                disabled: isDisabled,
                required: isRequired
            }),
            options.map(function (option, index) {
                return _react2.default.createElement(_selectOption2.default, (0, _extends3.default)({}, option, { key: index }));
            })
        ),
        _react2.default.createElement(_icon2.default, (0, _extends3.default)({}, iconProps, {
            className: iconClasses,
            name: iconProps.name || 'caret-bottom'
        }))
    );
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Select.defaultProps = {
    iconProps: {},
    onChange: _utils.noop,
    options: [],
    selectedIndex: 0
};

Select.propTypes = {
    /**
     * The list of options for the select element
     *
     * Each option should be an object with the structure:
     *
     * value: (required) A string containing the value of the option
     *
     * text: (optional) A string containing the text of the option
     *
     * If text is not passed, the value will be used as the text
     */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        value: _propTypes2.default.string.isRequired,
        text: _propTypes2.default.string
    })).isRequired,
    /**
     * add classes ie. 'c-test-class c-test-class__modifier' for the root element
     */
    className: _propTypes2.default.string,
    /**
    * The name of the icon displayed in the Select component
    */
    iconProps: _propTypes2.default.object,
    /**
    * The value for the ID attribute on the <select> element
    */
    id: _propTypes2.default.string,
    /**
     * pass in boolean, determines whether <select> will have disabled property
     */
    isDisabled: _propTypes2.default.bool,
    /**
     * pass in boolean, determines whether <select> will have required property
     */
    isRequired: _propTypes2.default.bool,
    /**
     * if label string exists a <label> will be rendered with the passed in string as its text
     */
    label: _propTypes2.default.string,
    /**
    * The value for the multiple attribute on the <select> element (https://developer.mozilla.org/en/docs/Web/HTML/Element/select#Attributes)
    */
    multiple: _propTypes2.default.bool,
    /**
    * The value for the name attribute on the <select> element
    */
    name: _propTypes2.default.string,
    /**
     * pass in a number to initialize the select with the option at that index
     */
    selectedIndex: _propTypes2.default.number,
    /**
     * function to pass in that triggers on the onBlur hook. This is preferred
     * over onChange for a11y.
     */
    onBlur: _propTypes2.default.func,
    /**
     * function to pass in that triggers on the onChange hook
     */
    onChange: _propTypes2.default.func
};

exports.default = Select;