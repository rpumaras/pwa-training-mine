'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getClosestAnchor = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _routing = require('../../routing');

var _isReactRoute = require('../../routing/is-react-route');

var _a11yUtils = require('../../a11y-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var getClosestAnchor = exports.getClosestAnchor = function getClosestAnchor(el) {
    var currentEl = el;

    while (currentEl) {
        if (currentEl.tagName === 'A') {
            return currentEl;
        }
        currentEl = currentEl.parentElement;
    }

    return null;
};

// The `DangerousHTML` component isn't intended to be something the user interacts with directly
// It should just act as an invisible wrapped that catches clicks that bubble up from its children
// As a result, it doesn't make sense for the DangerousHTML component to have semantics
/* eslint-disable jsx-a11y/onclick-has-focus, jsx-a11y/onclick-has-role */

/**
 * `DangerousHTML` is a wrapper for the `dangerouslySetInnerHTML` prop on React
 * components. The purpose of that is to include markup from another source within
 * the React tree. That source can be a string, an AJAX response, etc.
 *
 * A feature of `DangerousHTML` is that it prevents successive re-rendering of
 * elements that use dangerouslySetInnerHTML. Check that the html string has
 * changed before attempting to render.
 *
 * It is worth noting that we recommend you avoid using `DangerousHTML` if at all
 * possible. It's named this way for a reason, so **use with caution**.
 *
 * For example usecases where `DangerousHTML` can be used, see the
 * [Leveraging Existing Page Content guide](/dev/guides/leveraging-existing-page-content).
 */

var DangerousHTML = function (_React$Component) {
    (0, _inherits3.default)(DangerousHTML, _React$Component);

    function DangerousHTML(props) {
        (0, _classCallCheck3.default)(this, DangerousHTML);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DangerousHTML.__proto__ || (0, _getPrototypeOf2.default)(DangerousHTML)).call(this, props));

        _this.processHTML = _this.processHTML.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(DangerousHTML, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(next) {
            return next.html !== this.props.html;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(e) {
            if (this.props.enableBrowserHistoryForLinks) {
                var anchor = getClosestAnchor(e.target);
                var href = anchor && anchor.href;

                if (href && (0, _isReactRoute.isReactRoute)(href)) {
                    e.preventDefault();
                    _routing.browserHistory.push(href);
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                className = _props.className;

            var html = this.processHTML(this.props.html);

            var classes = (0, _classnames2.default)('pw-dangerous-html', className);

            /* Disable this eslint a11y rule, because it's meant to catch bubbled
             * click events */
            /* eslint-disable jsx-a11y/no-static-element-interactions */
            return _react2.default.createElement(
                'div',
                {
                    className: classes,
                    onClick: this.handleClick,
                    onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(this.handleClick)
                },
                children({ __html: html })
            );
            /* eslint-enable jsx-a11y/no-static-element-interactions */
        }

        /**
         * HTML transformations, current steps:
         * - enable external resources if specified
         */

    }, {
        key: 'processHTML',
        value: function processHTML(html) {
            if (this.props.enableExternalResources && typeof window.Capture !== 'undefined') {
                html = window.Capture.enable(html, this.props.externalResourcesPrefix);
            }

            return html;
        }
    }]);
    return DangerousHTML;
}(_react2.default.Component);

DangerousHTML.propTypes = {
    /**
     * A function callback with an argument of `htmlObj` that returns a React
     * element. Example: `(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />`
     */
    children: _propTypes2.default.func.isRequired,

    /**
     * A string representation of some HTML. Example: `<strong>A string of HTML</strong>`
     */
    html: _propTypes2.default.string.isRequired,

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,

    /**
     * Enable using browserHistory for links that are React routes
     */
    enableBrowserHistoryForLinks: _propTypes2.default.bool,

    /**
     * Enable external resources (like images), that were previously disabled by capture.js
     */
    enableExternalResources: _propTypes2.default.bool,

    /**
     * Prefix used for external resources. Look at capture.js for more details
     */
    externalResourcesPrefix: _propTypes2.default.string
};

DangerousHTML.defaultProps = {
    enableBrowserHistoryForLinks: true,
    enableExternalResources: false,
    externalResourcesPrefix: 'x-'
};

exports.default = DangerousHTML;