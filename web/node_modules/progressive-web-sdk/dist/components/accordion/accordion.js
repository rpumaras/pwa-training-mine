'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _accordionItem = require('./accordion-item');

var _accordionItem2 = _interopRequireDefault(_accordionItem);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related components:
 *
 * * [AccordionItemContent](#!/AccordionItemContent)
 * * [AccordionItem](#!/AccordionItem)
 *
 * `Accordion` is the outer wrapper of expandable content.
 * It is used to expand and collapse the content by clicking its header.
 *
 * @example ./DESIGN.md
 */

var Accordion = function (_React$Component) {
    (0, _inherits3.default)(Accordion, _React$Component);

    function Accordion(props) {
        (0, _classCallCheck3.default)(this, Accordion);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Accordion.__proto__ || (0, _getPrototypeOf2.default)(Accordion)).call(this, props));

        _this.state = {
            // We need to use a copy of this prop so it doesn't get mutated
            openItems: [].concat((0, _toConsumableArray3.default)(props.initialOpenItems))
        };

        _this.onClick = _this.onClick.bind(_this);

        _this.updateItem = _this.updateItem.bind(_this);
        _this.openItem = _this.openItem.bind(_this);
        _this.closeItem = _this.closeItem.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Accordion, [{
        key: 'updateItem',
        value: function updateItem(index, opening) {
            if (index < 0 || index >= _react2.default.Children.count(this.props.children)) {
                return;
            }

            var openItems = [].concat((0, _toConsumableArray3.default)(this.state.openItems));
            var openItemArrayIndex = openItems.indexOf(index);
            var alreadyOpen = openItemArrayIndex !== -1;

            if (opening) {
                if (this.props.singleItemOpen) {
                    openItems = [index];
                } else if (!alreadyOpen) {
                    // Don't push multiple copies of the same index into openItems
                    openItems.push(index);
                }
            } else {
                if (this.props.singleItemOpen) {
                    openItems = [];
                } else if (alreadyOpen) {
                    openItems.splice(openItemArrayIndex, 1);
                }
            }

            this.setState({ openItems: openItems });
        }
    }, {
        key: 'onClick',
        value: function onClick(accordionItemIdx) {
            var openItems = this.state.openItems;
            var openItemArrayIndex = openItems.indexOf(accordionItemIdx);

            this.updateItem(accordionItemIdx, openItemArrayIndex === -1);
        }
    }, {
        key: 'openItem',
        value: function openItem(index) {
            this.updateItem(index, true);
        }
    }, {
        key: 'closeItem',
        value: function closeItem(index) {
            this.updateItem(index, false);
        }
    }, {
        key: 'openAllItems',
        value: function openAllItems() {
            var indices = _react2.default.Children.map(this.props.children, function (_, index) {
                return index;
            });
            this.setState({
                openItems: indices
            });
        }
    }, {
        key: 'closeAllItems',
        value: function closeAllItems() {
            this.setState({
                openItems: []
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                duration = _props.duration,
                easing = _props.easing,
                onOpen = _props.onOpen,
                onOpened = _props.onOpened,
                onClose = _props.onClose,
                onClosed = _props.onClosed,
                prerender = _props.prerender,
                singleItemOpen = _props.singleItemOpen,
                children = _props.children;


            var classes = (0, _classnames2.default)('pw-accordion', className);

            return _react2.default.createElement(
                'div',
                { className: classes, 'aria-multiselectable': !singleItemOpen, role: 'tablist' },
                _react2.default.Children.map(children, function (child, idx) {
                    // If the user is using && to conditionally add a child
                    // the child could be undefined
                    if (child && child.type && child.type.name === _accordionItem2.default.name) {
                        var childProps = {
                            onHeaderClick: _this2.onClick.bind(_this2, idx),
                            shown: _this2.state.openItems.indexOf(idx) > -1,
                            prerender: prerender,
                            duration: duration,
                            easing: easing,
                            key: idx

                            // Allow callbacks added to the AccordionItem directly
                            // to override ones added to the Accordion
                        };if (!child.props.onOpen) {
                            childProps.onOpen = onOpen;
                        }

                        if (!child.props.onOpened) {
                            childProps.onOpened = onOpened;
                        }

                        if (!child.props.onClose) {
                            childProps.onClose = onClose;
                        }

                        if (!child.props.onClosed) {
                            childProps.onClosed = onClosed;
                        }

                        return _react2.default.cloneElement(child, childProps);
                    } else {
                        return child;
                    }
                })
            );
        }
    }]);
    return Accordion;
}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Accordion.defaultProps = {
    onOpen: _utils.noop,
    onOpened: _utils.noop,
    onClose: _utils.noop,
    onClosed: _utils.noop,
    duration: 500,
    easing: 'ease',
    singleItemOpen: false,
    initialOpenItems: []
};

Accordion.propTypes = {
    /**
     * This list of <AccordionItem>s you'd like to display.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Duration of the animation in millis.
     */
    duration: _propTypes2.default.number,

    /**
     * Easing function for the animation.
     */
    easing: _propTypes2.default.string,

    /**
     * If an item should be open by default, include its index in this array.
     */
    initialOpenItems: _propTypes2.default.array,

    /**
     * Determines whether the content is available in DOM before opening the accordion
     */
    prerender: _propTypes2.default.bool,

    /**
     * When set to true will force only one item open at a time.
     */
    singleItemOpen: _propTypes2.default.bool,

    /**
     * Triggered every time an accordion item is starting to close.
     * This function is passed the id of the accordion item which is closing.
     * This prop can also be passed to an AccordionItem.
     */
    onClose: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item is finished closing.
     * This function is passed the id of the accordion item which closed.
     * This prop can also be passed to an AccordionItem.
     */
    onClosed: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item is starting to open.
     * This function is passed the id of the accordion item which is opening.
     * This prop can also be passed to an AccordionItem.
     */
    onOpen: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item has finished opening.
     * This function is passed the id of the accordion item which opened.
     * This prop can also be passed to an AccordionItem.
     */
    onOpened: _propTypes2.default.func
};

exports.default = Accordion;