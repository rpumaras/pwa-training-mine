'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _accordionItemContent = require('./accordion-item-content');

var _accordionItemContent2 = _interopRequireDefault(_accordionItemContent);

var _dataObjects = require('../../analytics/data-objects/');

var _a11yUtils = require('../../a11y-utils');

var _TransitionGroup = require('react-transition-group/TransitionGroup');

var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var uuid = function () {
    var i = 0;
    return function () {
        return i++;
    };
}();

/**
 * Related components:
 *
 * * [AccordionItemContent](#!/AccordionItemContent)
 * * [Accordion](#!/Accordion)
 *
 * `AccordionItem` acts as expandable container for the accordion's content.
 *
 * @example ./DESIGN.md
 */

var AccordionItem = function (_React$Component) {
    (0, _inherits3.default)(AccordionItem, _React$Component);

    function AccordionItem(props) {
        (0, _classCallCheck3.default)(this, AccordionItem);

        var _this = (0, _possibleConstructorReturn3.default)(this, (AccordionItem.__proto__ || (0, _getPrototypeOf2.default)(AccordionItem)).call(this, props));

        _this.id = uuid();
        _this.itemId = 'accordion__item-' + _this.id;
        _this.onClick = _this.onClick.bind(_this);
        _this.onAnimationComplete = _this.onAnimationComplete.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(AccordionItem, [{
        key: 'onClick',
        value: function onClick(e) {
            this.props.onHeaderClick(e);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _props = this.props,
                shown = _props.shown,
                onOpen = _props.onOpen,
                onClose = _props.onClose;


            if (nextProps.shown === shown) {
                return;
            }

            if (nextProps.shown) {
                onOpen(this.itemId);
            } else {
                onClose(this.itemId);
            }
        }
    }, {
        key: 'onAnimationComplete',
        value: function onAnimationComplete() {
            var _props2 = this.props,
                shown = _props2.shown,
                onOpened = _props2.onOpened,
                onClosed = _props2.onClosed;


            if (shown) {
                onOpened(this.itemId);
            } else {
                onClosed(this.itemId);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props3 = this.props,
                children = _props3.children,
                className = _props3.className,
                shown = _props3.shown,
                prerender = _props3.prerender,
                header = _props3.header,
                openIconName = _props3.openIconName,
                closeIconName = _props3.closeIconName,
                iconSize = _props3.iconSize,
                iconPosition = _props3.iconPosition,
                duration = _props3.duration,
                easing = _props3.easing;


            var classes = (0, _classnames2.default)('pw-accordion__item', {
                'pw-accordion--is-open': shown,
                'pw-accordion--is-prerender': prerender && !shown
            }, className);

            var headerId = 'accordion__header-' + this.id;
            var contentId = 'accordion__content-' + this.id;

            return _react2.default.createElement(
                'div',
                { className: classes, id: this.itemId, ref: function ref(el) {
                        _this2._container = el;
                    } },
                _react2.default.createElement(
                    'button',
                    { className: 'pw-accordion__header',
                        onClick: this.onClick,
                        onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(this.onClick),
                        tabIndex: '0',
                        role: 'tab',
                        'aria-expanded': shown,
                        'aria-selected': shown,
                        'aria-controls': contentId,
                        id: headerId,
                        type: 'button',
                        'data-analytics-name': (shown ? _dataObjects.UI_NAME.collapse : _dataObjects.UI_NAME.expand) + '_' + _dataObjects.UI_NAME.accordion,
                        'data-analytics-content': header
                    },
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-accordion__inner-header pw--icon-' + iconPosition },
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-accordion__icon', 'aria-hidden': 'true' },
                            _react2.default.createElement(
                                'div',
                                { className: 'pw-accordion__open-icon' },
                                _react2.default.createElement(_icon2.default, { className: 'pw-accordion__glyph', size: iconSize, name: openIconName })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: 'pw-accordion__close-icon' },
                                _react2.default.createElement(_icon2.default, { className: 'pw-accordion__glyph', size: iconSize, name: closeIconName })
                            )
                        ),
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-accordion__title' },
                            header
                        )
                    )
                ),
                !shown && prerender && _react2.default.createElement(
                    _accordionItemContent2.default,
                    null,
                    children
                ),
                _react2.default.createElement(
                    _TransitionGroup2.default,
                    {
                        component: 'div',
                        role: 'tabpanel',
                        id: contentId,
                        'aria-hidden': !shown,
                        'aria-labelledby': headerId,
                        tabIndex: shown ? 0 : -1
                    },
                    shown && _react2.default.createElement(
                        _accordionItemContent2.default,
                        {
                            onAnimationComplete: this.onAnimationComplete,
                            duration: duration,
                            easing: easing
                        },
                        children
                    )
                )
            );
        }
    }]);
    return AccordionItem;
}(_react2.default.Component);

AccordionItem.defaultProps = {
    closeIconName: 'minus',
    iconPosition: 'start',
    openIconName: 'plus'
};

AccordionItem.propTypes = {
    /**
     * Whatever you'd like this AccordionItem to display.
     * This can also include more Accordions.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * The name of the icon shown in the header
     * when the accordion can be closed.
     */
    closeIconName: _propTypes2.default.string,

    /**
     * PROVIDED INTERNALLY. Duration of the animation in millis.
     */
    duration: _propTypes2.default.number,

    /**
     * PROVIDED INTERNALLY. Easing function for the animation.
     */
    easing: _propTypes2.default.string,

    /**
     * The content that should be displayed as the header.
     */
    header: _propTypes2.default.node,

    /**
     * Determines whether the icons should be placed before or after the title.
     */
    iconPosition: _propTypes2.default.oneOf(['start', 'end']),

    /**
     * Passes a custom className to the Accordion Item's icon.
     */
    iconSize: _propTypes2.default.string,

    /**
     * The name of the icon shown in the header
     * when the accordion can be opened.
     */
    openIconName: _propTypes2.default.string,

    /**
     * This is used by Accordion to prerender the content before openning it.
     */
    prerender: _propTypes2.default.bool,

    /**
     * PROVIDED INTERNALLY. This is used by Accordion to open and close the items
     */
    shown: _propTypes2.default.bool,

    /**
     * Triggered every time an accordion item is
     * starting to close.  This function is passed the id of the
     * accordion item which is closing.
     */
    onClose: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item is
     * finished closing.  This function is passed the id of the
     * accordion item which closed.
     */
    onClosed: _propTypes2.default.func,

    /**
     * PROVIDED INTERNALLY. This is the callback used by Accordion to
     * open and close the items.
     */
    onHeaderClick: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item is
     * starting to open.  This function is passed the id of the
     * accordion item which is opening.
     */
    onOpen: _propTypes2.default.func,

    /**
     * Triggered every time an accordion item has
     * finished opening.  This function is passed the id of the
     * accordion item which opened.
     */
    onOpened: _propTypes2.default.func
};

exports.default = AccordionItem;