'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _dataObjects = require('../../analytics/data-objects/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An input field to capture passwords.
 * Allows the user to toggle if their password should be visible or masked.
 */

var PasswordInput = function (_React$Component) {
    (0, _inherits3.default)(PasswordInput, _React$Component);

    function PasswordInput(props) {
        (0, _classCallCheck3.default)(this, PasswordInput);

        var _this = (0, _possibleConstructorReturn3.default)(this, (PasswordInput.__proto__ || (0, _getPrototypeOf2.default)(PasswordInput)).call(this, props));

        _this.state = {
            passwordVisible: _this.props.showPassword || false
        };

        _this.toggleVisibility = _this.toggleVisibility.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(PasswordInput, [{
        key: 'toggleVisibility',
        value: function toggleVisibility() {
            this.setState({
                passwordVisible: !this.state.passwordVisible
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                buttonClassName = _props.buttonClassName,
                buttonIconName = _props.buttonIconName,
                buttonIconSize = _props.buttonIconSize,
                buttonTextHide = _props.buttonTextHide,
                buttonTextShow = _props.buttonTextShow,
                isText = _props.isText,
                analyticsName = _props.analyticsName,
                inputProps = (0, _objectWithoutProperties3.default)(_props, ['className', 'buttonClassName', 'buttonIconName', 'buttonIconSize', 'buttonTextHide', 'buttonTextShow', 'isText', 'analyticsName']);
            var passwordVisible = this.state.passwordVisible;


            var classes = (0, _classnames2.default)('pw-password-input', className);

            var toggleClasses = (0, _classnames2.default)('pw-password-input__toggle', {
                'pw--inactive': !passwordVisible,
                'pw--is-text': isText
            }, buttonClassName);

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement('input', (0, _extends3.default)({}, inputProps, {
                    type: passwordVisible ? 'text' : 'password',
                    'data-analytics-name': analyticsName
                })),
                _react2.default.createElement(_button2.default, {
                    className: toggleClasses,
                    icon: buttonIconName,
                    iconSize: buttonIconSize,
                    title: passwordVisible ? buttonTextHide : buttonTextShow,
                    children: isText && passwordVisible ? buttonTextHide : buttonTextShow,
                    onClick: this.toggleVisibility,
                    'data-analytics-name': _dataObjects.UI_NAME.togglePasswordText
                })
            );
        }
    }]);
    return PasswordInput;
}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

PasswordInput.defaultProps = {
    buttonClassName: 'pw--blank',
    buttonTextShow: 'Show Password',
    buttonTextHide: 'Hide Password',
    buttonIconSize: 'large'
};

PasswordInput.propTypes = {
    /**
     * Adds values to the `analytics-name` attribute of the input
     */
    analyticsName: _propTypes2.default.string,

    /**
     * Adds values to the `class` attribute of the toggle button
     */
    buttonClassName: _propTypes2.default.string,

    /**
     * Identifier for the desired icon within the toggle button
     */
    buttonIconName: _propTypes2.default.string,

    /**
     * The size of the icon within the toggle button
     */
    buttonIconSize: _propTypes2.default.string,

    /**
     * The text of the toggle button when the password is visible.
     * This text is also used for accessibility.
     */
    buttonTextHide: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * The text of the toggle button when the password is masked
     * This text is also used for accessibility.
     */
    buttonTextShow: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,

    /**
     * Determines if button has text or not
     */
    isText: _propTypes2.default.bool,

    /**
     * Determines if password is shown
     */
    showPassword: _propTypes2.default.bool
};

exports.default = PasswordInput;