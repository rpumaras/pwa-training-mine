'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('../../utils/utils');

var _ratio = require('../ratio');

var _ratio2 = _interopRequireDefault(_ratio);

var _skeletonBlock = require('../skeleton-block');

var _skeletonBlock2 = _interopRequireDefault(_skeletonBlock);

var _dataObjects = require('../../analytics/data-objects/');

var _actions = require('../../analytics/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An image component with placeholder functionality baked-in.
 * You can review the documentation for the [placeholder component here](#!/SkeletonBlock).
 * Note: The Image must have an explicit height for placeholder to appear.
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Image = function (_React$PureComponent) {
    (0, _inherits3.default)(Image, _React$PureComponent);

    function Image() {
        (0, _classCallCheck3.default)(this, Image);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Image.__proto__ || (0, _getPrototypeOf2.default)(Image)).call(this));

        _this.state = {
            loaded: false,
            transitioningImageProps: null
        };

        _this.imageLoaded = _this.imageLoaded.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Image, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.props.src !== nextProps.src) {
                var _props = this.props,
                    alt = _props.alt,
                    height = _props.height,
                    src = _props.src,
                    width = _props.width;

                var tagClasses = (0, _classnames2.default)('pw-image__tag', 'pw--is-transitioning');
                var imageProps = {
                    src: src,
                    className: tagClasses,
                    alt: alt,
                    height: height,
                    width: width
                };
                this.setState({ loaded: false, transitioningImageProps: imageProps });
            }
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            if (this.props.src) {
                (0, _actions.countAsset)();
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            // Clear the loading timeout so we don't call setState on an unmounted component
            if (this.timeout) {
                window.clearTimeout(this.timeout);
            }
        }
    }, {
        key: 'imageLoaded',
        value: function imageLoaded() {
            var _this2 = this;

            (0, _actions.trackPerformance)(_dataObjects.PERFORMANCE_METRICS.fullPageLoad);

            this.timeout = setTimeout(function () {
                _this2.setState({ loaded: true, transitioningImageProps: null }, _this2.props.onImageLoaded);
            }, this.props.artificialLoadingDelay || 0);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                alt = _props2.alt,
                className = _props2.className,
                height = _props2.height,
                hidePlaceholder = _props2.hidePlaceholder,
                loadingIndicator = _props2.loadingIndicator,
                placeholderStyle = _props2.placeholderStyle,
                ratio = _props2.ratio,
                src = _props2.src,
                width = _props2.width,
                useLoaderDuringTransitions = _props2.useLoaderDuringTransitions,
                itemProp = _props2.itemProp,
                draggable = _props2.draggable;


            var classes = (0, _classnames2.default)('pw-image', {
                'pw--is-loaded': this.state.loaded
            }, className);

            var skeletonStyle = (0, _extends3.default)({}, placeholderStyle, {
                height: height,
                width: width
            });

            var imageProps = {
                src: src,
                className: 'pw-image__tag',
                alt: alt,
                height: height,
                width: width,
                itemProp: itemProp,
                draggable: draggable
            };

            var loaderNode = _react2.default.createElement(
                'span',
                null,
                loadingIndicator,
                !hidePlaceholder && _react2.default.createElement(_skeletonBlock2.default, {
                    type: 'div',
                    className: 'pw--image',
                    style: skeletonStyle
                })
            );

            // alt is in imageProps
            /* eslint-disable jsx-a11y/img-has-alt */
            var image = this.state.loaded ? _react2.default.createElement('img', imageProps) : _react2.default.createElement(
                'span',
                null,
                useLoaderDuringTransitions || this.state.transitioningImageProps === null ? loaderNode :
                // Image src is changing but we will continue displaying the previous image
                // until the new one is finished loading, to allow for instant swap
                _react2.default.createElement('img', this.state.transitioningImageProps),
                _react2.default.createElement('img', (0, _extends3.default)({}, imageProps, { onLoad: this.imageLoaded, style: { display: 'none' } }))
            );

            /* eslint-enable jsx-a11y/img-has-alt */

            return _react2.default.createElement(
                'div',
                { className: classes },
                ratio ? _react2.default.createElement(
                    _ratio2.default,
                    ratio,
                    image
                ) : image
            );
        }
    }]);
    return Image;
}(_react2.default.PureComponent);

Image.defaultProps = {
    alt: '',
    draggable: 'auto',
    src: '',
    placeholderStyle: {},
    onImageLoaded: _utils.noop,
    useLoaderDuringTransitions: true
};

Image.propTypes = {
    /**
     * This attribute defines the alternative text describing the image.
     */
    alt: _propTypes2.default.string.isRequired,

    /**
     * This is the image URL.
     */
    src: _propTypes2.default.string.isRequired,

    /**
     * This attribute defines an artificial delay (ms) that slows down when the image is considered loaded.
     */
    artificialLoadingDelay: _propTypes2.default.number,

    /**
     * A CSS class name to be applied to the <img /> element.
     */
    className: _propTypes2.default.string,

    /**
     * Used to determine if the image should be draggable.
     */
    draggable: _propTypes2.default.string,

    /**
     * The intrinsic height of the image in HTML5 CSS pixels, or HTML 4 in pixels or as a percentage.
     */
    height: _propTypes2.default.string,

    /**
    * Used to determine if the image placeholder should be shown while the image loads.
    */
    hidePlaceholder: _propTypes2.default.bool,

    /**
     * A value for the itemprop attribute
     * used to provide microdata to a page for SEO
     * https://www.w3.org/TR/microdata/
     */
    itemProp: _propTypes2.default.string,

    /**
    * Additional content to show with the placeholder while the image loads.
    */
    loadingIndicator: _propTypes2.default.node,

    /**
     * An object whose key is the camelCased version of the style name, and whose value is the style's value, usually a string.
     */
    placeholderStyle: _propTypes2.default.object,

    /**
     * Props for a Ratio component. See the [Ratio](#!/Ratio) component for more details.
     * Example: `{aspect: '4:3'}`
     */
    ratio: _propTypes2.default.object,

    /**
     * Indicates whether to display the loaderNode or the old image when src is changed (while the new image loads)
     */
    useLoaderDuringTransitions: _propTypes2.default.bool,

    /**
     * The intrinsic width of the image in HTML5 CSS pixels, or HTML 4 in pixels or as a percentage.
     */
    width: _propTypes2.default.string,

    /**
     * A callback that gets called when the image is loaded and displayed.
     */
    onImageLoaded: _propTypes2.default.func
};

exports.default = Image;