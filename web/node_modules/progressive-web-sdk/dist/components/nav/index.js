'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related components:
 *
 * * [Nav](#!/Nav)
 * * [NavHeader](#!/NavHeader)
 * * [NavItem](#!/NavItem)
 * * [NavMenu](#!/NavMenu)
 * * [NavSlider](#!/NavSlider)
 *
 * The `Nav` component provides an arbitrarily nested navigation
 * tree and manages transitions between pages.
 *
 * The state of the navigation tree is shared with child components
 * through `context`, making it easy to build custom navigation UIs.
 * For simple cases, a set of default components are provided.
 *
 * Subscribe to changes through the `onPathChange` prop in order to
 * make changes to the navigation state of the app.
 *
 * @example ./DESIGN.md
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Nav = function (_React$PureComponent) {
    (0, _inherits3.default)(Nav, _React$PureComponent);

    function Nav(props) {
        (0, _classCallCheck3.default)(this, Nav);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Nav.__proto__ || (0, _getPrototypeOf2.default)(Nav)).call(this, props));

        _this.goToPath = _this.goToPath.bind(_this);
        _this.goBack = _this.goBack.bind(_this);
        _this.getDerivedState = _this.getDerivedState.bind(_this);
        _this.state = _this.getDerivedState({ root: undefined, path: '/' }, _this.props);
        return _this;
    }

    (0, _createClass3.default)(Nav, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            this.setState(this.getDerivedState(this.props, newProps));
        }

        /**
         * Returns a mapping of
         *
         * {path: {node, parentNode, depth}}
         *
         * for each NavItem in the navigation tree.
         */

    }, {
        key: 'getDerivedState',
        value: function getDerivedState(oldProps, newProps) {
            var nodes = oldProps.root !== newProps.root ? Nav.mapNodes(newProps.root) : this.state.nodes;
            var selectedPath = newProps.path;
            var _nodes$selectedPath = nodes[selectedPath],
                selected = _nodes$selectedPath.node,
                selectedParent = _nodes$selectedPath.parent;

            var isLeaf = (selected.children || []).length === 0;
            var oldExpandedPath = this.state ? this.state.expandedPath : '/';
            var expandedPath = isLeaf ? selectedParent.path : selected.path;
            var _nodes$expandedPath = nodes[expandedPath],
                expanded = _nodes$expandedPath.node,
                depth = _nodes$expandedPath.depth;
            var oldDepth = nodes[oldExpandedPath].depth;

            var action = depth > oldDepth ? 'descending' : 'ascending';
            return {
                selectedPath: selectedPath,
                selected: selected,
                expandedPath: expandedPath,
                expanded: expanded,
                action: action,
                nodes: nodes
            };
        }
    }, {
        key: 'goToPath',
        value: function goToPath(path) {
            var onPathChange = this.props.onPathChange;

            if (this.state.nodes.hasOwnProperty(path)) {
                var node = this.state.nodes[path].node;

                var isLeaf = (node.children || []).length === 0;
                onPathChange(path, isLeaf);
            }
        }
    }, {
        key: 'goBack',
        value: function goBack() {
            var expandedPath = this.state.expandedPath;
            var expandedParent = this.state.nodes[expandedPath].parent;

            this.goToPath(expandedParent.path);
        }
    }, {
        key: 'getChildContext',
        value: function getChildContext() {
            return (0, _extends3.default)({}, this.state, {
                root: this.props.root,
                goToPath: this.goToPath,
                goBack: this.goBack
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                children = _props.children;

            var classes = (0, _classnames2.default)('pw-nav', className);

            return _react2.default.createElement(
                'div',
                { className: classes },
                children
            );
        }
    }], [{
        key: 'mapNodes',
        value: function mapNodes(root) {
            var inner = function inner(node) {
                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
                var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

                parent = parent || node; // Root is its own parent
                var path = node.path;
                var children = node.children || [];

                if (map.hasOwnProperty(path)) {
                    throw new Error('Each NavItem must have a unique "path" prop. Path "' + path + '" appeared twice.');
                }
                map[path] = { node: node, parent: parent, depth: depth };
                children.forEach(function (child) {
                    inner(child, node, map, depth + 1);
                });
                return map;
            };
            return root === undefined ? {} : inner(root);
        }
    }]);
    return Nav;
}(_react2.default.PureComponent);

Nav.defaultProps = {
    path: '/',
    root: { title: '', path: '/' },
    onPathChange: _utils.noop
};

Nav.propTypes = {
    /**
     * The element's children.
     */
    children: _propTypes2.default.node,

    /**
     * Additional CSS classes to give to the element.
     */
    className: _propTypes2.default.string,

    /**
     * The currently selected path in the navigation.
     */
    path: _propTypes2.default.string,

    /**
     * The structure of the navigation as a JS object.
     */
    root: _propTypes2.default.shape({
        title: _propTypes2.default.string.isRequired,
        path: _propTypes2.default.string.isRequired,
        type: _propTypes2.default.string,
        children: _propTypes2.default.array
    }),

    /**
     * Callback invoked when the selected path changes, of type
     * `(path: String, isLeaf: Boolean) => any`.
     */
    onPathChange: _propTypes2.default.func
};

Nav.childContextTypes = {
    nodes: _propTypes2.default.object,
    root: _propTypes2.default.object,
    selected: _propTypes2.default.object,
    selectedPath: _propTypes2.default.string,
    expanded: _propTypes2.default.object,
    expandedPath: _propTypes2.default.string,
    action: _propTypes2.default.string,
    goToPath: _propTypes2.default.func,
    goBack: _propTypes2.default.func
};

exports.default = Nav;