'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _a11yUtils = require('../../a11y-utils');

var _utils = require('../../utils/utils');

var _dataObjects = require('../../analytics/data-objects/');

var _listTile = require('../list-tile');

var _listTile2 = _interopRequireDefault(_listTile);

var _tile = require('../tile');

var _tile2 = _interopRequireDefault(_tile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var searchId = function () {
    var i = 0;
    return function () {
        return i++;
    };
}();

/**
 * `Search` component that includes two variants: inline and overlay.
 * This component is commonly used in the header.
 *
 * @example ./DESIGN.md
 */

var Search = function (_React$Component) {
    (0, _inherits3.default)(Search, _React$Component);

    function Search(props) {
        (0, _classCallCheck3.default)(this, Search);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Search.__proto__ || (0, _getPrototypeOf2.default)(Search)).call(this, props));

        _this.state = {
            searchValue: '',
            isActive: false,
            id: 'search-' + searchId()
        };

        _this.componentDidUpdate = _this.componentDidUpdate.bind(_this);
        _this.focusInput = _this.focusInput.bind(_this);
        _this.blurInput = _this.blurInput.bind(_this);
        _this.resetInput = _this.resetInput.bind(_this);
        _this.clearInput = _this.clearInput.bind(_this);
        _this.closeSearch = _this.closeSearch.bind(_this);
        _this.submitSearch = _this.submitSearch.bind(_this);
        _this.clickSuggestion = _this.clickSuggestion.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Search, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            if (!prevProps.isOpen && this.props.isOpen) {
                this.focusInput();
            }

            if (prevProps.isOpen && !this.props.isOpen || prevState.isActive && !this.state.isActive) {
                this.resetInput();
            }
        }
    }, {
        key: 'resetInput',
        value: function resetInput() {
            this.setState({
                searchValue: ''
            });
        }
    }, {
        key: 'clearInput',
        value: function clearInput() {
            this.resetInput();
            this.focusInput();
            this.props.onClear();
        }
    }, {
        key: 'focusInput',
        value: function focusInput() {
            this.input.focus();
        }

        // @TODO: check and make sure this doesn't break accessibility

    }, {
        key: 'blurInput',
        value: function blurInput() {
            this.input.blur();
        }
    }, {
        key: 'closeSearch',
        value: function closeSearch(e) {
            this.setState({
                isActive: false
            });
            this.resetInput();
            this.props.onClose(e);
            this.blurInput();
        }
    }, {
        key: 'submitSearch',
        value: function submitSearch(e) {
            this.props.onSubmit(e);
            this.closeSearch();
        }
    }, {
        key: 'clickSuggestion',
        value: function clickSuggestion(e) {
            this.props.onClickSuggestion(e);
            this.closeSearch();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                accessibleLabel = _props.accessibleLabel,
                className = _props.className,
                onChange = _props.onChange,
                onClose = _props.onClose,
                inputProps = _props.inputProps,
                isOverlay = _props.isOverlay,
                searchIcon = _props.searchIcon,
                suggestedTermHeading = _props.suggestedTermHeading,
                suggestedProductsHeading = _props.suggestedProductsHeading,
                termSuggestions = _props.termSuggestions,
                productSuggestions = _props.productSuggestions,
                onClickSuggestion = _props.onClickSuggestion,
                submitButtonProps = _props.submitButtonProps,
                closeButtonProps = _props.closeButtonProps,
                clearButtonProps = _props.clearButtonProps;
            var _state = this.state,
                isActive = _state.isActive,
                searchValue = _state.searchValue,
                id = _state.id;


            var classes = (0, _classnames2.default)('pw-search', {
                'pw--is-active': isActive,
                'pw--is-overlay': isOverlay
            }, className);

            var searchSuggestionClasses = (0, _classnames2.default)('pw-search__suggestions', {
                'pw--is-empty': !termSuggestions && !productSuggestions
            });

            return _react2.default.createElement(
                'div',
                { className: classes, role: 'search' },
                _react2.default.createElement(
                    'div',
                    { className: 'pw-search__inner' },
                    _react2.default.createElement(
                        'form',
                        {
                            className: 'pw-search__form',
                            onSubmit: this.submitSearch,
                            onChange: onChange,
                            action: 'javascript:void(0)'
                        },
                        _react2.default.createElement(
                            'div',
                            { className: 'pw-search__bar' },
                            _react2.default.createElement(
                                'div',
                                { className: 'pw-search__icon' },
                                _react2.default.createElement(_icon2.default, { className: 'pw-search__icon-content', name: searchIcon })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: 'pw-search__field' },
                                _react2.default.createElement(
                                    'label',
                                    {
                                        htmlFor: id,
                                        className: 'u-visually-hidden'
                                    },
                                    accessibleLabel
                                ),
                                _react2.default.createElement('input', (0, _extends3.default)({ className: 'pw-search__input',
                                    ref: function ref(el) {
                                        _this2.input = el;
                                    },
                                    id: id,
                                    value: searchValue,
                                    onChange: function onChange(e) {
                                        return _this2.setState({ searchValue: e.target.value });
                                    },
                                    onFocus: function onFocus() {
                                        return _this2.setState({ isActive: true });
                                    },
                                    type: 'search',
                                    name: 'query',
                                    'data-analytics-name': _dataObjects.UI_NAME.search
                                }, inputProps))
                            ),
                            searchValue.length > 0 && _react2.default.createElement(
                                'div',
                                { className: 'pw-search__button-clear' },
                                _react2.default.createElement(_button2.default, (0, _extends3.default)({
                                    onClick: this.clearInput
                                }, clearButtonProps, {
                                    'data-analytics-name': _dataObjects.UI_NAME.clearSearch
                                }))
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: 'pw-search__button-submit' },
                                _react2.default.createElement(_button2.default, (0, _extends3.default)({
                                    type: 'submit',
                                    disabled: searchValue.trim().length === 0
                                }, submitButtonProps, {
                                    'data-analytics-name': _dataObjects.UI_NAME.search
                                }))
                            ),
                            isOverlay && _react2.default.createElement(
                                'div',
                                { className: 'pw-search__button-close' },
                                _react2.default.createElement(_button2.default, (0, _extends3.default)({
                                    onClick: this.closeSearch
                                }, closeButtonProps, {
                                    'data-analytics-name': _dataObjects.UI_NAME.dismissSearch
                                }))
                            )
                        )
                    ),
                    _react2.default.createElement(
                        'section',
                        { className: searchSuggestionClasses },
                        termSuggestions && _react2.default.createElement(
                            'div',
                            { className: 'pw-search__term-suggestions' },
                            _react2.default.createElement(
                                'h1',
                                { className: 'pw-search__suggestion-heading' },
                                suggestedTermHeading
                            ),
                            _react2.default.createElement(
                                'ul',
                                { className: 'pw-search__suggestion-list' },
                                termSuggestions.map(function (suggestion, index) {
                                    var suggestionProps = (0, _extends3.default)({}, suggestion);
                                    if (onClickSuggestion) {
                                        suggestionProps.onClick = _this2.clickSuggestion;
                                    }
                                    return _react2.default.createElement(
                                        'li',
                                        { key: index, className: 'pw-search__suggestion' },
                                        _react2.default.createElement(_listTile2.default, suggestionProps)
                                    );
                                })
                            )
                        ),
                        productSuggestions && _react2.default.createElement(
                            'div',
                            { className: 'pw-search__product-suggestions' },
                            _react2.default.createElement(
                                'h1',
                                { className: 'pw-search__suggestion-heading' },
                                suggestedProductsHeading
                            ),
                            _react2.default.createElement(
                                'ul',
                                { className: 'pw-search__suggestion-list' },
                                productSuggestions.map(function (suggestion, index) {
                                    var suggestionProps = (0, _extends3.default)({}, suggestion);
                                    if (onClickSuggestion) {
                                        suggestionProps.onClick = _this2.clickSuggestion;
                                    }
                                    return _react2.default.createElement(
                                        'li',
                                        { key: index, className: 'pw-search__suggestion' },
                                        _react2.default.createElement(_tile2.default, suggestionProps)
                                    );
                                })
                            )
                        )
                    )
                ),
                _react2.default.createElement('div', {
                    tabIndex: '-1',
                    role: 'presentation',
                    onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(onClose),
                    className: 'pw-search__shade',
                    onClick: this.closeSearch
                })
            );
        }
    }]);
    return Search;
}(_react2.default.Component);

Search.defaultProps = {
    accessibleLabel: 'Search',
    submitButtonProps: {
        text: 'Submit search'
    },
    closeButtonProps: {
        text: 'Close search'
    },
    clearButtonProps: {
        text: 'Clear'
    },
    suggestedTermHeading: 'Suggested Search Terms',
    suggestedProductsHeading: 'Suggested Products',
    onClose: _utils.noop,
    onFocus: _utils.noop,
    onClear: _utils.noop,
    searchIcon: 'search'
};

Search.propTypes = {
    /**
     * Adds text as a label for the search input, accessible
     * to screen readers, but hidden to visual users.
     */
    accessibleLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * The properties for clear button.
     */
    clearButtonProps: _propTypes2.default.object,

    /**
     * The properties for close button.
     */
    closeButtonProps: _propTypes2.default.object,

    /**
     * The data for the input you wish to render.
     */
    inputProps: _propTypes2.default.object,

    /**
     * Is only used when `isOverlay` is `true`. Its comparison in `componentDidUpdate`
     * determines whether to allow or disallow input focus, or input reset. This
     * prop does nothing for an inline search. Note that this is different
     * from isActive.
     */
    isOpen: _propTypes2.default.bool,

    /**
     * Controls whether the search component uses an overlay layout or not.
     */
    isOverlay: _propTypes2.default.bool,

    /**
     * An array of the search(product) suggestions to be displayed.
     */
    productSuggestions: _propTypes2.default.array,

    /**
     * Icon name for search.
     * For more information about available icons, see the [Icon component](#!/Icon).
     */
    searchIcon: _propTypes2.default.string,

    /**
     * The properties for submit button.
     */
    submitButtonProps: _propTypes2.default.object,

    /**
     * The text for suggested products heading.
     */
    suggestedProductsHeading: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * The text for suggested terms heading.
     */
    suggestedTermHeading: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * An array of the search(term) suggestions to be displayed
     */
    termSuggestions: _propTypes2.default.array,

    /**
     * The function to be called when the form is changed.
     */
    onChange: _propTypes2.default.func,

    /**
     * The function to be called when the clear button is clicked.
     */
    onClear: _propTypes2.default.func,

    /**
     * The function to be called when a suggestion is clicked.
     */
    onClickSuggestion: _propTypes2.default.func,

    /**
     * The function to be called when the close button is clicked.
     */
    onClose: _propTypes2.default.func,

    /**
     * The function to be called after form is submitted.
     */
    onSubmit: _propTypes2.default.func
};

exports.default = Search;