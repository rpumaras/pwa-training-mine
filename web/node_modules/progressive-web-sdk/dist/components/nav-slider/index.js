'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _nav = require('../nav');

var _nav2 = _interopRequireDefault(_nav);

var _static = require('inline-style-prefixer/static');

var _static2 = _interopRequireDefault(_static);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related components:
 *
 * * [Nav](#!/Nav)
 * * [NavHeader](#!/NavHeader)
 * * [NavItem](#!/NavItem)
 * * [NavMenu](#!/NavMenu)
 * * [NavSlider](#!/NavSlider)
 *
 * `NavSlider` is a helper component for customizing the slide-in and slide-out
 * animations used when traversing items in the [`Nav`](#!/Nav) component.
 * In particular, `NavSlider` can be used to create fully custom versions of the
 * [`NavHeader`](#!/NavHeader) and [`NavMenu`](#!/NavMenu) components.
 *
 * To take full advantage of the `NavSlider`, it should be used with the
 * [`TransitionGroup`](https://github.com/reactjs/react-transition-group)
 * component. See examples of this below.
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var NavSlider = function (_React$Component) {
    (0, _inherits3.default)(NavSlider, _React$Component);

    function NavSlider(props) {
        (0, _classCallCheck3.default)(this, NavSlider);

        var _this = (0, _possibleConstructorReturn3.default)(this, (NavSlider.__proto__ || (0, _getPrototypeOf2.default)(NavSlider)).call(this, props));

        _this.state = {
            style: {}
        };
        return _this;
    }

    (0, _createClass3.default)(NavSlider, [{
        key: 'componentWillEnter',
        value: function componentWillEnter(callback) {
            var _this2 = this;

            var action = this.context.action;

            var _ref = action === 'descending' ? ['100%', '0'] : ['-100%', '0'],
                _ref2 = (0, _slicedToArray3.default)(_ref, 2),
                start = _ref2[0],
                end = _ref2[1];

            var wrappedCalledback = function wrappedCalledback() {
                _this2.props.onEnterComplete();
                callback();
            };

            this.animate(start, end, wrappedCalledback);
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave(callback) {
            var _this3 = this;

            var action = this.context.action;

            var _ref3 = action === 'descending' ? ['0', '-100%'] : ['0', '100%'],
                _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
                start = _ref4[0],
                end = _ref4[1];

            var wrappedCalledback = function wrappedCalledback() {
                _this3.props.onLeaveComplete();
                callback();
            };

            this.animate(start, end, wrappedCalledback);
        }
    }, {
        key: 'animate',
        value: function animate(start, end, callback) {
            var _this4 = this;

            var _props = this.props,
                duration = _props.duration,
                easing = _props.easing;


            var frame = function frame() {
                return new _promise2.default(function (resolve) {
                    requestAnimationFrame(resolve);
                });
            };

            var setStartState = function setStartState() {
                return new _promise2.default(function (resolve) {
                    var state = {
                        style: (0, _static2.default)({
                            transform: 'translate(' + start + ', 0)',
                            transition: 'none'
                        }),
                        isSliding: true
                    };
                    _this4.setState(state, resolve);
                });
            };

            var setEndState = function setEndState() {
                return new _promise2.default(function (resolve) {
                    var state = {
                        style: (0, _static2.default)({
                            transform: 'translate(' + end + ', 0)',
                            transition: 'transform ' + duration / 1000 + 's ' + easing
                        })
                    };
                    _this4.setState(state, resolve);
                });
            };

            var waitForAnimation = function waitForAnimation() {
                return new _promise2.default(function (resolve) {
                    setTimeout(function () {
                        callback();
                        resolve();
                    }, duration);
                });
            };

            var cleanup = function cleanup() {
                _this4.setState({ isSliding: false });
            };

            frame().then(setStartState).then(frame).then(setEndState).then(waitForAnimation).then(cleanup);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                id = _props2.id,
                children = _props2.children,
                className = _props2.className;
            var _state = this.state,
                style = _state.style,
                isSliding = _state.isSliding;

            var classes = (0, _classnames2.default)('pw-nav-slider', { 'pw--sliding': isSliding }, className);

            return _react2.default.createElement(
                'div',
                { className: classes, id: id, style: style },
                children
            );
        }
    }]);
    return NavSlider;
}(_react2.default.Component);

NavSlider.propTypes = {
    /**
     * Child nodes of the `NavSlider`.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Duration of the animation in milliseconds.
     */
    duration: _propTypes2.default.number,

    /**
     * Easing function for the animation as a string whose value
     * can be anything the [CSS `transition-timing-function`](https://developer.mozilla.org/en/docs/Web/CSS/transition-timing-function)
     * can take in.
     */
    easing: _propTypes2.default.string,

    /**
     * Id given to the root element.
     */
    id: _propTypes2.default.string,

    /**
     * Determines if slider is sliding (animating)
     */
    isSliding: _propTypes2.default.bool,

    /**
     * This function is called once the enter animation is complete
     */
    onEnterComplete: _propTypes2.default.func,

    /**
     * This function is called once the leave animation is complete
     */
    onLeaveComplete: _propTypes2.default.func
};

NavSlider.defaultProps = {
    duration: 500,
    easing: 'ease-out',
    onEnterComplete: _utils.noop,
    onLeaveComplete: _utils.noop
};

NavSlider.contextTypes = _nav2.default.childContextTypes;

exports.default = NavSlider;