'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _iconLabel = require('../../icon-label');

var _iconLabel2 = _interopRequireDefault(_iconLabel);

var _carousel = require('../../carousel');

var _carousel2 = _interopRequireDefault(_carousel);

var _carouselItem = require('../../carousel/carousel-item');

var _carouselItem2 = _interopRequireDefault(_carouselItem);

var _dataObjects = require('../../../analytics/data-objects/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var STATUS = {
    COPY_ERROR: 'COPY_ERROR',
    EMAIL_ERROR: 'EMAIL_ERROR', // no way to know if mailto: failed.
    PRINT_ERROR: 'PRINT_ERROR',
    SHARE_ERROR: 'SHARE_ERROR'

    // The props from the Sheet component pass directly to SheetContent,
    // making propType validation redundant.
    /* eslint-disable react/prop-types */
    // All props inherited from parent on this private component.

};var generateSharePages = function generateSharePages(_ref) {
    var shareOptions = _ref.shareOptions,
        optionsPerCol = _ref.optionsPerCol,
        optionsPerRow = _ref.optionsPerRow;

    var optionPages = [];
    var optionsPerPage = optionsPerCol * optionsPerRow;
    var numShareOptionPages = Math.ceil(shareOptions.length / optionsPerPage);
    var iconSize = 'x-large';

    for (var i = 0; i < numShareOptionPages; i++) {
        var optionColumns = [];
        var columnElements = [];

        // Create columns
        for (var j = 0; j < optionsPerRow; j++) {
            optionColumns.push([]);
        }

        // Fill columns
        for (var k = i * optionsPerPage; k < shareOptions.length && k < (i + 1) * optionsPerPage; k++) {
            var option = shareOptions[k];
            var shareOptionClasses = (0, _classnames2.default)('pw-share__option', option.class);
            optionColumns[k % optionsPerRow].push(_react2.default.createElement(
                'button',
                {
                    className: shareOptionClasses,
                    key: 'option-' + k,
                    onClick: option.onClick,
                    'data-analytics-name': option.analyticsName,
                    type: 'button'
                },
                _react2.default.createElement(_iconLabel2.default, {
                    className: 'pw-share__option-icon',
                    label: option.label,
                    iconName: option.iconName,
                    iconSize: iconSize
                })
            ));
        }

        for (var l = 0; l < optionColumns.length; l++) {
            columnElements.push(_react2.default.createElement(
                'div',
                { key: 'option-column-' + l, className: 'pw-share__option-column' },
                optionColumns[l]
            ));
        }

        optionPages.push(_react2.default.createElement(
            _carouselItem2.default,
            { key: 'share-page-wrapper-' + i },
            _react2.default.createElement(
                'div',
                { className: 'pw-share__sheet-page u-flex u-flexbox u-direction-row u-justify-around' },
                columnElements
            )
        ));
    }

    return optionPages;
};

var copyContentToClipboard = function copyContentToClipboard(el) {
    if (typeof document.execCommand !== 'function') {
        return false;
    }

    // element needs to be visible in order to copy
    el.style.display = 'inherit';
    el.select();
    var success = document.execCommand('copy');
    el.style.display = 'none';
    return success;
};

var addUrlShareParams = function addUrlShareParams(url, platform) {
    var shareUrl = void 0;
    var shareParams = 'share_mobify_id=' + window.sandy.instance.getClientID() + '&share_medium=' + platform;

    if (url.indexOf('?') === -1) {
        shareParams = '?' + shareParams;
    } else {
        shareParams = '&' + shareParams;
    }

    var hashIndex = url.indexOf('#');
    if (hashIndex !== -1) {
        shareUrl = '' + url.substring(0, hashIndex) + shareParams + url.substring(hashIndex);
    } else {
        shareUrl = '' + url + shareParams;
    }

    return shareUrl;
};

var ShareSheetContent = function (_React$Component) {
    (0, _inherits3.default)(ShareSheetContent, _React$Component);

    function ShareSheetContent(props) {
        (0, _classCallCheck3.default)(this, ShareSheetContent);

        var _this = (0, _possibleConstructorReturn3.default)(this, (ShareSheetContent.__proto__ || (0, _getPrototypeOf2.default)(ShareSheetContent)).call(this, props));

        var successHandler = _this.successHandler.bind(_this);
        var failHandler = _this.failHandler.bind(_this);

        _this.copyHandler = _this.copyHandler.bind(_this, { successHandler: successHandler, failHandler: failHandler });
        _this.emailHandler = _this.emailHandler.bind(_this, { successHandler: successHandler, failHandler: failHandler });
        _this.printHandler = _this.printHandler.bind(_this, { successHandler: successHandler, failHandler: failHandler });
        _this.fbShareHandler = _this.shareHandler.bind(_this, { platform: 'facebook', successHandler: successHandler, failHandler: failHandler });
        _this.twShareHandler = _this.shareHandler.bind(_this, { platform: 'twitter', successHandler: successHandler, failHandler: failHandler });
        return _this;
    }

    (0, _createClass3.default)(ShareSheetContent, [{
        key: 'copyHandler',
        value: function copyHandler(_ref2) {
            var successHandler = _ref2.successHandler,
                failHandler = _ref2.failHandler;

            return copyContentToClipboard(this.textArea) ? successHandler((0, _extends3.default)({}, this.props.shareContent, { shareOption: 'copy' })) : failHandler(STATUS.COPY_ERROR);
        }
    }, {
        key: 'emailHandler',
        value: function emailHandler(_ref3) {
            var successHandler = _ref3.successHandler,
                failHandler = _ref3.failHandler;

            if (typeof window.open === 'function') {
                var shareContent = this.props.shareContent;

                var subject = shareContent.title;
                var body = shareContent.url + '\n\n' + (shareContent.text || '');

                window.open(encodeURI('mailto:?subject=' + subject + '&body=' + body));
                successHandler((0, _extends3.default)({}, this.props.shareContent, { shareOption: 'email' }));
            } else {
                failHandler(STATUS.EMAIL_ERROR);
            }
        }
    }, {
        key: 'printHandler',
        value: function printHandler(_ref4) {
            var successHandler = _ref4.successHandler,
                failHandler = _ref4.failHandler;

            if (typeof window.print === 'function') {
                successHandler((0, _extends3.default)({}, this.props.shareContent, { shareOption: 'print' }));
                // We want the sheet to dismiss before the print dialog pops up
                setTimeout(window.print, 25);
            } else {
                failHandler(STATUS.PRINT_ERROR);
            }
        }
    }, {
        key: 'shareHandler',
        value: function shareHandler(_ref5) {
            var platform = _ref5.platform,
                successHandler = _ref5.successHandler,
                failHandler = _ref5.failHandler;

            var shareUrl = void 0;
            var url = addUrlShareParams(this.props.shareContent.url, platform);

            switch (platform) {
                case 'facebook':
                    shareUrl = 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(url);
                    break;
                // Twitter
                default:
                    shareUrl = 'https://twitter.com/share?url=' + encodeURIComponent(url);
                    break;
            }

            if (typeof window.open === 'function') {
                window.open(shareUrl);
                successHandler((0, _extends3.default)({}, this.props.shareContent, { shareOption: platform }));
            } else {
                failHandler(STATUS.SHARE_ERROR);
            }
        }
    }, {
        key: 'successHandler',
        value: function successHandler(shareData) {
            this.props.onDismiss();
            this.props.onSuccess((0, _extends3.default)({}, shareData, {
                url: addUrlShareParams(shareData.url, shareData.shareOption)
            }));
        }
    }, {
        key: 'failHandler',
        value: function failHandler(error) {
            var errMessage = void 0;

            switch (error) {
                case STATUS.COPY_ERROR:
                    errMessage = 'document.execCommand(\'copy\') is not supported.';
                    break;
                case STATUS.PRINT_ERROR:
                    errMessage = 'window.print() is not supported.';
                    break;
                case STATUS.EMAIL_ERROR:
                    errMessage = 'failed to open mail client.';
                    break;
                default:
                    errMessage = 'failed to share.';
                    break;
            }

            console.error('An error as occurred while attempting to share: ' + errMessage);
            this.props.onFail(error);
            this.props.onDismiss();
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                optionsPerCol = _props.optionsPerCol,
                optionsPerRow = _props.optionsPerRow,
                shareContent = _props.shareContent;


            var classes = (0, _classnames2.default)('pw-share__sheet-content u-padding-lg');
            var shareOptions = [{
                label: 'Copy',
                iconName: 'copy',
                class: 'js-share__copy-option',
                onClick: this.copyHandler,
                analyticsName: _dataObjects.UI_NAME.shareCopy
            }, {
                label: 'Email',
                iconName: 'email',
                class: 'js-share__email-option',
                onClick: this.emailHandler,
                analyticsName: _dataObjects.UI_NAME.shareEmail
            }, {
                label: 'Print',
                iconName: 'print',
                class: 'js-share__print-option',
                onClick: this.printHandler,
                analyticsName: _dataObjects.UI_NAME.sharePrint
            }, {
                label: 'Facebook',
                iconName: 'social-facebook',
                class: 'js-share__social-option js--facebook-option',
                onClick: this.fbShareHandler,
                analyticsName: _dataObjects.UI_NAME.shareFacebook

            }, {
                label: 'Twitter',
                iconName: 'social-twitter',
                class: 'js-share__social-option js--twitter-option',
                onClick: this.twShareHandler,
                analyticsName: _dataObjects.UI_NAME.shareTwitter
            }];

            var sharePages = generateSharePages({ shareOptions: shareOptions, optionsPerCol: optionsPerCol, optionsPerRow: optionsPerRow });
            var showPips = sharePages.length > 1;

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    _carousel2.default,
                    { showControls: false, showPips: showPips },
                    sharePages
                ),
                _react2.default.createElement('textarea', {
                    readOnly: true,
                    ref: function ref(self) {
                        _this2.textArea = self;
                    },
                    style: { display: 'none' },
                    value: shareContent.url,
                    'data-analytics-name': _dataObjects.UI_NAME.copy
                })
            );
        }
    }]);
    return ShareSheetContent;
}(_react2.default.Component);

exports.default = ShareSheetContent;