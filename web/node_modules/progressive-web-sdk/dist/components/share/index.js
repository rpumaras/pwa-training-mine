'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _sheet = require('../sheet');

var _sheet2 = _interopRequireDefault(_sheet);

var _shareSheetContent = require('./partials/share-sheet-content');

var _shareSheetContent2 = _interopRequireDefault(_shareSheetContent);

var _utils = require('../../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// A function so that it is testable
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var webShareSupported = function webShareSupported() {
    return navigator.share !== undefined;
};
var defaultTriggerElement = _react2.default.createElement(
    'button',
    null,
    _react2.default.createElement(
        'span',
        null,
        'Share\u2026'
    )
);
var defaultShareContent = { title: document.title, url: window.location.href };
var defaultShareSheetHeader = _react2.default.createElement(
    'h1',
    { className: 'pw-share__sheet-header' },
    'Share via'
);

/**
 * The `Share` component provides a way for Progressive Web Apps
 * to share the URL of the current page.
 *
 * It uses the WebShare API if supported on the current device and falls back
 * to a limited web implementation.
 *
 * @example ./DESIGN.md
 */

var Share = function (_React$Component) {
    (0, _inherits3.default)(Share, _React$Component);

    function Share(props) {
        (0, _classCallCheck3.default)(this, Share);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Share.__proto__ || (0, _getPrototypeOf2.default)(Share)).call(this, props));

        _this.onShow = _this.onShow.bind(_this);
        _this.onDismiss = _this.onDismiss.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Share, [{
        key: 'onShow',
        value: function onShow() {
            var _this2 = this;

            if (webShareSupported()) {
                navigator.share({
                    title: this.props.shareContent.title,
                    url: this.props.shareContent.url,
                    text: this.props.shareContent.text
                }).then(this.props.onSuccess).catch(function (error) {
                    _this2.props.onFail(error);
                    console.error('An error has occurred while attempting to share: ', error);
                });
            } else {
                this.props.onShow();
            }
        }
    }, {
        key: 'onDismiss',
        value: function onDismiss() {
            this.props.onDismiss();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                coverage = _props.coverage,
                duration = _props.duration,
                headerContent = _props.headerContent,
                open = _props.open,
                optionsPerCol = _props.optionsPerCol,
                optionsPerRow = _props.optionsPerRow,
                shareContent = _props.shareContent,
                triggerElement = _props.triggerElement,
                didDismiss = _props.didDismiss,
                didShow = _props.didShow,
                onFail = _props.onFail,
                onSuccess = _props.onSuccess,
                willDismiss = _props.willDismiss,
                willShow = _props.willShow;


            var classes = (0, _classnames2.default)('pw-share', className);
            var triggerClasses = (0, _classnames2.default)('pw-share__trigger', triggerElement.props.className);
            // Bind click handler to the root trigger element
            var triggerComponent = _react2.default.cloneElement(triggerElement, { className: triggerClasses, onClick: this.onShow });

            return _react2.default.createElement(
                'div',
                { className: classes },
                triggerComponent,
                webShareSupported() ? null : _react2.default.createElement(
                    _sheet2.default,
                    {
                        coverage: coverage,
                        duration: duration,
                        effect: 'slide-bottom',
                        headerContent: headerContent,
                        open: open,
                        onDismiss: this.onDismiss,
                        onOpen: didShow,
                        onClose: didDismiss,
                        onBeforeClose: willDismiss,
                        onBeforeOpen: willShow
                    },
                    _react2.default.createElement(_shareSheetContent2.default, {
                        optionsPerCol: optionsPerCol,
                        optionsPerRow: optionsPerRow,
                        shareContent: shareContent,
                        onDismiss: this.onDismiss,
                        onFail: onFail,
                        onSuccess: onSuccess
                    })
                )
            );
        }
    }]);
    return Share;
}(_react2.default.Component);

Share.propTypes = {
    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Coverage defines the amount of the current viewport taken up by the share
     * sheet content.
     */
    coverage: _propTypes2.default.string,

    /**
     * User-defined function that is called after the `Share` sheet is dismissed.
     */
    didDismiss: _propTypes2.default.func,

    /**
     * User-defined function that is called after the `Share` sheet is shown.
     */
    didShow: _propTypes2.default.func,

    /**
     * Defines the time the show/dismiss animation takes to complete.
     */
    duration: _propTypes2.default.number,

    /**
     * User-defined header of the sheet
     */
    headerContent: _propTypes2.default.element,

    /**
     * Determines whether the Share Sheet is opened or closed.
     */
    open: _propTypes2.default.bool,

    /**
     * Defines the number of share options displayed per column on the `Share` sheet.
     */
    optionsPerCol: _propTypes2.default.number,

    /**
     * Defines the number of share options displayed per row on the `Share` sheet.
     */
    optionsPerRow: _propTypes2.default.number,

    /**
     * Defines what is to be shared by the `Share` component. An object with the following
     * structure: `{title, text, url}`
     */
    shareContent: _propTypes2.default.object,

    /**
     * User-defined element that is responsible for triggering the `Share` sheet.
     */
    triggerElement: _propTypes2.default.element,

    /**
     * User-defined function that is called before the `Share` sheet is dismissed.
     */
    willDismiss: _propTypes2.default.func,

    /**
     * User-defined function that is called before the `Share` sheet is shown.
     */
    willShow: _propTypes2.default.func,

    // Callback Props

    /**
     * User-defined function that is called when the user clicks to dismiss the sheet.
     * Use this to change state and re-render the `Share` sheet through props.
     */
    onDismiss: _propTypes2.default.func,

    /**
     * User-defined function that is called when the component fails to
     * copy or share the URL. `function(error) {...}`
     */
    onFail: _propTypes2.default.func,

    /**
     * User-defined function that is used to trigger the rendering of the sheet.
     * Use this to change state and re-render the `Share` sheet through props.
     */
    onShow: _propTypes2.default.func,

    /**
     * User-defined function that is called when the component successfully
     * triggers the share option that a user selected. `function(shareData) {...}`
     */
    onSuccess: _propTypes2.default.func
};

Share.defaultProps = {
    coverage: '50%',
    duration: 200,
    open: false,
    optionsPerRow: 4,
    optionsPerCol: 2,
    headerContent: defaultShareSheetHeader,
    shareContent: defaultShareContent,
    triggerElement: defaultTriggerElement,
    didDismiss: _utils.noop,
    didShow: _utils.noop,
    onDismiss: _utils.noop,
    onShow: _utils.noop,
    onFail: _utils.noop,
    onSuccess: _utils.noop,
    willDismiss: _utils.noop,
    willShow: _utils.noop
};

exports.default = Share;