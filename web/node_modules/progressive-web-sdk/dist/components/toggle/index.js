'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OVERFLOW_CHECK_INTERVAL = 200;

/**
 * `Toggle` component is commonly used to visually 'truncate' its contents
 * if it crosses a preset height threshold.
 * It will show/hide the toggle button if the contents doesn't overflow pass the threshold.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Toggle = function (_React$Component) {
    (0, _inherits3.default)(Toggle, _React$Component);

    function Toggle(props) {
        (0, _classCallCheck3.default)(this, Toggle);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Toggle.__proto__ || (0, _getPrototypeOf2.default)(Toggle)).call(this, props));

        _this.state = {
            expanded: false,
            overflowing: true
        };

        _this.toggleContent = _this.toggleContent.bind(_this);
        _this.checkContentHeight = (0, _lodash2.default)(_this.checkContentHeight.bind(_this), OVERFLOW_CHECK_INTERVAL);
        _this.removeMaxHeight = _this.removeMaxHeight.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Toggle, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // Check if content's height is greater than the heightThreshold
            this.checkContentHeight();

            // Re-calculate content height when viewport changes size
            window.addEventListener('resize', this.checkContentHeight);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            // Remove eventListener if component gets removed
            window.removeEventListener('resize', this.checkContentHeight);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            // Recalc height after component gets updated (For example: image loaded)
            this.checkContentHeight();
        }
    }, {
        key: 'checkContentHeight',
        value: function checkContentHeight() {
            var heightThreshold = this.props.heightThreshold;

            // Avoid infinite loop with componentDidUpdate

            if (!this._content || this.state.contentHeight === this._content.clientHeight) {
                return;
            }

            this.setState({
                contentHeight: this._content.clientHeight,
                overflowing: this._content.clientHeight > heightThreshold
            });
        }
    }, {
        key: 'toggleContent',
        value: function toggleContent() {
            if (this.state.expanded) {
                this.setState({
                    expanded: false,
                    overflowing: true
                });
            } else {
                this.setState({
                    expanded: true
                });
            }
        }
    }, {
        key: 'removeMaxHeight',
        value: function removeMaxHeight(e) {
            if (this.state.expanded && e.target === this._inner) {
                this.setState({
                    overflowing: false
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                className = _props.className,
                heightThreshold = _props.heightThreshold,
                expandLabel = _props.expandLabel,
                collapseLabel = _props.collapseLabel;


            var classes = (0, _classnames2.default)('pw-toggle', className);

            var innerClasses = (0, _classnames2.default)('pw-toggle__inner', {
                // Adds fade overlay to indicate content overflow
                'pw--overflow': this.state.overflowing
            });

            var innerStyle = {
                maxHeight: this.state.expanded ?
                // Expand contents to content height
                this.state.contentHeight
                // Cap height to threshold when component is not expanded
                : heightThreshold
            };

            var buttonLabel = this.state.expanded ? collapseLabel : expandLabel;

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    'div',
                    {
                        className: innerClasses,
                        style: innerStyle,
                        onTransitionEnd: this.removeMaxHeight,
                        ref: function ref(el) {
                            _this2._inner = el;
                        }
                    },
                    _react2.default.createElement(
                        'div',
                        {
                            className: 'pw-toggle__content',
                            ref: function ref(el) {
                                _this2._content = el;
                            }
                        },
                        children
                    )
                ),
                (this.state.overflowing || this.state.expanded) && _react2.default.createElement(
                    'div',
                    { className: 'pw-toggle__action' },
                    _react2.default.createElement(_button2.default, {
                        className: 'pw-toggle__toggler',
                        children: buttonLabel,
                        onClick: this.toggleContent
                    })
                )
            );
        }
    }]);
    return Toggle;
}(_react2.default.Component);

Toggle.defaultProps = {
    expandLabel: 'View More',
    collapseLabel: 'View Less',
    heightThreshold: 100
};

Toggle.propTypes = {
    /**
     * Contents that will be wrapped by the Toggle component.
     */
    children: _propTypes2.default.node.isRequired,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Label for collapse button.
     */
    collapseLabel: _propTypes2.default.node,

    /**
     * Label for expand button.
     */
    expandLabel: _propTypes2.default.node,

    /**
     * Max height of the content before it needs to be 'truncated' visually.
     */
    heightThreshold: _propTypes2.default.number
};

exports.default = Toggle;