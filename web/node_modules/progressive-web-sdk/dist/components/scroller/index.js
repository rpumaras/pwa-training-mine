'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `Scroller` component is used to display content(items) side by side.
 * It allows user to scroll the overflowing content horizontally.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Scroller = function (_React$Component) {
    (0, _inherits3.default)(Scroller, _React$Component);

    function Scroller(props) {
        (0, _classCallCheck3.default)(this, Scroller);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Scroller.__proto__ || (0, _getPrototypeOf2.default)(Scroller)).call(this, props));

        _this.state = {
            overflowLeft: false,
            overflowRight: false,
            overflowWidth: 0
        };

        _this.checkOverflow = (0, _lodash2.default)(_this.checkOverflow.bind(_this), 200);
        _this.handleScroll = _this.handleScroll.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(Scroller, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            // Check if scroller items are overflowing and apply styling classes
            this.checkOverflow();

            // Re-calculate scroller content width when viewport changes size
            window.addEventListener('resize', this.checkOverflow);

            // `this._scroller` is sometimes undefined in unit tests
            if (this._scroller) {
                this._scroller.addEventListener('scroll', this.handleScroll, false);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            // Remove eventListeners if component gets removed
            window.removeEventListener('resize', this.checkOverflow);

            this._scroller.removeEventListener('scroll', this.handleScroll, false);
        }
    }, {
        key: 'checkOverflow',
        value: function checkOverflow() {
            // `this._scroller` is sometimes undefined in unit tests
            var scrollWidth = this._scroller && this._scroller.scrollWidth;
            var containerWidth = this._scroller && this._scroller.clientWidth;

            if (scrollWidth > containerWidth) {
                this.setState({
                    overflowRight: true,
                    overflowWidth: scrollWidth - containerWidth
                });
            } else {
                this.setState({
                    overflowLeft: false,
                    overflowRight: false
                });
            }
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll() {
            var container = this._scroller;

            // If scroll position is not at the initial position, set overflowLeft to true
            if (container.scrollLeft > 0 && !this.state.overflowLeft) {
                this.setState({
                    overflowLeft: true
                });
            } else if (container.scrollLeft === 0) {
                this.setState({
                    overflowLeft: false
                });
            }

            // If scroll position reached all the way to the right, set overflowRight to false
            if (container.scrollLeft < this.state.overflowWidth && !this.state.overflowRight) {
                this.setState({
                    overflowRight: true
                });
            } else if (container.scrollLeft === this.state.overflowWidth) {
                this.setState({
                    overflowRight: false
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                children = _props.children,
                className = _props.className;


            var classes = (0, _classnames2.default)('pw-scroller', {
                'pw--overflow-left': this.state.overflowLeft,
                'pw--overflow-right': this.state.overflowRight
            }, className);

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                        'div',
                        {
                            className: 'pw-scroller__content',
                            ref: function ref(el) {
                                _this2._scroller = el;
                            }
                        },
                        children && _react2.default.Children.map(children, function (child, index) {
                            return _react2.default.createElement(
                                'div',
                                { key: index, className: 'pw-scroller__item' },
                                child
                            );
                        })
                    )
                )
            );
        }
    }]);
    return Scroller;
}(_react2.default.Component);

Scroller.propTypes = {
    /**
     * Each children will be placed inside a `pw-scroller__item` container
     */
    children: _propTypes2.default.node.isRequired,

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string
};

exports.default = Scroller;