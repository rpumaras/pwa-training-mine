'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _listTile = require('../list-tile');

var _listTile2 = _interopRequireDefault(_listTile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related components:
 *
 * * [Nav](#!/Nav)
 * * [NavHeader](#!/NavHeader)
 * * [NavItem](#!/NavItem)
 * * [NavMenu](#!/NavMenu)
 * * [NavSlider](#!/NavSlider)
 *
 * By itself, the `NavItem` renders a simple block link that is meant for use
 * in other components. In fact, it is the default component used when the
 * `NavMenu` component renders its list of navigation items.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var NavItem = function NavItem(props) {
  var navigate = props.navigate,
      selected = props.selected,
      title = props.title,
      className = props.className,
      childIcon = props.childIcon,
      beforeContentProp = props.beforeContent,
      contentProp = props.content,
      hasChild = props.hasChild,
      href = props.href;


  var onClick = function onClick(e) {
    e.preventDefault();
    navigate();
  };

  var before = beforeContentProp;
  var content = contentProp || title;
  var after = hasChild ? childIcon : null;
  var classes = (0, _classnames2.default)('pw-nav-item', {
    'pw--has-child': hasChild,
    'pw--selected': selected
  }, className);

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      _listTile2.default,
      {
        className: classes,
        onClick: onClick,
        href: href,
        startAction: before,
        endAction: after,
        includeEndActionInPrimary: true
      },
      content
    )
  );
};

NavItem.defaultProps = {
  navigate: /* istanbul ignore next */function navigate() {
    return null;
  },
  childIcon: '>'
};

NavItem.propTypes = {

  /**
   * Content to go before the main label on the nav item.
   */
  beforeContent: _propTypes2.default.node,

  /**
   * Override the default icon for the has-child indicator.
   */
  childIcon: _propTypes2.default.node,

  /**
   * Extra classes for the element.
   */
  className: _propTypes2.default.string,

  /**
   * Override the main label content on the nav item (default
   * is its title).
   */
  content: _propTypes2.default.node,

  /**
   * Indicates whether the item has children.
   */
  hasChild: _propTypes2.default.bool,

  /**
   * If provided, element will render as a link.
   */
  href: _propTypes2.default.string,

  /**
   * A no-args function to call in order to navigate to
   * this position in the tree.
   */
  navigate: _propTypes2.default.func,

  /**
   * Indicates whether the item is currently selected.
   */
  selected: _propTypes2.default.bool,

  /**
   * The title of the navigation item.
   */
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node])

};

exports.default = NavItem;