'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _link = require('../link');

var _link2 = _interopRequireDefault(_link);

var _a11yUtils = require('../../a11y-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListTilePrimary = function ListTilePrimary(_ref) {
    var children = _ref.children,
        href = _ref.href,
        onClick = _ref.onClick;

    var listTileProps = {
        className: 'pw-list-tile__primary'
    };
    if (onClick) {
        listTileProps.onClick = onClick;
    }
    if (href) {
        return _react2.default.createElement(
            _link2.default,
            (0, _extends3.default)({ href: href }, listTileProps),
            children
        );
    } else {
        // Disabling the jsx-a11y/no-static-element-interactions rule because
        // there are some cases where we want the this container to behave as a
        // button, but it also contains a button. Nesting buttons inside buttons
        // in not valid markup.
        //
        // @url: https://developer.mozilla.org/en/docs/Web/HTML/Element/button
        /* eslint-disable jsx-a11y/no-static-element-interactions */
        return _react2.default.createElement(
            'div',
            (0, _extends3.default)({
                role: 'button',
                tabIndex: '0',
                onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(onClick)
            }, listTileProps),
            children
        );
        /* eslint-enable jsx-a11y/no-static-element-interactions */
    }
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ListTilePrimary.propTypes = {
    /**
     * PROVIDED INTERNALLY: the contents of the primary part of the ListTile
     */
    children: _propTypes2.default.node,

    /**
     * PROVIDED INTERNALLY: The URL to link to from the primary part
     */
    href: _propTypes2.default.string,

    /**
     * PROVIDED INTERNALLY: A callback for when the primary part is clicked.
     */
    onClick: _propTypes2.default.func

    /**
     * The `ListTile` component is a container to display text or/and links.
     * ListTile can have actions that can be displayed before or/and after the text.
     * Commonly used in the `List` component
     *
     * @example ./DESIGN.md
     */

};
var ListTile = function (_React$PureComponent) {
    (0, _inherits3.default)(ListTile, _React$PureComponent);

    function ListTile() {
        (0, _classCallCheck3.default)(this, ListTile);
        return (0, _possibleConstructorReturn3.default)(this, (ListTile.__proto__ || (0, _getPrototypeOf2.default)(ListTile)).apply(this, arguments));
    }

    (0, _createClass3.default)(ListTile, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                startAction = _props.startAction,
                endAction = _props.endAction,
                children = _props.children,
                href = _props.href,
                includeEndActionInPrimary = _props.includeEndActionInPrimary,
                onClick = _props.onClick;


            var classes = (0, _classnames2.default)('pw-list-tile', {
                'pw--is-anchor': !!href
            }, className);

            return _react2.default.createElement(
                'div',
                { className: classes },
                _react2.default.createElement(
                    ListTilePrimary,
                    { href: href, onClick: onClick },
                    startAction && _react2.default.createElement(
                        'div',
                        { className: 'pw-list-tile__action' },
                        startAction
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-list-tile__content' },
                        children
                    ),
                    includeEndActionInPrimary && endAction && _react2.default.createElement(
                        'div',
                        { className: 'pw-list-tile__action' },
                        endAction
                    )
                ),
                !includeEndActionInPrimary && endAction && _react2.default.createElement(
                    'div',
                    { className: 'pw-list-tile__action' },
                    endAction
                )
            );
        }
    }]);
    return ListTile;
}(_react2.default.PureComponent);

ListTile.defaultProps = {
    includeEndActionInPrimary: true
};

ListTile.propTypes = {
    /**
     * The content that should be rendered within the ListTile primary
     * section, excluding the action.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,

    /**
     * The content that appears at the end of the list tile.
     * Can be a supplementary action
     */
    endAction: _propTypes2.default.node,

    /**
     * If provided, the primary part of the ListTile will be rendered
     * as a Link to this URL.
     */
    href: _propTypes2.default.string,

    /**
    * Indicates if the endAction should be included inside the primary part.
    * If true, clicking endAction will perform the same action as the primary content
    */
    includeEndActionInPrimary: _propTypes2.default.bool,

    /**
     * The content that appears at the start of the list tile. Generally supplementary icon or text
     */
    startAction: _propTypes2.default.node,

    /**
     * Callback for when the primary is clicked. Not called if an href is passed.
     */
    onClick: _propTypes2.default.func
};

exports.default = ListTile;