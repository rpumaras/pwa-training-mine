'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _link = require('../link');

var _link2 = _interopRequireDefault(_link);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _a11yUtils = require('../../a11y-utils');

var _dataObjects = require('../../analytics/data-objects/');

var _analyticsManager = require('../../analytics/analytics-manager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A styleable, accessible `<button>` component.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Button = function (_React$PureComponent) {
    (0, _inherits3.default)(Button, _React$PureComponent);

    function Button() {
        (0, _classCallCheck3.default)(this, Button);
        return (0, _possibleConstructorReturn3.default)(this, (Button.__proto__ || (0, _getPrototypeOf2.default)(Button)).apply(this, arguments));
    }

    (0, _createClass3.default)(Button, [{
        key: 'handleClick',
        value: function handleClick(onClick) {
            var _this2 = this;

            return function (e) {
                if (window.Progressive) {
                    var _interactionData;

                    var interactionData = (_interactionData = {}, (0, _defineProperty3.default)(_interactionData, _dataObjects.UIInteraction.NAME, _this2.props[_analyticsManager.DATA_NAME]), (0, _defineProperty3.default)(_interactionData, _dataObjects.UIInteraction.SUBJECT, _dataObjects.UI_SUBJECT.user), (0, _defineProperty3.default)(_interactionData, _dataObjects.UIInteraction.ACTION, _dataObjects.UI_ACTION.click), (0, _defineProperty3.default)(_interactionData, _dataObjects.UIInteraction.OBJECT, _dataObjects.UI_OBJECT.button), _interactionData);
                    if (_this2.props[_analyticsManager.DATA_CONTENT]) {
                        interactionData[_dataObjects.UIInteraction.CONTENT] = _this2.props[_analyticsManager.DATA_CONTENT];
                    }
                    window.Progressive.analytics.send(interactionData);
                }
                if (onClick && typeof onClick === 'function') {
                    onClick(e);
                }
            };
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _props = this.props,
                href = _props.href,
                icon = _props.icon,
                iconSize = _props.iconSize,
                iconClassName = _props.iconClassName,
                innerClassName = _props.innerClassName,
                showIconText = _props.showIconText,
                text = _props.text,
                title = _props.title,
                type = _props.type,
                id = _props.id,
                className = _props.className,
                disabled = _props.disabled,
                name = _props.name,
                value = _props.value,
                role = _props.role,
                openInNewTab = _props.openInNewTab,
                onClick = _props.onClick;


            var classes = (0, _classnames2.default)('pw-button', {
                'pw--anchor': !!href,
                'pw--icon-only': !!icon && !this.props.children
            }, className);
            var innerClass = (0, _classnames2.default)('pw-button__inner', innerClassName);
            var iconClass = (0, _classnames2.default)('pw-button__icon', iconClassName, {
                'pw--has-siblings': this.props.children || title && showIconText
            });
            var textClass = (0, _classnames2.default)('pw-button__text', {
                'u-visually-hidden': !showIconText
            });
            var attrs = {
                href: href, id: id, disabled: disabled, name: name, value: value, role: role,
                onClick: this.handleClick(onClick),
                onKeyUp: (0, _a11yUtils.onKeyUpWrapper)(onClick),
                className: classes
            };

            var children = void 0;

            if (icon) {
                children = [_react2.default.createElement(_icon2.default, { className: iconClass, size: iconSize, name: icon, key: 'autoicon' }), title && _react2.default.createElement(
                    'span',
                    { className: textClass, key: 'autotitle' },
                    title
                )];

                if (typeof this.props.children === 'string') {
                    children.push(this.props.children);
                } else {
                    var _children;

                    (_children = children).push.apply(_children, (0, _toConsumableArray3.default)(this.props.children || []));
                }
            } else {
                children = text || this.props.children;
            }

            // Add all aria and data attributes
            (0, _keys2.default)(this.props).forEach(function (key) {
                if (/^(aria|data)-/.test(key)) {
                    attrs[key] = _this3.props[key];
                }
            });

            if (href) {
                return _react2.default.createElement(
                    _link2.default,
                    (0, _extends3.default)({}, attrs, { openInNewTab: openInNewTab }),
                    _react2.default.createElement(
                        'div',
                        { className: innerClass },
                        children
                    )
                );
            } else {
                return _react2.default.createElement(
                    'button',
                    (0, _extends3.default)({}, attrs, { type: type }),
                    _react2.default.createElement(
                        'div',
                        { className: innerClass },
                        children
                    )
                );
            }
        }
    }]);
    return Button;
}(_react2.default.PureComponent);

Button.defaultProps = {
    type: 'button'
};

Button.propTypes = {
    /**
     * Any children to be nested within this button.
     */
    children: _propTypes2.default.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Defines if button is disabled.
     */
    disabled: _propTypes2.default.bool,

    /**
     * If specified, the component is rendered as a link, with this value set as the href.
     */
    href: _propTypes2.default.string,

    /**
     * If specified, includes an icon of the given name in the button.
     * For more information about available icons, see the [Icon component](#!/Icon).
     */
    icon: _propTypes2.default.string,

    /**
     * Adds values to the class attribute in <Icon> component.
     */
    iconClassName: _propTypes2.default.string,

    /**
     * If specified, will set the icon to the size of your choice.
     */
    iconSize: _propTypes2.default.string,

    /**
     * Sets the `id` attribute of the root element.
     */
    id: _propTypes2.default.string,

    /**
     * Adds values to the class attribute of the inner container.
     */
    innerClassName: _propTypes2.default.string,

    /**
     * The button's `name` attribute.
     */
    name: _propTypes2.default.string,

    /**
     * For use with Buttons with an href set.
     *
     * If true, target="_blank" will be added to the button.
     * Only use this property if you trust the link! https://mathiasbynens.github.io/rel-noopener
     */
    openInNewTab: _propTypes2.default.bool,

    /**
     * The button's `role` attribute.
     */
    role: _propTypes2.default.string,

    /**
    * For use when the icon and title attributes have been defined.
    * If false, `u-visually-hidden` class will be added to the container that wraps
    * the title attribute. If true, `u-visually-hidden` will be removed.
    *
    */
    showIconText: _propTypes2.default.bool,

    /**
     * Text contents of the button.
     */
    text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * The title to be used for accessibility (generally if `icon` is used).
     * If showIconText is set to true, this text will be shown with the icon
     */
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Specifies button type, defaults to `button`.
     */
    type: _propTypes2.default.oneOf(['button', 'submit']),

    /**
     * The button's `value` attribute.
     */
    value: _propTypes2.default.string,

    /**
     * User-defined method for hooking into click events.
     */
    onClick: _propTypes2.default.func
};

exports.default = Button;