'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _list = require('../list');

var _list2 = _interopRequireDefault(_list);

var _static = require('inline-style-prefixer/static');

var _static2 = _interopRequireDefault(_static);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var POSITION_LEFT = 'left';
var POSITION_CENTER = 'center';
var POSITION_RIGHT = 'right';

/**
 * <strong style="color:red; font-size:20px;">Deprecated.</strong>
 * This component is deprecated in favour of the `Nav` component.
 * Please use that instead.
 */

var NestedNavigation = function (_React$Component) {
    (0, _inherits3.default)(NestedNavigation, _React$Component);

    function NestedNavigation(props) {
        (0, _classCallCheck3.default)(this, NestedNavigation);

        var _this = (0, _possibleConstructorReturn3.default)(this, (NestedNavigation.__proto__ || (0, _getPrototypeOf2.default)(NestedNavigation)).call(this, props));

        _this.state = {
            path: [],
            panels: [{
                path: null,
                position: POSITION_LEFT,
                transition: 'none'
            }, {
                path: [],
                position: POSITION_CENTER,
                transition: 'none'
            }, {
                path: null,
                position: POSITION_RIGHT,
                transition: 'none'
            }],
            title: {
                text: props.data.title,
                position: POSITION_CENTER,
                transition: 'none'
            }
        };

        _this.bindHandlers();
        return _this;
    }

    (0, _createClass3.default)(NestedNavigation, [{
        key: 'bindHandlers',
        value: function bindHandlers() {
            this.onPreviousHandler = this.onPreviousHandler.bind(this);
            this.onNextHandler = this.onNextHandler.bind(this);
            this.navigate = this.navigate.bind(this);
            this.updateTitle = this.updateTitle.bind(this);
            this.getList = this.getList.bind(this);
            this.buildList = this.buildList.bind(this);
        }
    }, {
        key: 'getPath',
        value: function getPath(position, path, newIndex) {
            var currentPath = this.state.path;

            // If the new index is less than 0, it means we are navigating
            // up in the tree.
            if (newIndex < 0) {
                if (position === POSITION_RIGHT) {
                    return currentPath;
                } else if (position === POSITION_CENTER) {
                    return currentPath.slice(0, path.length - 1);
                }
            } else {
                if (position === POSITION_CENTER) {
                    return path.concat(newIndex);
                } else if (position === POSITION_LEFT) {
                    return currentPath;
                }
            }

            return null;
        }
    }, {
        key: 'getPanelStyle',
        value: function getPanelStyle(position, newIndex) {
            var duration = this.props.duration;

            var transition = 'none';

            // Only animate the panel transition if moving one position aka right -> center,
            // center -> left, or left -> center and center -> right.
            if (duration && !(position === POSITION_RIGHT && newIndex >= 0)) {
                transition = 'transform ' + duration.toString() + 'ms ease-in-out';
            }

            return transition;
        }
    }, {
        key: 'getList',
        value: function getList(path) {
            if (!path) {
                return null;
            }

            var data = this.props.data;

            path = [].concat((0, _toConsumableArray3.default)(path)); // We don't want to modify the state

            while (path.length) {
                data = data.items[path.shift()];
            }

            return data;
        }
    }, {
        key: 'buildList',
        value: function buildList(path) {
            var list = this.getList(path);

            if (!path || !list.items) {
                return _react2.default.createElement(_list2.default, { items: [] });
            }

            return _react2.default.createElement(_list2.default, {
                component: this.props.component,
                items: list.items,
                clickHandler: this.onNextHandler
            });
        }
    }, {
        key: 'navigate',
        value: function navigate(index) {
            var _this2 = this;

            var _state = this.state,
                panels = _state.panels,
                path = _state.path,
                title = _state.title;
            var duration = this.props.duration;

            var newPath = void 0;
            var newList = void 0;
            var newPosition = void 0;

            if (index < 0) {
                // Navigating up
                newPath = path.slice(0, path.length - 1);
                newList = this.getList(newPath);
                newPosition = POSITION_RIGHT;
                panels.push(panels.shift());
            } else {
                // Navigating to new panel
                newPath = path.concat(index);
                newList = this.getList(newPath);
                newPosition = POSITION_LEFT;

                // If the new panel won't have any children, don't show it
                if (!newList || !newList.items) {
                    return;
                }

                panels.unshift(panels.pop());
            }

            // Update the current path and panels and title
            this.setState({
                path: newPath,
                panels: panels.map(function (_ref) {
                    var position = _ref.position,
                        path = _ref.path;

                    return {
                        path: _this2.getPath(position, path, index),
                        position: position,
                        transition: _this2.getPanelStyle(position, index)
                    };
                }),
                title: {
                    text: title.text,
                    position: newPosition,
                    transition: 'transform ' + duration / 2 + 'ms ease-in-out'
                }
            });
        }
    }, {
        key: 'updateTitle',
        value: function updateTitle() {
            var _this3 = this;

            var _state2 = this.state,
                path = _state2.path,
                title = _state2.title;
            var duration = this.props.duration;


            if (title.position === POSITION_CENTER) {
                return;
            }

            var list = this.getList(path);

            // Move the title section into it's pre-animation position,
            // ensuring the transition is off.
            this.setState({
                title: {
                    position: title.position === POSITION_LEFT ? POSITION_RIGHT : POSITION_LEFT,
                    transition: 'none'
                }
            });

            // Animate the title into it's new position.
            setTimeout(function () {
                _this3.setState({
                    title: {
                        text: list.title,
                        position: POSITION_CENTER,
                        transition: 'transform ' + duration / 2 + 'ms ease-in-out'
                    }
                });
            }, 0);
        }
    }, {
        key: 'onPreviousHandler',
        value: function onPreviousHandler() {
            // Don't do anything if we are at the root
            var isRoot = !this.state.path.length;

            if (isRoot) {
                return;
            }

            // Navigate to the parent of the current list
            this.navigate(-1);
        }
    }, {
        key: 'onNextHandler',
        value: function onNextHandler(index) {
            // Navigate to the list at the given index of the current list.
            this.navigate(index);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _state3 = this.state,
                title = _state3.title,
                panels = _state3.panels,
                path = _state3.path;
            var _props = this.props,
                className = _props.className,
                header = _props.header;

            var previousActionProps = {
                onClick: this.onPreviousHandler
            };

            var classes = (0, _classnames2.default)('pw-nested-navigation c-nested-navigation', className);
            var headerClassName = (0, _classnames2.default)('pw-nested-navigation__header c-nested-navigation__header', {
                'pw--is-root c--is-root': !path.length
            });
            var prevActionClass = (0, _classnames2.default)('pw-nested-navigation__prev-action c-nested-navigation__prev-action', {
                'pw--is-root c--is-root': !path.length
            });
            var titleContentClass = 'pw-nested-navigation__title-content c-nested-navigation__title-content pw--' + title.position + ' c--' + title.position;

            return _react2.default.createElement(
                'div',
                { className: classes },
                header && _react2.default.createElement(
                    'div',
                    { className: headerClassName },
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-nested-navigation__actions c-nested-navigation__actions' },
                        _react2.default.createElement(
                            'div',
                            { className: prevActionClass },
                            header.previousAction ? _react2.default.cloneElement(header.previousAction, previousActionProps) : _react2.default.createElement(
                                _button2.default,
                                previousActionProps,
                                'Back'
                            )
                        ),
                        header.startActions && header.startActions.map(function (action, index) {
                            return _react2.default.createElement(
                                'div',
                                {
                                    className: 'pw-nested-navigation__action c-nested-navigation__action',
                                    key: index
                                },
                                action
                            );
                        })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-nested-navigation__title c-nested-navigation__title' },
                        _react2.default.createElement(
                            'div',
                            {
                                className: titleContentClass,
                                onTransitionEnd: this.updateTitle,
                                style: (0, _static2.default)({
                                    transition: title.transition
                                })
                            },
                            title.text
                        )
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-nested-navigation__actions c-nested-navigation__actions' },
                        header.endActions && header.endActions.map(function (action, index) {
                            return _react2.default.createElement(
                                'div',
                                {
                                    className: 'pw-nested-navigation__action c-nested-navigation__action',
                                    key: index
                                },
                                action
                            );
                        })
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'pw-nested-navigation__container c-nested-navigation__container' },
                    panels.map(function (panel, index) {
                        return _react2.default.createElement(
                            'div',
                            {
                                className: 'pw-nested-navigation__panel c-nested-navigation__panel pw--' + panel.position + ' c--' + panel.position,
                                key: index,
                                style: (0, _static2.default)({ transition: panel.transition })
                            },
                            _this4.buildList(panel.path)
                        );
                    })
                )
            );
        }
    }]);
    return NestedNavigation;
}(_react2.default.Component);

NestedNavigation.propTypes = {
    /**
     * Data is the nested navigation json
     */
    data: _propTypes2.default.object.isRequired,
    /**
     * The CSS class/classes to be applied to the root element
     */
    className: _propTypes2.default.string,
    /**
     * The component to render for each item.
     * By default, ListTiles will be rendered
     */
    component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
    /**
     * Number in milliseconds for the slide animation
     */
    duration: _propTypes2.default.number,
    /**
     * The header configuration for this component.
     * Options include previousAction (element), startActions (element array) and
     * endActions (element array)
     */
    header: _propTypes2.default.shape({
        previousAction: _propTypes2.default.element,
        startActions: _propTypes2.default.arrayOf(_propTypes2.default.element),
        endActions: _propTypes2.default.arrayOf(_propTypes2.default.element)
    })
};

NestedNavigation.defaultProps = {
    data: {},
    duration: 250,
    header: {}
};

exports.default = NestedNavigation;