'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DefaultAsk = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('../../utils/utils');

var _withPushMessaging = require('../with-push-messaging');

var _withPushMessaging2 = _interopRequireDefault(_withPushMessaging);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _sheet = require('../sheet');

var _sheet2 = _interopRequireDefault(_sheet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Asks the visitor whether they would like to subscribe to push messaging.
 * Selecting 'Accept' will display the browser push notification permission
 * modal, at which point the visitor will have an opportunity to dismiss, block,
 * or provide permission. Providing permission will then subscribe the visitor.
 *
 * Selecting the 'Dismiss' button will dismiss the DefaultAsk for a number of
 * visits to the site (default: 3 - see `deferOnDismissal`)
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var DefaultAsk = exports.DefaultAsk = function (_React$Component) {
    (0, _inherits3.default)(DefaultAsk, _React$Component);

    function DefaultAsk(props) {
        (0, _classCallCheck3.default)(this, DefaultAsk);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DefaultAsk.__proto__ || (0, _getPrototypeOf2.default)(DefaultAsk)).call(this, props));

        _this.state = {
            // This prevents the Sheet from re-opening immediately if the visitor
            // dismisses the system ask and there's no deferOnDismissal and
            // showOnPageCount is 1
            didAccept: false
        };

        _this._dismissed = _this._dismissed.bind(_this);
        _this._accepted = _this._accepted.bind(_this);
        return _this;
    }

    (0, _createClass3.default)(DefaultAsk, [{
        key: '_dismissed',
        value: function _dismissed() {
            var _this2 = this;

            // Returned for ease of testing
            return this.props.dismissed().then(function () {
                _this2.props.onDismiss(_this2.props.channelName); // eslint-disable-line react/prop-types
            });
        }
    }, {
        key: '_accepted',
        value: function _accepted() {
            var _this3 = this;

            this.setState({
                didAccept: true
            });

            // Returned for ease of testing
            return this.props.accepted().then(function (messagingState) {
                if (!messagingState.subscribed) {
                    // Re-allow the ask to be shown in this session, but only if the
                    // visitor didn't block push notifications entirely
                    if (messagingState.canSubscribe) {
                        _this3.setState({
                            didAccept: false
                        });
                    }

                    _this3.props.onDismiss(_this3.props.channelName); // eslint-disable-line react/prop-types
                } else {
                    _this3.props.onSuccess(_this3.props.channelName); // eslint-disable-line react/prop-types
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                acceptText = _props.acceptText,
                className = _props.className,
                contentText = _props.contentText,
                dismissText = _props.dismissText,
                subscribeText = _props.subscribeText;


            var classes = (0, _classnames2.default)('pw-push-messaging__default-ask', className);

            return _react2.default.createElement(
                _sheet2.default,
                {
                    open: this.props.shouldAsk && !this.state.didAccept,
                    effect: 'slide-bottom',
                    className: classes,
                    coverage: '22%',
                    maskOpacity: 0,
                    shrinkToContent: true
                },
                _react2.default.createElement(
                    'div',
                    { className: 'pw-push-messaging__default-ask-title u-flexbox' },
                    _react2.default.createElement(_icon2.default, { name: 'alert', title: subscribeText, className: 'pw-push-messaging__default-ask-title-icon' }),
                    _react2.default.createElement(
                        'p',
                        { className: 'pw-push-messaging__default-ask-title-content u-flex u-direction-column' },
                        contentText
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'pw-push-messaging__default-ask-actions' },
                    _react2.default.createElement(
                        _button2.default,
                        { className: 'pw-push-messaging__default-ask-actions-dismiss', onClick: this._dismissed },
                        dismissText
                    ),
                    _react2.default.createElement(
                        _button2.default,
                        { className: 'pw-push-messaging__default-ask-actions-accept', onClick: this._accepted },
                        acceptText
                    )
                )
            );
        }
    }]);
    return DefaultAsk;
}(_react2.default.Component);

DefaultAsk.displayName = 'DefaultAsk';

DefaultAsk.defaultProps = {
    acceptText: 'Yes Please',
    contentText: 'Enable push notifications to receive deals! No email address required.',
    dismissText: 'No Thanks',
    subscribeText: 'Subscribe to Notifications',
    onDismiss: _utils.noop,
    onSuccess: _utils.noop
};

DefaultAsk.propTypes = {
    /**
     * PROVIDED INTERNALLY. Triggered when the visitor accepts the ask
     */
    accepted: _propTypes2.default.func.isRequired,

    /**
     * PROVIDED INTERNALLY. Triggered when the visitor dismisses the ask
     */
    dismissed: _propTypes2.default.func.isRequired,

    /**
     * PROVIDED INTERNALLY. Whether the ask should be visible to the visitor or not
     */
    shouldAsk: _propTypes2.default.bool.isRequired,

    /**
     * Text to display on the 'Accept' button
     */
    acceptText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * A custom channel name e.g. Asking the visitor to sign up for "New Deals"
     * might have a channel name of "new-deals". Typically, this should be
     * coordinated with Connection Center campaigns. Not defining this will
     * subscribe the visitor to all messages, which is the standard behavior.
     */
    // channelName: PropTypes.string, Disabled for now

    /**
     * Adds values to the `class` attribute of the root element
     */
    className: _propTypes2.default.string,

    /**
     * Text to describe what the visitor is signing up for
     */
    contentText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * Sets the number of visits to the site that need to occur before the visitor
     * will be shown this ask again (default: 3)
     *
     * Can be set to `false` to disable entirely
     */
    deferOnDismissal: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),

    /**
     * Text to display on the 'Dismiss' button
     */
    dismissText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * After how many page visits the ask should be shown (default: 3) - set to
     * `false` to display to the visitor as soon as the Messaging Client is ready
     */
    showOnPageCount: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),

    /**
     * Descriptive text for the icon shown inside the `DefaultAsk` notification
     * message.
     */
    subscribeText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

    /**
     * Triggered when the user either dismisses the ask, or chooses to dismiss or
     * block push notification permissions via the system ask
     */
    onDismiss: _propTypes2.default.func,

    /**
     * Triggered when the user provides push notification permissions via the system ask
     */
    onSuccess: _propTypes2.default.func
};

exports.default = (0, _withPushMessaging2.default)(DefaultAsk);