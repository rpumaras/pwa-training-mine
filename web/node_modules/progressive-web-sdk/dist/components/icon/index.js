'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var uuid = function () {
    var i = 0;
    return function () {
        return i++;
    };
}();

/**
 * `Icon` component renders an SVG that uses the chosen symbol from the SVG sprite present on the page.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var Icon = function (_React$PureComponent) {
    (0, _inherits3.default)(Icon, _React$PureComponent);

    function Icon(props) {
        (0, _classCallCheck3.default)(this, Icon);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Icon.__proto__ || (0, _getPrototypeOf2.default)(Icon)).call(this, props));

        _this.id = 'icon-' + uuid();
        return _this;
    }

    (0, _createClass3.default)(Icon, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                prefix = _props.prefix,
                name = _props.name,
                title = _props.title,
                size = _props.size,
                className = _props.className,
                style = _props.style;


            var a11y = title.length ? { role: 'img' } : { 'aria-hidden': 'true' };
            var sizeClass = 'pw--' + size;

            var classes = (0, _classnames2.default)('pw-icon', (0, _defineProperty3.default)({}, sizeClass, !!size), className);

            return _react2.default.createElement(
                'svg',
                (0, _extends3.default)({}, a11y, {
                    className: classes,
                    title: title,
                    'aria-labelledby': this.id,
                    style: style
                }),
                _react2.default.createElement(
                    'title',
                    { id: this.id },
                    title
                ),
                _react2.default.createElement('use', { role: 'presentation', xlinkHref: '#' + prefix + '-' + name })
            );
        }
    }]);
    return Icon;
}(_react2.default.PureComponent);

Icon.defaultProps = {
    name: '',
    title: '',
    prefix: 'pw',
    style: {}
};

Icon.propTypes = {
    /**
     * Identifier for the desired icon. Usually the filename, sans its prefix.
     * For example, if the target icon is `pw-chevron-up.svg`, the name
     * is `chevron-up`.
     */
    name: _propTypes2.default.string.isRequired,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * The prefix is the first part of the icon name/id. If you're using a
     * different icon set, the prefix may need to be modified.
     */
    prefix: _propTypes2.default.string,

    /**
     * The size of the icon, controlled by CSS.
     */
    size: _propTypes2.default.string,

    /**
     * Custom `style` attribute.
     */
    style: _propTypes2.default.object,

    /**
     * **Beware** that ommitting a `title` will leave the icon **invisible** to
     * screen readers. If included, screen readers will read and treat the
     * icon like an image with alt text.
     */
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node])
};

exports.default = Icon;