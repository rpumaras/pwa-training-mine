'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reduxForm = require('redux-form');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _field = require('../field');

var _field2 = _interopRequireDefault(_field);

var _fieldSet = require('../field-set');

var _fieldSet2 = _interopRequireDefault(_fieldSet);

var _fieldRow = require('../field-row');

var _fieldRow2 = _interopRequireDefault(_fieldRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-use-before-define */
var buildFormFields = function buildFormFields(items) {
    // TODO: What did we decide to do about generating id's?
    return items.map(function (formItem, idx) {
        var buildField = fieldBuilderMap[formItem.type];
        if (buildField === undefined) {
            throw new Error('Invalid field type "' + formItem.type + '", expected one of "' + (0, _keys2.default)(fieldBuilderMap).join(', ') + '"');
        }
        return buildField({
            props: formItem.props,
            children: formItem.children,
            id: idx
        });
    });
};
/* eslint-enable no-use-before-define */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var buildFieldSet = function buildFieldSet(options) {
    return _react2.default.createElement(
        _fieldSet2.default,
        (0, _extends3.default)({}, options.props, { key: options.id }),
        buildFormFields(options.children)
    );
};

var buildFieldRow = function buildFieldRow(options) {
    return _react2.default.createElement(
        _fieldRow2.default,
        (0, _extends3.default)({}, options.props, { key: options.id }),
        buildFormFields(options.children)
    );
};

var buildReduxFormField = function buildReduxFormField(options) {
    return _react2.default.createElement(
        _reduxForm.Field,
        (0, _extends3.default)({
            key: options.id,
            name: options.props.name,
            label: options.props.label,
            component: _field2.default
        }, options.props),
        _react2.default.createElement('input', (0, _extends3.default)({ type: options.props.type }, options.props))
    );
};

var buildField = function buildField(options) {
    return _react2.default.createElement(
        _field2.default,
        (0, _extends3.default)({}, options.props, { key: options.id }),
        _react2.default.createElement('input', (0, _extends3.default)({ type: options.props.type }, options.props))
    );
};

var fieldBuilderMap = {
    fieldSet: buildFieldSet,
    fieldRow: buildFieldRow,
    field: buildField,
    reduxFormField: buildReduxFormField

    /**
     * <strong style="color:red; font-size:20px;">Deprecated.</strong>
     * Instead use [`Field`](#!/Field), [`FieldRow`](#!/FieldRow), and [`FieldSet`](#!/FieldSet).
     *
     * `FormFields` automatically renders fields for a form given a JSON config
     *  that describes the form's structure. The rendered fields can optionally be
     *  configured to be compatible with `redux-form`.
     */
};var FormFields = function FormFields(props) {
    var className = props.className,
        items = props.items;


    var classes = (0, _classnames2.default)('pw-form-fields c-form-fields', className);
    var fields = buildFormFields(items);

    return _react2.default.createElement(
        'div',
        { className: classes },
        fields
    );
};

FormFields.propTypes = {
    /**
     * An array describing the FormFields. The array contains objects of the form:
     * ```
     * { type: 'theType', ...additionalProperties }
     * ```
     * The types, and their additional properties are:
     *
     * **fieldSet**: children, props (optional)
     *
     * **fieldRow**: children, props (optional)
     *
     * **field**: props.type, ...props
     *
     * **reduxFormField**: props.name, props.label, props.type, ...props
     */
    items: _propTypes2.default.array.isRequired,

    /**
     * Extra class names to apply to the wrapping div of the FormFields
     */
    className: _propTypes2.default.string
};

exports.default = FormFields;