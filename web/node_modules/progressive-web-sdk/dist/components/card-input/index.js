'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cardUtils = require('../../card-utils');

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _reactInputMask = require('react-input-mask');

var _reactInputMask2 = _interopRequireDefault(_reactInputMask);

var _dataObjects = require('../../analytics/data-objects/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getMask = function getMask(cardFormat, value) {
    // Get number length because certain credit card types have specific
    // patterns for different number lengths
    var valueCount = value.length;
    var formatPattern = cardFormat[valueCount] ? cardFormat[valueCount] : cardFormat.default;

    var mask = '';
    formatPattern.forEach(function (chunk) {
        mask += '9'.repeat(chunk) + ' ';
    });

    return mask.trim();
};

/**
 * An input field to capture credit card numbers. Formats the card number
 * as it is displayed on a user's card and detects the card issuer.
 * Note that `onChange` and `onBlur` are called with the changed *value*
 * not an event. This is compatible with redux-form and allows the stored
 * value to differ from the displayed one.
 *
 * @example ./DESIGN.md
 */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var CardInput = function CardInput(props) {
    var value = props.value,
        onChange = props.onChange,
        onBlur = props.onBlur,
        className = props.className,
        ccType = props.ccType,
        placeholder = props.placeholder,
        defaultValue = props.defaultValue,
        maskChar = props.maskChar;


    var cardData = (0, _cardUtils.getCardData)(value);
    var cardType = cardData.cardType;
    var cardFormat = cardData.format;
    var mask = getMask(cardFormat, value);
    var iconName = ccType ? ccType.toLowerCase().replace(/ /g, '-') : cardType.toLowerCase().replace(/ /g, '-');

    var classes = (0, _classnames2.default)('pw-card-input', className);
    var iconClasses = (0, _classnames2.default)('pw-card-input__card-icon', 'pw-card-input__card-icon--' + iconName);

    return _react2.default.createElement(
        'div',
        { className: classes },
        _react2.default.createElement(_reactInputMask2.default, {
            type: 'tel',
            onChange: (0, _cardUtils.toStoreValueDecorator)(onChange, cardFormat),
            onBlur: (0, _cardUtils.toStoreValueDecorator)(onBlur, cardFormat),
            mask: mask,
            maskChar: maskChar,
            placeholder: placeholder,
            defaultValue: defaultValue,
            'data-analytics-name': _dataObjects.UI_NAME.cardNumber
        }),
        _react2.default.createElement(_icon2.default, {
            className: iconClasses,
            name: 'cc-' + iconName,
            title: ccType ? ccType : cardType
        })
    );
};

CardInput.registerCustomFormat = _cardUtils.registerCardDataMap;

CardInput.defaultProps = {
    maskChar: null
};

CardInput.propTypes = {
    /**
     * Type of credit card that is not detected by card number.
     */
    ccType: _propTypes2.default.string,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: _propTypes2.default.string,

    /**
     * Adds a default value to input
     */
    defaultValue: _propTypes2.default.string,

    /**
     * Character to cover unfilled parts of the mask. Default is `null`,unfilled
     * parts will be empty as in ordinary input.
     */
    maskChar: _propTypes2.default.string,

    /**
     * Adds a placeholder.
     */
    placeholder: _propTypes2.default.string,

    /**
     * PROVIDED INTERNALLY: The value of the field (passed in by redux-form).
     */
    value: _propTypes2.default.string,

    /**
     * PROVIDED INTERNALLY: OnBlur callback with signature `(eventOrValue) => undefined`
     * (passed in by redux-form).
     */
    onBlur: _propTypes2.default.func,

    /**
     * PROVIDED INTERNALLY: OnChange callback with signature `(eventOrValue) => undefined`
     * (passed in by redux-form).
     */
    onChange: _propTypes2.default.func
};

exports.default = CardInput;