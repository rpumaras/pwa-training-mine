'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _navSlider = require('../nav-slider');

var _navSlider2 = _interopRequireDefault(_navSlider);

var _nav = require('../nav');

var _nav2 = _interopRequireDefault(_nav);

var _navItem = require('../nav-item');

var _navItem2 = _interopRequireDefault(_navItem);

var _nonExpandedItems = require('./non-expanded-items');

var _nonExpandedItems2 = _interopRequireDefault(_nonExpandedItems);

var _TransitionGroup = require('react-transition-group/TransitionGroup');

var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Related components:
 *
 * * [Nav](#!/Nav)
 * * [NavHeader](#!/NavHeader)
 * * [NavItem](#!/NavItem)
 * * [NavMenu](#!/NavMenu)
 * * [NavSlider](#!/NavSlider)
 *
 * `NavMenu` is responsible for rendering the pages of `NavItem`s as a user
 * traverses the navigation tree (see the [`Nav` component's](#!/Nav) `root`
 * prop).
 *
 * For example, the `NavMenu` could render all of the root level
 * items from which the user could click through into a second level of items,
 * at which point the `NavMenu` would animated out the previous level then
 * animate in the next level.
 *
 * `NavMenu` cannot be used by itself. It must be inserted into a `Nav`
 * component.
 *
 * @example ./DESIGN.md
 */

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var NavMenu = function (_React$Component) {
    (0, _inherits3.default)(NavMenu, _React$Component);

    function NavMenu(props) {
        (0, _classCallCheck3.default)(this, NavMenu);

        var _this = (0, _possibleConstructorReturn3.default)(this, (NavMenu.__proto__ || (0, _getPrototypeOf2.default)(NavMenu)).call(this, props));

        _this.state = {
            rerenderNonExpandedItems: false
        };
        return _this;
    }

    (0, _createClass3.default)(NavMenu, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                itemFactory = _props.itemFactory,
                animationProperties = _props.animationProperties,
                getRealPath = _props.getRealPath,
                prerender = _props.prerender;
            var _context = this.context,
                selected = _context.selected,
                expanded = _context.expanded,
                expandedPath = _context.expandedPath,
                goToPath = _context.goToPath,
                root = _context.root;

            var classes = (0, _classnames2.default)('pw-nav-menu', className);
            var sliderClasses = (0, _classnames2.default)('pw-nav-menu__slider', (0, _defineProperty3.default)({
                'pw--has-custom-menu-animation': (0, _keys2.default)(animationProperties).length > 0
            }, animationProperties.className, animationProperties.className));

            return _react2.default.createElement(
                _TransitionGroup2.default,
                { component: 'div', className: classes },
                _react2.default.createElement(
                    _navSlider2.default,
                    (0, _extends3.default)({}, animationProperties, {
                        className: sliderClasses,
                        key: expandedPath,
                        onEnterComplete: function onEnterComplete() {
                            requestAnimationFrame(function () {
                                _this2.setState({ rerenderNonExpandedItems: true });
                            });
                        }
                    }),
                    _react2.default.createElement(
                        'div',
                        { className: 'pw-nav-menu__panel' },
                        (expanded.children || []).map(function (child, idx) {
                            var props = {
                                key: idx,
                                navigate: goToPath.bind(undefined, child.path),
                                selected: child === selected,
                                hasChild: (child.children || []).length > 0,
                                title: child.title,
                                path: child.path,
                                options: child.options
                            };
                            return itemFactory(child.type, props);
                        })
                    )
                ),
                prerender && _react2.default.createElement(_nonExpandedItems2.default, {
                    allowRerender: this.state.rerenderNonExpandedItems,
                    root: root,
                    expanded: expanded,
                    getRealPath: getRealPath,
                    onRenderComplete: function onRenderComplete() {
                        _this2.setState({ rerenderNonExpandedItems: false });
                    }
                })
            );
        }
    }]);
    return NavMenu;
}(_react2.default.Component);

var defaultItemFactory = function defaultItemFactory(type, props) {
    return _react2.default.createElement(_navItem2.default, props);
};

NavMenu.contextTypes = _nav2.default.childContextTypes;

NavMenu.defaultProps = {
    itemFactory: defaultItemFactory,
    animationProperties: {},
    getRealPath: function getRealPath(path) {
        return path;
    },
    prerender: true
};

NavMenu.propTypes = {
    /**
     * Animation properties for customizing the NavMenu's animation.
     * These properties are passed down to the internal NavSlider
     * component as props.
     */
    animationProperties: _propTypes2.default.shape({
        /**
         * Adds values to the `class` attribute to the
         * internal NavSlider.
         */
        className: _propTypes2.default.string,
        /**
         * Duration of the animation in milliseconds.
         */
        duration: _propTypes2.default.number,
        /**
         * Easing function for the animation.
         */
        easing: _propTypes2.default.string,
        /**
         * Id given to the internal NavSlider.
         */
        id: _propTypes2.default.string
    }),

    /**
     * Extra classes for the element.
     */
    className: _propTypes2.default.string,

    /**
     * This function will be passed the path of an item in the navigation
     * It should return the appropriate URL for that path
     * This was included to work around the issue where the Navigation requires unique paths
     * And uses the number of /s in the path to infer which direction to slide when animating
     */
    getRealPath: _propTypes2.default.func,

    /**
     * Factory function to render menu items for display.
     */
    itemFactory: _propTypes2.default.func,

    /**
     * Determines if the NavMenu should also render parts of the nav
     * that aren't currently expanded
     * This can be helpful for SEO, as it allows all links
     * in the Navigation to be present in the DOM
     */
    prerender: _propTypes2.default.bool
};

exports.default = NavMenu;