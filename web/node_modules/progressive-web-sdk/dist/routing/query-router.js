'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.QueryRoute = exports.QueryRouter = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var QueryRouter = function (_Route) {
    (0, _inherits3.default)(QueryRouter, _Route);

    function QueryRouter() {
        (0, _classCallCheck3.default)(this, QueryRouter);
        return (0, _possibleConstructorReturn3.default)(this, (QueryRouter.__proto__ || (0, _getPrototypeOf2.default)(QueryRouter)).apply(this, arguments));
    }

    return QueryRouter;
}(_reactRouter.Route); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var QueryRoute = function QueryRoute() {
    (0, _classCallCheck3.default)(this, QueryRoute);
};

// This is a major hack to work around the limitations of
// react-router@3. Since the Route components are not rendered, we
// hijack the dynamic routing capability of the Router itself by
// providing our own `default` implementation of the `getComponent`
// prop. I believe that react-router@4 will let us do this better, but
// it completely revises the full API and will cause breaking changes
// to projects.

QueryRouter.defaultProps = {
    getComponent: function getComponent(nextState, cb) {
        var search = _queryString2.default.parse(nextState.location.search);

        var matchedRoute = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = (0, _getIterator3.default)(this.childRoutes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var childRoute = _step.value;
                var param = childRoute.param,
                    value = childRoute.value;

                if (typeof value === 'undefined' && param in search || typeof value !== 'undefined' && search[param] === value) {
                    matchedRoute = childRoute;
                    break;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        matchedRoute.onEnter && matchedRoute.onEnter();

        // We need to copy the component from the child route into this component
        // As we reference it directly within the app container and template.jsx
        this.component = matchedRoute.component || this.defaultComponent;
        this.routeName = matchedRoute.routeName || this.defaultRouteName;

        cb(null, this.component);
    }
};

QueryRouter.propTypes = {
    defaultComponent: _propTypes2.default.func.isRequired,
    defaultRouteName: _propTypes2.default.string.isRequired
};

QueryRoute.propTypes = {
    routeName: _propTypes2.default.string.isRequired
};

exports.QueryRouter = QueryRouter;
exports.QueryRoute = QueryRoute;

// EXAMPLE USAGE IN <Router>
// <QueryRouter path="details" defaultComponent={ErrorPage} defaultRouteName="error">
//     <QueryRoute param="account" component={Account} routeName="account" />
//     <QueryRoute param="category" value="contact" component={ContactInfo} routeName="contactInfo" />
//     <QueryRoute param="category" value="purchases" component={PurchaseDetails} routeName="purchaseDetails" />
// </QueryRouter>