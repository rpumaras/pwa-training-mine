'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOfflinePageViews = exports.getOfflineModeStartTime = exports.hasFetchedCurrentPath = exports.getFetchedPages = exports.getPageFetchError = exports.getOffline = undefined;

var _reselectImmutableHelpers = require('reselect-immutable-helpers');

var _selectors = require('../app/selectors');

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var getOffline = exports.getOffline = function getOffline(_ref) {
  var offline = _ref.offline;
  return offline;
};

// This will need to become more complicated when we handle more types
// of errors, but will do for now
var getPageFetchError = exports.getPageFetchError = (0, _reselectImmutableHelpers.createGetSelector)(getOffline, 'fetchError');
var getFetchedPages = exports.getFetchedPages = (0, _reselectImmutableHelpers.createGetSelector)(getOffline, 'fetchedPages');

var hasFetchedCurrentPath = exports.hasFetchedCurrentPath = (0, _reselectImmutableHelpers.createHasSelector)(getFetchedPages, _selectors.getCurrentPathKey);

var getOfflineModeStartTime = exports.getOfflineModeStartTime = (0, _reselectImmutableHelpers.createGetSelector)(getOffline, 'startTime');

var getOfflinePageViews = exports.getOfflinePageViews = (0, _reselectImmutableHelpers.createGetSelector)(getOffline, 'offlinePageViews');