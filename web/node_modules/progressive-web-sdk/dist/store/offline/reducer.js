'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initialState = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _handleActions; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var _reduxActions = require('redux-actions');

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reducerUtils = require('../../utils/reducer-utils');

var _utils = require('../../utils/utils');

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialState = exports.initialState = _immutable2.default.fromJS({
    fetchError: null,
    fetchedPages: _immutable2.default.Set(),
    offlinePageViews: _immutable2.default.List()
});

exports.default = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, _actions.setPageFetchError, _reducerUtils.mergePayload), (0, _defineProperty3.default)(_handleActions, _actions.clearPageFetchError, function (state) {
    return state.set('fetchError', null);
}), (0, _defineProperty3.default)(_handleActions, _actions.setFetchedPage, function (state, _ref) {
    var url = _ref.payload.url;
    return state.update('fetchedPages', function (fetchedPages) {
        return fetchedPages.add((0, _utils.urlToPathKey)(url));
    });
}), (0, _defineProperty3.default)(_handleActions, _actions.setOfflineModeStartTime, _reducerUtils.mergePayload), (0, _defineProperty3.default)(_handleActions, _actions.clearOfflineModeStartTime, function (state) {
    return state.delete('startTime');
}), (0, _defineProperty3.default)(_handleActions, _actions.clearOfflinePages, function (state) {
    return state.set('offlinePageViews', initialState.get('offlinePageViews'));
}), (0, _defineProperty3.default)(_handleActions, _actions.trackOfflinePage, function (state, _ref2) {
    var _ref2$payload = _ref2.payload,
        url = _ref2$payload.url,
        routeName = _ref2$payload.routeName,
        title = _ref2$payload.title;

    var inCache = state.get('fetchedPages').filter(function (fetchedURL) {
        return fetchedURL === (0, _utils.urlToPathKey)(url);
    }).size > 0;
    return state.update('offlinePageViews', function (offlinePageViews) {
        return offlinePageViews.push({ url: url, routeName: routeName, title: title, inCache: inCache });
    });
}), _handleActions), initialState);