'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _storeEngine = require('store/src/store-engine');

var _storeEngine2 = _interopRequireDefault(_storeEngine);

var _localStorage = require('store/storages/localStorage');

var _localStorage2 = _interopRequireDefault(_localStorage);

var _memoryStorage = require('store/storages/memoryStorage');

var _memoryStorage2 = _interopRequireDefault(_memoryStorage);

var _expire = require('store/plugins/expire');

var _expire2 = _interopRequireDefault(_expire);

var _logger = require('../../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Fallback for crazy environments like Safari Incognito
var logger = new _logger2.default('[Messaging UI]'); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Thin wrapper around store.js module that wraps local storage access
 *
 * @url https://github.com/marcuswestin/store.js/
 */


var _storageInstance = void 0;
/**
 * Create StoreJS instance with the provided optional namespace
 *
 * @param {string} [namespace] - prefix key name with provided string value
 */
var PushMessagingStore = function PushMessagingStore(namespace) {
    this.namespace = namespace ? namespace + '-' : '';

    this.store = _storageInstance || (_storageInstance = _storeEngine2.default.createStore([_localStorage2.default, _memoryStorage2.default], [_expire2.default]));

    logger.log('Storage wrapper created', this.namespace ? 'with namespace: ' + namespace : '');
    return this;
};

/**
 * Sets a key in local storage
 *
 * @param {string} key
 * @param {*} value
 * @param {number} [expiry] - expiration of key *in seconds* after current time
 * @returns {*} value
 */
PushMessagingStore.prototype.set = function (key, value, expiry) {
    key = '' + this.namespace + key;
    var expires = void 0;

    if (expiry) {
        expires = new Date().getTime() + expiry * 1000;
    }

    logger.log('Set ' + key + ' to:', value);
    return this.store.set(key, value, expires);
};

/**
 * Gets a get from local storage
 *
 * @param {string} key
 * @returns {*} the value of whatever is stored under `key`
 */
PushMessagingStore.prototype.get = function (key) {
    key = '' + this.namespace + key;
    var value = this.store.get(key);

    if (value) {
        logger.log('Got ' + key + ' with value:', value);
        return value;
    } else {
        return null;
    }
};

exports.default = PushMessagingStore;