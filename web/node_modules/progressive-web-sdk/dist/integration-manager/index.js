'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reducer = exports.commands = exports.registerConnectorExtension = exports.registerConnector = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _commands = require('./commands');

var commands = _interopRequireWildcard(_commands);

var _reducer = require('./reducer');

var reducer = _interopRequireWildcard(_reducer);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var registeredConnector = {}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var mergeCommands = function mergeCommands() {
    var registeredConnector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var extension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // Merge into a new object as the commands properties are created with
    // `Object.defineProperty` thanks to babel and can't be overridden.
    return (0, _lodash2.default)({}, registeredConnector.commands, (0, _extends3.default)({}, extension.commandOverrides, {
        custom: extension.commands
    }));
};

var registerConnector = exports.registerConnector = function registerConnector() {
    var connector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var extension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    registeredConnector = connector;
    if (extension) {
        registeredConnector.commands = mergeCommands(registeredConnector, extension);
    }
    if (registeredConnector.commands.custom) {
        commands.registerCustom(registeredConnector.commands.custom);
    }
    commands.register(registeredConnector.commands);
    reducer.register(registeredConnector.reducer);
};

var registerConnectorExtension = exports.registerConnectorExtension = function registerConnectorExtension(extension) {
    console.warn('registerConnectorExtension has been deprecated.\n        See https://docs.mobify.com/progressive-web/latest/guides/integration-manager/extending-a-connector/#section-register-extension\n        for details on how extensions should be registered.');
    registeredConnector.commands = mergeCommands(registeredConnector, extension);

    commands.register(registeredConnector.commands);
    commands.registerCustom(registeredConnector.commands.custom);
};

// this isn't necessary, just useful
exports.commands = commands;
exports.reducer = reducer;