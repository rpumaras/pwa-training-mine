'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _swToolbox = require('sw-toolbox');

var _swToolbox2 = _interopRequireDefault(_swToolbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var version = '0.2.2'; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-env worker, serviceworker */

var worker = function worker(_ref) {
    var offlinePaths = _ref.offlinePaths,
        _ref$precacheUrls = _ref.precacheUrls,
        precacheUrls = _ref$precacheUrls === undefined ? [] : _ref$precacheUrls,
        slug = _ref.slug,
        isDebug = _ref.isDebug;

    if (!slug) {
        throw new Error('Slug must be provided to worker!');
    }

    var cachebreaker = /b=([^&]+)/.exec(self.location.search)[1];

    var baseCacheName = slug + '-v' + version;
    _swToolbox2.default.options.cache.name = baseCacheName;
    _swToolbox2.default.options.cache.maxAgeSeconds = 86400;
    _swToolbox2.default.options.debug = isDebug;

    // No cache maintenance options here on purpose, this is a permanent cache
    var bundleCache = {
        name: baseCacheName + '-bundle-' + cachebreaker
    };

    var imageCache = {
        name: baseCacheName + '-images',
        maxEntries: 40
    };

    var cacheNames = [baseCacheName, bundleCache.name, imageCache.name];

    _swToolbox2.default.precache(precacheUrls);

    // Lifecycle Handlers

    self.addEventListener('install', function (e) {
        e.waitUntil(self.skipWaiting().then(function () {
            return console.log('[ServiceWorker] Installed version', version);
        }));
    });

    self.addEventListener('activate', function (e) {
        e.waitUntil(self.clients.claim().then(function () {
            return caches.keys();
        }).then(function (cacheKeys) {
            return cacheKeys.filter(function (key) {
                return cacheNames.indexOf(key) === -1 && !key.endsWith('$$$inactive$$$') &&
                // Do not delete any messaging-caches
                !key.startsWith('messaging-cache');
            });
        }).then(function (keysToDelete) {
            return keysToDelete.map(function (key) {
                return caches.delete(key);
            });
        }).then(function (promises) {
            return _promise2.default.all(promises);
        }));
    });

    var noCacheJSONResponse = function noCacheJSONResponse(json) {
        return new Response(new Blob([(0, _stringify2.default)(json)], { type: 'application/json' }), {
            status: 200,
            statusText: 'OK',
            headers: new Headers({
                'Cache-Control': 'no-cache, no-store, must-revalidate'
            })
        });
    };

    // App makes this asset request on each page fetch, expecting to see empty JSON
    // if network supplies successful response.
    // In the case of failure, we modify response to be `{offline: true}` which
    // indicates to app that we are offline.
    var checkIfOffline = function checkIfOffline(request) {
        return fetch(new Request(request, { cache: 'no-store' })).catch(function () {
            return noCacheJSONResponse({ offline: true });
        });
    };

    // For enabling offline detection within the application
    _swToolbox2.default.router.get(/online\.mobify\.net\/offline\.json/, checkIfOffline);

    // Path Handlers

    // Bundle contents
    _swToolbox2.default.router.get(/cdn\.mobify\.com\/.*\?[a-f\d]+$/, _swToolbox2.default.cacheFirst, { cache: bundleCache });
    _swToolbox2.default.router.get(/localhost:8443.*\?[a-f\d]+$/, _swToolbox2.default.networkFirst, { cache: bundleCache });
    // Keep the preview response around for offline in preview mode
    _swToolbox2.default.router.get(/https:\/\/preview.mobify.com\/v7/, _swToolbox2.default.networkFirst, { cache: bundleCache });

    // Cache data from the Mobify CDN (localhost in testing)
    // This includes the loader and the Capturing script.
    _swToolbox2.default.router.get(/cdn\.mobify\.com|localhost:8443/, _swToolbox2.default.networkFirst, { cache: bundleCache });

    // Google fonts
    _swToolbox2.default.router.get(/fonts\.gstatic\.com\/.*\.woff2$/, _swToolbox2.default.cacheFirst, { cache: bundleCache });
    _swToolbox2.default.router.get(/fonts\.googleapis\.com\/css/, _swToolbox2.default.networkFirst, { cache: bundleCache });

    // Typekit fonts
    _swToolbox2.default.router.get(/use\.typekit\.net\/[a-z0-9]+\.js/, _swToolbox2.default.networkFirst, { cache: bundleCache });
    _swToolbox2.default.router.get(/use\.typekit\.net\/.*\//, _swToolbox2.default.cacheFirst, { cache: bundleCache });

    // Main page is needed for installed app when offline
    _swToolbox2.default.router.get('/', _swToolbox2.default.networkFirst, { cache: bundleCache });

    (offlinePaths || []).forEach(function (path) {
        _swToolbox2.default.router.get(new RegExp(path), _swToolbox2.default.networkFirst, { cache: bundleCache });
    });

    // Image cache
    _swToolbox2.default.router.get(/\.(?:png|gif|svg|jpe?g)(?:\?|$)/i, _swToolbox2.default.fastest, { cache: imageCache });

    _swToolbox2.default.router.default = _swToolbox2.default.networkFirst;

    // Return an object with the toolbox module in it, so that other
    // worker components can extend it.
    return {
        baseCacheName: baseCacheName,
        cachebreaker: cachebreaker,
        isDebug: isDebug,
        toolbox: _swToolbox2.default
    };
};

exports.default = worker;