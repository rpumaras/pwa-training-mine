'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports._clickHandler = exports._hideFrame = exports._showFrame = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _maxSafeInteger = require('babel-runtime/core-js/number/max-safe-integer');

var _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);

var _logger = require('../../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

var _assetUtils = require('../../asset-utils');

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

var _messagingState = require('../../utils/messaging-state');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var _instance = void 0;

// Exported for testing
var _showFrame = exports._showFrame = function _showFrame(frame) {
    frame.style.transform = '';
};

// Exported for testing
var _hideFrame = exports._hideFrame = function _hideFrame(frame) {
    frame.style.transform = 'translateY(100%)';
};

// Exported for testing
var _clickHandler = exports._clickHandler = function _clickHandler(event) {
    var _this = this;

    var targetId = event.target.id;

    switch (targetId) {
        case _constants2.default.BUTTON_DENY_ID:
            {
                _hideFrame(this.frame);
                (0, _messagingState.startVisitCountdown)(this.config.deferOnDismissal, this.config.channelName);
                break;
            }

        case _constants2.default.BUTTON_ALLOW_ID:
            {
                _hideFrame(this.frame);
                window.Mobify.WebPush.PWAClient.subscribe().then(function (state) {
                    var message = void 0;

                    if (state.subscribed) {
                        message = 'Subscribed ' + (_this.config.channelName ? 'to channel ' + _this.config.channelName : /* istanbul ignore next */'');
                    } else if (!state.canSubscribe) {
                        message = 'Permissions blocked by user; can no longer subscribe.';
                    } else {
                        // The user dismissed the system-ask - back-off from asking again
                        (0, _messagingState.startVisitCountdown)(_this.config.deferOnDismissal, _this.config.channelName);
                        message = 'System ask was dismissed';
                    }

                    _this.logger.log('[Messaging UI]', message);

                    return state;
                });
                break;
            }
    }
};

var AskFrame = function AskFrame(configuration) {
    var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

    if (_instance) {
        return _instance;
    }

    (0, _messagingState.initStorage)();

    this.config = configuration;
    this.doc = doc;
    this.logger = new _logger2.default('[Messaging UI]');

    _instance = this;

    return _instance;
};

AskFrame.prototype.show = function () {
    var _this2 = this;

    // Say that we showed a channel offer - it's okay for config.channel to be
    // undefined - Messaging Client will construe that as broadcast
    window.Mobify.WebPush.PWAClient.channelOfferShown();

    setTimeout(function () {
        _this2.logger.log('Showing ask dialog');
        _showFrame(_this2.frame);
    });

    return this;
};

AskFrame.prototype.setupListeners = function (clickHandler) {
    // Can provide clickHandler for testing purposes
    clickHandler = clickHandler || /* istanbul ignore next */_clickHandler.bind(this);

    var buttonContainer = this.frameDoc.getElementsByClassName(_constants2.default.BUTTON_CONTAINER_CLASS)[0];
    buttonContainer.addEventListener('click', clickHandler);

    return this;
};

AskFrame.prototype.create = function () {
    if (this.frame) {
        return this;
    }

    this.logger.log('Creating ask dialog...');

    this.frame = this.doc.createElement('iframe');
    var parentBody = this.doc.getElementsByTagName('body')[0];

    // Create the iframe
    this.frame.src = 'about:blank';
    this.frame.id = _constants2.default.ASK_IFRAME_ID;

    var styles = {
        position: 'fixed',
        left: '0px',
        bottom: '0px',
        zIndex: _maxSafeInteger2.default,
        width: '100%',
        height: '59px',
        border: 'none',
        transition: 'transform 0.3s ease-in-out',
        transform: 'translateY(100%)'
    };

    (0, _extends3.default)(this.frame.style, styles);

    parentBody.appendChild(this.frame);

    // HTML injection
    this.frameDoc = this.frame.contentWindow.document;
    this.frameDoc.getElementsByTagName('html')[0].innerHTML = this.config.html;

    // Stylesheet injection
    var iframeStyles = this.frameDoc.createElement('link');
    iframeStyles.rel = 'stylesheet';
    iframeStyles.type = 'text/css';
    iframeStyles.href = (0, _assetUtils.getAssetUrl)(_constants2.default.ASK_CSS);
    this.frameDoc.getElementsByTagName('head')[0].appendChild(iframeStyles);

    // User-defined script injection
    var iframeScript = this.frameDoc.createElement('script');
    iframeScript.type = 'text/javascript';
    iframeScript.src = (0, _assetUtils.getAssetUrl)(_constants2.default.ASK_SCRIPT);

    this.frameDoc.getElementsByTagName('body')[0].appendChild(iframeScript);

    this.logger.log('Ask dialog created');

    return this;
};

exports.default = AskFrame;