'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initMessaging = exports.handleNotificationClick = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _askFrame = require('./ask-frame');

var _askFrame2 = _interopRequireDefault(_askFrame);

var _messaging = require('../../utils/messaging');

var _messagingState = require('../../utils/messaging-state');

var _logger = require('../../utils/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var logger = void 0;

var DEFAULT_ASK_CONFIG = {
    showOnPageCount: 3,
    deferOnDismissal: 3

    /**
     * Handles notification click events sent from the Messaging Client by directly
     * modifying window.location.href
     *
     * @param {object} event - The Event direct from the Messaging Client
     * @param {object) event.detail - Contains the `url` key from the message
     * @param {string} event.detail.url - The string that we should set href to
     */
};var handleNotificationClick = exports.handleNotificationClick = function handleNotificationClick(event) {
    var url = event.detail && event.detail.url;

    if (typeof url === 'string' && url.length > 0) {
        window.location.href = url;
    }
};

var initMessaging = exports.initMessaging = function initMessaging(configuration) {
    // Initialize the logger and bind it to shouldAsk method
    logger = new _logger2.default('[Messaging UI]');
    (0, _messagingState.initStorage)();
    var boundShouldAsk = _messaging.shouldAsk.bind(undefined, logger);

    var defaultAskConfig = (0, _extends3.default)({}, DEFAULT_ASK_CONFIG, configuration.defaultAsk);

    return window.Progressive.MessagingClientInitPromise.then(function (state) {
        logger.log('Initializing...');

        // Register with the Messaging Client for notification click events that
        // occur while the visitor is viewing the website
        window.Mobify.WebPush.PWAClient.register(handleNotificationClick, window.Mobify.WebPush.PWAClient.Events.notificationClick);

        var _updateState = (0, _messagingState.updateState)(),
            pageCount = _updateState.pageCount,
            visitCountdowns = _updateState.visitCountdowns;

        // Add more values to state that we got from the Messaging Client, for
        // use with shouldAsk method


        var currentSubscriptionState = (0, _extends3.default)({}, state, {
            showOnPageCount: defaultAskConfig.showOnPageCount,
            isSubscribed: state.subscribed,
            pageCount: pageCount,
            visitCountdowns: visitCountdowns
        });

        var askFrame = new _askFrame2.default(defaultAskConfig);

        logger.log('Init complete');

        // If the developer wants us to automatically do everything, then we
        // will carry out the logic for displaying the ask ourselves
        if (defaultAskConfig.auto === true && boundShouldAsk(currentSubscriptionState)) {
            // Create the "ask" iframe
            askFrame.create();
            askFrame.setupListeners();
            askFrame.show();
        }

        return { askFrame: askFrame, currentSubscriptionState: currentSubscriptionState };
    });
};