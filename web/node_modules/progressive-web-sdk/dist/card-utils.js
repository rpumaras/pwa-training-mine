'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toStoreValueDecorator = exports.toStoreValue = exports.toDisplayValue = exports.formatValuePattern = exports.getCardData = exports.formatValue = exports.registerCardDataMap = exports.cardDataMap = exports.expiryFormat = exports.cvvAmex = exports.cvvDefault = exports.DISCOVER = exports.INTERPAYMENT = exports.CHINA_UNIONPAY = exports.MASTERCARD = exports.DANKORT = exports.MAESTRO = exports.VISA_ELECTRON = exports.VISA = exports.JCB = exports.AMERICAN_EXPRESS = exports.DINERS_CLUB = exports.UATP = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _cardDataMap;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var PATTERN_4_4_5 = [4, 4, 5]; // 13
var PATTERN_4_6_4 = [4, 6, 4]; // 14
var PATTERN_4_5_6 = [4, 5, 6]; // 15
var PATTERN_4_6_5 = [4, 6, 5]; // 15
var PATTERN_4_4_4_4 = [4, 4, 4, 4]; // 16
var PATTERN_6_13 = [6, 13]; // 19
var PATTERN_4_4_4_4_3 = [4, 4, 4, 4, 3]; // 19
var PATTERN_2_2 = [2, 2]; // 4
var PATTERN_3 = [3]; // 3
var PATTERN_4 = [4]; // 4

var UATP = exports.UATP = 'UATP';
var DINERS_CLUB = exports.DINERS_CLUB = 'Diners Club';
var AMERICAN_EXPRESS = exports.AMERICAN_EXPRESS = 'American Express';
var JCB = exports.JCB = 'JCB';
var VISA = exports.VISA = 'Visa';
var VISA_ELECTRON = exports.VISA_ELECTRON = 'Visa Electron';
var MAESTRO = exports.MAESTRO = 'Maestro';
var DANKORT = exports.DANKORT = 'Dankort';
var MASTERCARD = exports.MASTERCARD = 'MasterCard';
var CHINA_UNIONPAY = exports.CHINA_UNIONPAY = 'China UnionPay';
var INTERPAYMENT = exports.INTERPAYMENT = 'InterPayment';
var DISCOVER = exports.DISCOVER = 'Discover';

var cvvDefault = exports.cvvDefault = {
    default: PATTERN_3,
    iconName: 'default-hint'
};

var cvvAmex = exports.cvvAmex = {
    default: PATTERN_4,
    iconName: 'amex-hint'
};

var expiryFormat = exports.expiryFormat = {
    default: PATTERN_2_2
};

var cardDataMap = exports.cardDataMap = (_cardDataMap = {}, (0, _defineProperty3.default)(_cardDataMap, UATP, {
    // IIN Ranges: 1
    match: '^1',
    format: {
        default: PATTERN_4_5_6
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, DINERS_CLUB, {
    // IIN Ranges: 300‑305, 309, 36, 38‑39
    match: '^(30[0-5]|309|3[689])',
    format: {
        default: PATTERN_4_6_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, AMERICAN_EXPRESS, {
    // IIN Ranges: 34, 37
    match: '^3[47]',
    format: {
        default: PATTERN_4_6_5
    },
    cvv: cvvAmex
}), (0, _defineProperty3.default)(_cardDataMap, JCB, {
    // IIN Ranges: 3528‑3589
    match: '^35(2[89]|[3-8][0-9])',
    format: {
        default: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, VISA, {
    // IIN Ranges: 4
    match: '^(4)',
    format: {
        default: PATTERN_4_4_4_4_3
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, VISA_ELECTRON, {
    // IIN Ranges: 4026, 417500, 4405, 4508, 4844, 4913, 4917
    match: '^(4026|417500|4405|4508|4844|491[37])',
    format: {
        default: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, MAESTRO, {
    // IIN Ranges: 500000‑509999, 560000-589999, 600000-699999
    match: '^(50[0-9]{4}|56[0-9]{4}|(5[78]|6[0-9])[0-9]{4})',
    format: {
        default: PATTERN_4_4_4_4_3,
        13: PATTERN_4_4_5,
        15: PATTERN_4_6_5
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, DANKORT, {
    // IIN Ranges: 5019
    match: '^5019',
    format: {
        default: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, MASTERCARD, {
    // IIN Ranges: 51-55
    match: '^5[1-5]',
    format: {
        default: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, CHINA_UNIONPAY, {
    // IIN Ranges: 62
    match: '^62',
    format: {
        default: PATTERN_6_13,
        16: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, INTERPAYMENT, {
    // IIN Ranges: 636
    match: '^636',
    format: {
        default: PATTERN_4_4_4_4_3
    },
    cvv: cvvDefault
}), (0, _defineProperty3.default)(_cardDataMap, DISCOVER, {
    // IIN Ranges: 6011, 622126‑622925, 644‑649, 65
    // Note: Range in 622126-622925 are dual-branded with UnionPay
    match: '^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5])|64[4-9]|65)',
    format: {
        default: PATTERN_4_4_4_4
    },
    cvv: cvvDefault
}), _cardDataMap);

// Checks if the two patterns (arrays of integer values) are equal
// Eg. patternsEqual([2, 2], [2, 2]) === true
//     patternsEqual([2, 3], [2, 2]) === false
var patternsEqual = function patternsEqual(patternA, patternB) {
    // Strict equality for fast exit
    // Note: We don't want reference quality (===) here as the pattern is
    //       passed in by the caller, yet the PATTERN_.. constants aren't
    //       exported and so we aren't guaranteed to be getting the same
    //       instance of the array.
    //       Hack solution based on https://stackoverflow.com/a/14288329/11807
    if (patternA.slice().sort().toString() === patternB.slice().sort().toString()) {
        // eslint-disable-line newline-per-chained-call
        return true;
    }

    // This condition is currently impossible to reach. Due to how
    // `formatValuePattern` (the only place this is currently used) is written.
    //
    // if (!patternA || !patternB) {
    //     return false
    // }

    return patternA.length === patternB.length && patternA.every(function (v, i) {
        return v === patternB[i];
    });
};

var registerCardDataMap = exports.registerCardDataMap = function registerCardDataMap(customCardDataMap) {
    exports.cardDataMap = cardDataMap = (0, _extends3.default)({}, cardDataMap, customCardDataMap);
};

var formatValue = exports.formatValue = function formatValue(cardNumber) {
    return cardNumber ? cardNumber.replace(/[^0-9*]/g, '') : '';
};

var getCardData = exports.getCardData = function getCardData(cardNumber) {
    var defaultCardData = {
        cardType: '',
        match: '',
        format: {
            default: PATTERN_4_4_4_4
        },
        cvv: cvvDefault

        // Strip out any non-digits
        // Eg: "4111 1111 1111 1111" -> "4111111111111111"
    };cardNumber = formatValue(cardNumber);

    var matchedCardData = void 0;

    for (var key in cardDataMap) {
        /* istanbul ignore else */
        if (cardDataMap.hasOwnProperty(key)) {
            var regex = new RegExp(cardDataMap[key].match);
            var match = cardNumber.match(regex);

            if (match) {
                matchedCardData = (0, _extends3.default)({
                    cardType: key
                }, cardDataMap[key]);
            }
        }
    }

    // If nothing matches our card data map return the default data
    return matchedCardData || defaultCardData;
};

var formatValuePattern = exports.formatValuePattern = function formatValuePattern(value) {
    var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var formattedValue = '';
    var charChunkIndex = 0;
    var currentChunk = 0;
    var chunkCountFallback = 4;
    var chunkSpacer = ' ';

    if (!pattern) {
        return '';
    }

    var maxNumberLength = pattern.reduce(function (sum, currentValue) {
        return sum + currentValue;
    }, 0);

    // Check for expiry date pattern
    if (patternsEqual(PATTERN_2_2, pattern)) {
        chunkCountFallback = 2;
        chunkSpacer = '/';
    }

    for (var i = 0; i < value.length && i < maxNumberLength; i++) {
        // 4 is a failsafe in case pattern doesn't return any chunk values
        /* istanbul ignore next */
        var chunkCount = pattern[currentChunk] || chunkCountFallback;

        formattedValue += value.charAt(i);

        // Keep track of value character index for next pattern chunk
        charChunkIndex++;

        // This means we've reached the number count in this chunk
        // so move onto the next chunk
        if (charChunkIndex === chunkCount) {
            // Add space between number chunks
            formattedValue += chunkSpacer;

            // Iterate for next pattern chunk
            currentChunk++;

            // Reset character count in chunk for next chunk
            charChunkIndex = 0;
        }
    }
    // remove '/' and space from last pattern set interaction
    return formattedValue.trim().replace(/\/$/, '');
};

/**
 * Format a card number for display
 *
 * Eg. "4111111111111111" -> "4111 1111 1111 1111"
 */
var toDisplayValue = exports.toDisplayValue = function toDisplayValue(value, format) {
    // Remove any non-digit from numbers
    value = formatValue(value);

    // Get number length because certain credit card types have specific
    // patterns for different number lengths
    var valueCount = value.length;
    var formatPattern = format[valueCount] ? format[valueCount] : format.default;

    return formatValuePattern(value, formatPattern);
};

/**
 * Format a card number for storage
 *
 * Eg. "4111 1111 1111 1111" -> "4111111111111111"
 */
var toStoreValue = exports.toStoreValue = function toStoreValue(value, format) {
    // Format number to pattern guideline before stripping out non-digits
    // https://baymard.com/checkout-usability/credit-card-patterns
    // https://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_.28IIN.29
    // Eg. "4111 1111 1111 1111 1112" -> "4111111111111111111"
    // 20 numbers will be formatted to 19 numbers for VISA as per pattern guideline
    return value && formatValue(toDisplayValue(value, format));
};

/**
 * Decorate a redux-form event handler to transform card
 * numbers for storage
 */
var toStoreValueDecorator = exports.toStoreValueDecorator = function toStoreValueDecorator(fun, format) {
    return function (event) {
        fun(toStoreValue(event.target.value, format));
    };
};