'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jqueryResponse = exports.jQueryIsLoaded = exports.capturingIsLoaded = exports.waitForCondition = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getJqueryHtml = require('./get-jquery-html');

var _getJqueryHtml2 = _interopRequireDefault(_getJqueryHtml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resolveCondition = function resolveCondition(condition, resolve, interval) {
    if (condition()) {
        resolve();
        clearInterval(interval);
    }
};

// Return a promise which resolves when the condition is met
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var waitForCondition = exports.waitForCondition = function waitForCondition(condition) {
    return new _promise2.default(function (resolve) {
        resolveCondition(condition, resolve);

        var interval = setInterval(function () {
            resolveCondition(condition, resolve, interval);
        }, 50);
    });
};

var capturingIsLoaded = exports.capturingIsLoaded = function capturingIsLoaded() {
    return typeof window.Capture !== 'undefined';
};

var jQueryIsLoaded = exports.jQueryIsLoaded = function jQueryIsLoaded() {
    var mobifyJqueryLoaded = typeof window.Progressive.$ !== 'undefined';
    var otherJqueryLoaded = typeof window.$ !== 'undefined';

    return mobifyJqueryLoaded || otherJqueryLoaded;
};

var jqueryResponse = exports.jqueryResponse = function jqueryResponse(response) {
    return response.text().then(function (responseText) {
        return _promise2.default.all([waitForCondition(capturingIsLoaded), waitForCondition(jQueryIsLoaded)]).then(function () {
            return responseText;
        });
    }).then(function (responseText) {
        var escapedText = window.Capture.disable(responseText, 'x-');
        var selectorLibrary = window.Progressive.$ || window.$;

        return [selectorLibrary, (0, _getJqueryHtml2.default)(selectorLibrary, escapedText)];
    });
};