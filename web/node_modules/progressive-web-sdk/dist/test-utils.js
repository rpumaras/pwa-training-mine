'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jquerifyHtmlFile = exports.disableHtml = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash.mapvalues');

var _lodash2 = _interopRequireDefault(_lodash);

var _getJqueryHtml = require('./get-jquery-html.js');

var _getJqueryHtml2 = _interopRequireDefault(_getJqueryHtml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Map of all attributes we should disable (to prevent resources from downloading)
var disablingMap = {
    img: ['src', 'srcset'],
    source: ['src', 'srcset'],
    iframe: ['src'],
    script: ['src', 'type'],
    link: ['href'],
    style: ['media']
}; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var attributeDisablingRes = (0, _lodash2.default)(disablingMap, function (targetAttributes) {
    return new RegExp('\\s+((?:' + targetAttributes.join('|') + ')\\s*=\\s*(?:(\'|")[\\s\\S]+?\\2))', 'gi');
});

// Inline styles and scripts are disabled using a unknown type.
var tagDisablers = {
    style: ' media="mobify-media"',
    script: ' type="text/mobify-script"'
};

var OPENING_SCRIPT_RE = /(<script[\s\S]*?>)/gi;
var SPLIT_RE = /(<!--[\s\S]*?-->)|(?=<\/script)/i;
var AFFECTED_TAG_RE = new RegExp('<(' + (0, _keys2.default)(disablingMap).join('|') + ')([\\s\\S]*?)>', 'gi');

var disableHtml = exports.disableHtml = function disableHtml(htmlStr, prefix) {
    // Disables all attributes in disablingMap by prepending prefix
    var disableAttributes = function disableAttributes(_, tagName, tail) {
        var lowercaseTagName = tagName.toLowerCase();
        var disabler = tagDisablers[lowercaseTagName] || '';
        var attributes = tail.replace(attributeDisablingRes[lowercaseTagName], ' ' + prefix + '$1');

        return '<' + lowercaseTagName + disabler + attributes + '>';
    };

    return htmlStr.split(SPLIT_RE).map(function (fragment) {
        // Fragment may be empty or just a comment, no need to escape those.
        if (!fragment) {
            return '';
        }
        if (/^<!--/.test(fragment)) {
            return fragment;
        }

        // Disable before and the <script> itself.
        // parsed = [before, <script>, script contents]
        var parsed = fragment.split(OPENING_SCRIPT_RE);
        parsed[0] = parsed[0].replace(AFFECTED_TAG_RE, disableAttributes);
        if (parsed[1]) {
            parsed[1] = parsed[1].replace(AFFECTED_TAG_RE, disableAttributes);
        }
        return parsed;
    }).reduce(function (complete, item) {
        return complete.concat(item);
    }, []).join('');
};

/*
 * Loads a given "file" and converts its content
 * into a jQuery object.
 * This is used to test parsers and follows the same
 * approach as the "jquery-response".
 */
var jquerifyHtmlFile = exports.jquerifyHtmlFile = function jquerifyHtmlFile(file) {
    var html = _fs2.default.readFileSync(file, 'utf-8');
    return (0, _getJqueryHtml2.default)(window.$, disableHtml(html, 'x-'));
};