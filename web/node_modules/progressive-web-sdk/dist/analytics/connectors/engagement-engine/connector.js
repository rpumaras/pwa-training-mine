'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _connector = require('../connector');

var _connector2 = _interopRequireDefault(_connector);

var _dataObjects = require('../../data-objects/');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var SANDY_ECOMMERCE_CATEGORY = 'ecommerce';
var SANDY_TIMING_CATEGORY = 'timing';

var createSandyPayload = function createSandyPayload(action, category, dimensions) {
    return {
        data: {
            action: action,
            category: category
        },
        dimensions: dimensions
    };
};

var createUIInteractionEvent = function createUIInteractionEvent(payload) {
    var uiInteraction = new _dataObjects.UIInteraction(payload, [], {}, false);

    return createSandyPayload('' + uiInteraction.subject + uiInteraction.action + uiInteraction.object, SANDY_TIMING_CATEGORY, {
        container_name: uiInteraction.name,
        content: uiInteraction.content
    });
};

var createShoppingListPayload = function createShoppingListPayload(action, payload) {
    var cart = new _dataObjects.ShoppingList(payload.cart, [], {}, false);
    var product = payload.product ? new _dataObjects.Product(payload.product, [], {}, false) : {};

    return createSandyPayload(action, SANDY_TIMING_CATEGORY, {
        product_name: product.name,
        product_category: product.category,
        product_id: product.id,
        cart_items: cart.count,
        value: cart.subtotal
    });
};

var consoleLogIfExist = function consoleLogIfExist(string, value) {
    if (typeof value !== 'undefined') {
        console.log('' + string + value);
    }
};

var EngagementEngine = function (_Connector) {
    (0, _inherits3.default)(EngagementEngine, _Connector);

    function EngagementEngine(options) {
        (0, _classCallCheck3.default)(this, EngagementEngine);

        var _this = (0, _possibleConstructorReturn3.default)(this, (EngagementEngine.__proto__ || (0, _getPrototypeOf2.default)(EngagementEngine)).call(this, 'üíç Engagement Engine', options));

        if (!_this.options.projectSlug) {
            throw new Error('options cannot be undefined and must have "projectSlug" property defined');
        }

        // We are leveraging off the sandy tracking pixel client loaded by loader.js in project
        if (window.sandy) {
            _this.ready();
        } else {
            console.error('Sandy instance does not exist');
        }
        return _this;
    }

    (0, _createClass3.default)(EngagementEngine, [{
        key: 'ready',
        value: function ready() {
            // Initialize Sandy
            this.sandy = window.sandy.instance;
            this.sandy.create(this.options.projectSlug, 'auto');

            // Get default tracker
            this.tracker = this.sandy.trackers[this.sandy.DEFAULT_TRACKER_NAME];

            this.tracker.set('mobify_adapted', true);
            this.tracker.set('platform', 'PWA');

            // Initial page dimension setup
            this.tracker.set({
                page: this.sandy._global.location.pathname,
                title: this.sandy._global.document.title,
                location: this.sandy._global.location.href,
                referrer: this.sandy._global.document.referrer
            });

            (0, _get3.default)(EngagementEngine.prototype.__proto__ || (0, _getPrototypeOf2.default)(EngagementEngine.prototype), 'ready', this).call(this);
        }
    }, {
        key: 'debug',
        value: function debug(eventType, payload) {
            var _console;

            var type = payload.data.action;
            var data = payload.dimensions;

            (_console = console).groupCollapsed.apply(_console, (0, _toConsumableArray3.default)(_connector2.default.debugHeading('' + this.displayName, type)));

            switch (eventType) {
                case _dataObjects.EVENT_ACTION.pageview:
                    console.log('Project ID:\t\t\t ' + this.tracker.slug);
                    console.log('Url:\t\t\t\t ' + this.tracker.get('location'));
                    console.log('Path:\t\t\t\t ' + this.tracker.get('page'));
                    console.log('Template Name:\t\t ' + this.tracker.get('templateName'));
                    console.log('Page Title:\t\t\t ' + this.tracker.get('title'));
                    console.log('Status:\t\t\t ' + this.tracker.get('status'));
                    break;
                case _dataObjects.EVENT_ACTION.purchase + '.product':
                    console.log('Transaction ID:\t\t ' + data.transaction_id);
                    console.log('Product ID:\t\t\t ' + data.product_id);
                    console.log('Product Name:\t\t ' + data.name);
                    console.log('Product Price:\t\t ' + data.price);
                    console.log('Product Quantity:\t ' + data.quantity);
                    break;
                case _dataObjects.EVENT_ACTION.addToCart:
                case _dataObjects.EVENT_ACTION.removeFromCart:
                    console.log('Cart Count:\t\t ' + data.cart_items);
                    console.log('Subtotal:\t\t ' + data.value);
                    break;
                case _dataObjects.EVENT_ACTION.addToWishlist:
                case _dataObjects.EVENT_ACTION.removeFromWishlist:
                    console.log('Wishlist Count:\t\t ' + data.cart_items);
                    break;
                case _dataObjects.EVENT_ACTION.purchase:
                    console.log('Transaction ID:\t\t ' + data.transaction_id);
                    console.log('Revenue:\t\t\t ' + data.revenue);
                    break;
                case _dataObjects.EVENT_ACTION.uiInteraction:
                    console.log('Name:\t\t\t\t ' + data.container_name);
                    consoleLogIfExist('Content:\t\t\t', data.content);
                    break;
                case _dataObjects.EVENT_ACTION.search:
                    console.log('Content:\t\t\t ' + data.content);
                    break;
                case _dataObjects.EVENT_ACTION.performance:
                    consoleLogIfExist('Page Start:\t\t\t\t', data.page_start);
                    consoleLogIfExist('Mobify Start:\t\t\t', data.mobify_start);
                    consoleLogIfExist('First Paint:\t\t\t', data.first_paint);
                    consoleLogIfExist('First Contentful Paint:\t', data.first_contentful_paint);
                    consoleLogIfExist('App Start:\t\t\t\t', data.app_start);
                    consoleLogIfExist('Page Paint:\t\t\t\t', data.page_paint);
                    consoleLogIfExist('Page Contentful Paint:\t', data.page_contentful_paint);
                    consoleLogIfExist('Page Content Load:\t\t', data.page_content_load);
                    consoleLogIfExist('Full Page Load:\t\t\t', data.full_page_load);
                    consoleLogIfExist('Time to Interactive:\t', data.time_to_interactive);
                    consoleLogIfExist('Is saved page:\t\t\t', data.is_saved_page);
                    break;
                case _dataObjects.EVENT_ACTION.offlineModeUsed:
                    consoleLogIfExist('Offline session duration:\t', data.value);
                    consoleLogIfExist('Failed Pages:\t\t\t\t', data.offlinePageFailed);
                    consoleLogIfExist('Viewed Pages:\t\t\t\t', data.offlinePageSuccess);
                    break;
                default:
                    console.log('Add relevant debugging information with regards to ' + type + ' event');
                    break;
            }
            console.groupEnd();
        }
    }, {
        key: 'performanceEvent',
        value: function performanceEvent(payload) {
            var metrics = {
                bundle: payload.bundle,
                timing_start: payload.timingStart,
                page_contentful_paint: payload.templateDidMount,
                page_content_load: payload.templateAPIEnd,
                full_page_load: payload.fullPageLoad,
                is_saved_page: payload.isSavedPage
            };

            if (payload.mobifyStart) {
                metrics = (0, _extends3.default)({
                    page_start: payload.pageStart,
                    mobify_start: payload.mobifyStart,
                    first_paint: payload.firstPaint,
                    first_contentful_paint: payload.firstContentfulPaint,
                    app_start: payload.appStart,
                    page_paint: payload.templateWillMount,
                    time_to_interactive: payload.timeToInteractive
                }, metrics);
            }

            this.send(_dataObjects.EVENT_ACTION.performance, createSandyPayload(_dataObjects.EVENT_ACTION.performance, SANDY_TIMING_CATEGORY, metrics));
        }
    }, {
        key: 'setCurrencyEvent',
        value: function setCurrencyEvent(payload) {
            this.tracker.set('currency_code', payload.currencyCode);
        }
    }, {
        key: 'setPageTemplateNameEvent',
        value: function setPageTemplateNameEvent(payload) {
            var page = new _dataObjects.Page(payload, [_dataObjects.Page.TEMPLATENAME]);
            this.tracker.set(page);
        }
    }, {
        key: 'pageviewEvent',
        value: function pageviewEvent(payload, state) {
            var page = new _dataObjects.Page(payload, [_dataObjects.Page.TEMPLATENAME], {
                path: {
                    name: 'page',
                    defaultValue: this.sandy._global.location.pathname
                },
                title: {
                    defaultValue: this.sandy._global.document.title
                },
                location: {
                    defaultValue: this.sandy._global.location.href
                }
            }, false);

            this.tracker.set(page);

            return createSandyPayload(_dataObjects.EVENT_ACTION.pageview, SANDY_TIMING_CATEGORY, payload.status ? { status: payload.status } : {});
        }
    }, {
        key: 'searchEvent',
        value: function searchEvent(payload) {
            return createSandyPayload(_dataObjects.EVENT_ACTION.search, SANDY_TIMING_CATEGORY, {
                content: payload.query
            });
        }
    }, {
        key: 'addToCartEvent',
        value: function addToCartEvent(payload) {
            return createShoppingListPayload(_dataObjects.EVENT_ACTION.addToCart, payload);
        }
    }, {
        key: 'removeFromCartEvent',
        value: function removeFromCartEvent(payload) {
            return createShoppingListPayload(_dataObjects.EVENT_ACTION.removeFromCart, payload);
        }
    }, {
        key: 'addToWishlistEvent',
        value: function addToWishlistEvent(payload) {
            return createShoppingListPayload(_dataObjects.EVENT_ACTION.addToWishlist, payload);
        }
    }, {
        key: 'removeFromWishlistEvent',
        value: function removeFromWishlistEvent(payload) {
            return createShoppingListPayload(_dataObjects.EVENT_ACTION.removeFromWishlist, payload);
        }
    }, {
        key: 'launchedFromHomeScreenEvent',
        value: function launchedFromHomeScreenEvent(payload) {
            this.tracker.set('platform', 'PWA:standalone');
            return createUIInteractionEvent(payload);
        }
    }, {
        key: 'applePayOptionDisplayedEvent',
        value: function applePayOptionDisplayedEvent() {
            return createSandyPayload('apple pay payment option displayed', SANDY_ECOMMERCE_CATEGORY, {});
        }
    }, {
        key: 'applePayButtonDisplayedEvent',
        value: function applePayButtonDisplayedEvent() {
            return createSandyPayload('apple pay button displayed', SANDY_ECOMMERCE_CATEGORY, {});
        }
    }, {
        key: 'applePayButtonClickedEvent',
        value: function applePayButtonClickedEvent() {
            return createSandyPayload('apple pay clicked', SANDY_ECOMMERCE_CATEGORY, {});
        }
    }, {
        key: 'offlineModeUsedEvent',
        value: function offlineModeUsedEvent(payload) {
            var offlinePageSuccess = payload.offlinePageSuccess,
                offlinePageFailed = payload.offlinePageFailed,
                durationOfOffline = payload.durationOfOffline;

            return createSandyPayload(_dataObjects.EVENT_ACTION.offlineModeUsed, SANDY_TIMING_CATEGORY, {
                page_success: offlinePageSuccess,
                page_failed: offlinePageFailed,
                value: durationOfOffline
            });
        }
    }, {
        key: 'purchaseEvent',
        value: function purchaseEvent(payload) {
            var _this2 = this;

            var purchaseInfo = new _dataObjects.Transaction(payload.transaction, payload.products, [_dataObjects.Transaction.REVENUE], [_dataObjects.Product.PRICE, _dataObjects.Product.QUANTITY], {
                id: {
                    name: 'transaction_id'
                }
            }, {
                id: {
                    name: 'product_id'
                }
            }, false);

            purchaseInfo.products.forEach(function (product) {
                var eventType = _dataObjects.EVENT_ACTION.purchase + '.product';
                _this2.send(eventType, createSandyPayload(eventType, SANDY_ECOMMERCE_CATEGORY, (0, _extends3.default)({
                    transaction_id: purchaseInfo.transaction.transaction_id
                }, product)));
            });

            return createSandyPayload(_dataObjects.EVENT_ACTION.purchase, SANDY_ECOMMERCE_CATEGORY, purchaseInfo.transaction);
        }
    }, {
        key: 'uiInteractionEvent',
        value: function uiInteractionEvent(payload) {
            return createUIInteractionEvent(payload);
        }
    }, {
        key: 'send',
        value: function send(type, payload) {
            if (this.options.debug) {
                payload.channel = 'test';
            }

            this.tracker.sendEvent(payload);
            (0, _get3.default)(EngagementEngine.prototype.__proto__ || (0, _getPrototypeOf2.default)(EngagementEngine.prototype), 'send', this).call(this, type, payload);
        }
    }]);
    return EngagementEngine;
}(_connector2.default);

exports.default = EngagementEngine;