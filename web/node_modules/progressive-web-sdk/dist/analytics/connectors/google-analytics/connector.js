'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _connector = require('../connector');

var _connector2 = _interopRequireDefault(_connector);

var _dataObjects = require('../../data-objects/');

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ga = void 0; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var checkForLoadedGAPlugins = function checkForLoadedGAPlugins(plugin) {
    var pluginIsLoaded = false;
    /* istanbul ignore else */
    if (ga) {
        ga.getAll().forEach(function (tracker) {
            if (tracker.plugins_ && tracker.plugins_.get(plugin)) {
                pluginIsLoaded = true;
            }
        });
    }
    return pluginIsLoaded;
};

var outputHeader = function outputHeader(name, type) {
    var _console;

    (_console = console).groupCollapsed.apply(_console, (0, _toConsumableArray3.default)(_connector2.default.debugHeading('' + name, type)));
};

var GoogleAnalytics = function (_Connector) {
    (0, _inherits3.default)(GoogleAnalytics, _Connector);

    function GoogleAnalytics() {
        var displayName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Google Analytics';
        var trackerName = arguments[1];
        var options = arguments[2];
        (0, _classCallCheck3.default)(this, GoogleAnalytics);

        var _this = (0, _possibleConstructorReturn3.default)(this, (GoogleAnalytics.__proto__ || (0, _getPrototypeOf2.default)(GoogleAnalytics)).call(this, displayName, options));

        if (!trackerName) {
            throw new Error('trackerName cannot be undefined');
        }

        if (!_this.options.ecommerceLibrary) {
            throw new Error('options cannot be undefined and must have and "ecommerceLibrary" property defined');
        }

        if (!(_this.options.ecommerceLibrary === 'ec' || _this.options.ecommerceLibrary === 'ecommerce')) {
            throw new Error('"ecommerceLibrary" property must be either "ec" or "ecommerce"');
        }

        _this.trackerName = trackerName;

        // Load Google Analytics
        var scriptSrc = '//www.google-analytics.com/analytics';
        if (options.gaDebug || (0, _utils.hasUrlDebugFlag)()) {
            window.ga_debug = { trace: true };
            _connector2.default.loadScript(scriptSrc + '_debug.js', _this);
        } else {
            _connector2.default.loadScript(scriptSrc + '.js', _this);
        }
        return _this;
    }

    (0, _createClass3.default)(GoogleAnalytics, [{
        key: 'getActionName',
        value: function getActionName(action) {
            return this.trackerName + '.' + action;
        }
    }, {
        key: 'ready',
        value: function ready(gaReadyCallback) {
            var _this2 = this;

            ga = window.ga;

            ga(function () {
                _this2.tracker = ga.getByName(_this2.trackerName);

                if (!_this2.tracker) {
                    throw new Error('ready function should be overloaded with ga tracker creation');
                }

                gaReadyCallback && gaReadyCallback();
                (0, _get3.default)(GoogleAnalytics.prototype.__proto__ || (0, _getPrototypeOf2.default)(GoogleAnalytics.prototype), 'ready', _this2).call(_this2);
            });
        }
    }, {
        key: 'setDimension',
        value: function setDimension(index, value) {
            ga(this.getActionName('set'), 'dimension' + index, value);
        }

        // Ecommerce library initialization

    }, {
        key: 'initEcommerceLib',
        value: function initEcommerceLib() {
            // Ensure the desired plugin is not loaded
            if (this.tracker.plugins_ && this.tracker.plugins_.get(this.options.ecommerceLibrary)) {
                return;
            }

            this.ecommerceLibraryInitialized = true;

            // Ensure only one of these two libraryies is loaded across all ga trackers
            var isECLoaded = checkForLoadedGAPlugins('ec');
            var isEcommerceLoaded = checkForLoadedGAPlugins('ecommerce');

            if (!isECLoaded && !isEcommerceLoaded || isECLoaded && this.options.ecommerceLibrary === 'ec' || isEcommerceLoaded && this.options.ecommerceLibrary === 'ecommerce') {
                this.send('Setup', ['require', this.options.ecommerceLibrary]);
            } else {
                throw new Error('Attempting to load GA "ec" and "ecommerce" plugin. Please make sure all GA trackers are using either "ec" or "ecommerce" plugin and not both');
            }
        }
    }, {
        key: 'isEC',
        value: function isEC() {
            var isEC = this.options.ecommerceLibrary === 'ec';

            if (isEC && !this.ecommerceLibraryInitialized) {
                this.initEcommerceLib();
            }

            return isEC;
        }
    }, {
        key: 'debug',
        value: function debug(type) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            switch (type) {
                case _dataObjects.EVENT_ACTION.pageview:
                    {
                        outputHeader(this.displayName, type);
                        console.log('GA ID:\t\t\t\t ' + this.tracker.get('trackingId'));
                        console.log('Location:\t\t\t ' + this.tracker.get('location'));
                        console.log('Page:\t\t\t\t ' + this.tracker.get('page'));
                        break;
                    }

                case _dataObjects.EVENT_ACTION.purchase:
                    {
                        var actionType = void 0;

                        if (args[0] === 'ec:setAction' && args[1] === 'purchase' || args[0] === 'ecommerce:addTransaction') {
                            actionType = 'transaction';
                        } else if (args[0] === 'ec:addProduct' || args[0] === 'ecommerce:addItem') {
                            actionType = 'product';
                        }

                        switch (actionType) {
                            case 'transaction':
                                {
                                    outputHeader(this.displayName, type);
                                    var data = args[0] === 'ec:setAction' ? args[2] : args[1];
                                    console.log('Transaction ID:\t\t ' + data.id);
                                    console.log('Revenue:\t\t\t ' + data.revenue);
                                    break;
                                }

                            case 'product':
                                {
                                    outputHeader(this.displayName, type + '.product');
                                    console.log('Product ID:\t\t\t ' + (args[0] === 'ec:addProduct' ? args[1].id : args[1].sku));
                                    console.log('Product Name:\t\t ' + args[1].name);
                                    console.log('Product Price:\t\t ' + args[1].price);
                                    console.log('Product Quantity:\t ' + args[1].quantity);
                                    break;
                                }
                        }
                        break;
                    }
            }

            if (this.debugCallback) {
                this.debugCallback.apply(this, [type].concat(args));
            } else {
                console.groupEnd();
            }
        }
    }, {
        key: 'pageviewEvent',
        value: function pageviewEvent() {
            ga(this.getActionName('set'), 'page', window.document.location.pathname);
            return ['send', _dataObjects.EVENT_ACTION.pageview];
        }
    }, {
        key: 'setCurrencyEvent',
        value: function setCurrencyEvent(payload) {
            return ['set', 'currencyCode', payload.currencyCode];
        }
    }, {
        key: 'ecSetAction',
        value: function ecSetAction() {
            /* istanbul ignore else */
            if (this.isEC()) {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                this.send('setAction', ['ec:setAction'].concat(args));
            }
        }
    }, {
        key: 'ecAddProduct',
        value: function ecAddProduct(product) {
            if (this.isEC() && product) {
                this.send('addProduct', ['ec:addProduct', product]);
            }
        }
    }, {
        key: 'ecAddProductAction',
        value: function ecAddProductAction(action, product) {
            if (this.isEC()) {
                this.ecAddProduct(product);
                this.ecSetAction(action);
            }
        }
    }, {
        key: 'ecAddImpressionAction',
        value: function ecAddImpressionAction(product) {
            if (this.isEC()) {
                this.send(_dataObjects.EVENT_ACTION.productImpression, ['ec:addImpression', product]);
            }
        }
    }, {
        key: 'applePayOptionDisplayedEvent',
        value: function applePayOptionDisplayedEvent() {
            return ['send', 'event', 'ecommerce', 'apple pay payment option displayed', { nonInteraction: 1 }];
        }
    }, {
        key: 'applePayButtonDisplayedEvent',
        value: function applePayButtonDisplayedEvent() {
            return ['send', 'event', 'ecommerce', 'apple pay button displayed', { nonInteraction: 1 }];
        }
    }, {
        key: 'applePayButtonClickedEvent',
        value: function applePayButtonClickedEvent() {
            return ['send', 'event', 'ecommerce', 'apple pay clicked'];
        }
    }, {
        key: 'purchaseEvent',
        value: function purchaseEvent(payload) {
            var _this3 = this;

            this.initEcommerceLib();

            if (this.isEC()) {
                var purchaseInfo = new _dataObjects.Transaction(payload.transaction, payload.products, [_dataObjects.Transaction.REVENUE]);

                purchaseInfo.products.forEach(function (product) {
                    _this3.send(_dataObjects.EVENT_ACTION.purchase, ['ec:addProduct', product]);
                });

                this.send(_dataObjects.EVENT_ACTION.purchase, ['ec:setAction', _dataObjects.EVENT_ACTION.purchase, purchaseInfo.transaction]);

                return ['send', 'event', 'Ecommerce', 'Purchase', { nonInteraction: 1 }];
            } else {
                var _purchaseInfo = new _dataObjects.Transaction(payload.transaction, payload.products, [_dataObjects.Transaction.REVENUE], [], undefined, {
                    id: {
                        name: 'sku'
                    }
                });

                _purchaseInfo.products.forEach(function (product) {
                    _this3.send(_dataObjects.EVENT_ACTION.purchase, ['ecommerce:addItem', (0, _extends3.default)({
                        id: _purchaseInfo.transaction.id
                    }, product)]);
                });

                this.send(_dataObjects.EVENT_ACTION.purchase, ['ecommerce:addTransaction', _purchaseInfo.transaction]);
                return ['ecommerce:send'];
            }
        }
    }, {
        key: 'send',
        value: function send(type, args) {
            if (args && args.length) {
                ga.apply(ga, [this.getActionName(args[0])].concat((0, _toConsumableArray3.default)(args.slice(1))));
                (0, _get3.default)(GoogleAnalytics.prototype.__proto__ || (0, _getPrototypeOf2.default)(GoogleAnalytics.prototype), 'send', this).apply(this, [type].concat((0, _toConsumableArray3.default)(args)));
            }
        }
    }]);
    return GoogleAnalytics;
}(_connector2.default);

exports.default = GoogleAnalytics;