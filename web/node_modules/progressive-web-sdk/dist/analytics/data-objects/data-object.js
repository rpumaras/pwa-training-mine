'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var DataObject = function () {
    function DataObject() {
        var requiredFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var acceptedFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        var _this = this;

        var initialFields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var keepExtraFields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        (0, _classCallCheck3.default)(this, DataObject);

        this.name = this.constructor.name;
        this.requiredFields = [].concat((0, _toConsumableArray3.default)(requiredFields));
        this.acceptedFields = [].concat((0, _toConsumableArray3.default)(acceptedFields));
        this.allFields = [].concat((0, _toConsumableArray3.default)(requiredFields), (0, _toConsumableArray3.default)(acceptedFields));

        (0, _keys2.default)(initialFields).forEach(function (key) {
            var isValidKey = _this.isValidField(key);
            if (keepExtraFields || isValidKey) {
                _this[key] = typeof initialFields[key] !== 'undefined' && initialFields[key] !== null ? initialFields[key].toString() : '';

                if (!isValidKey) {
                    _this.allFields.push(key);
                }
            }
        });
    }

    (0, _createClass3.default)(DataObject, [{
        key: 'isValidField',
        value: function isValidField(key) {
            return !!this.constructor[key.toUpperCase()];
        }
    }, {
        key: 'isValid',
        value: function isValid() {
            var _this2 = this;

            var additionalRequiredFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var fieldsToCheck = [].concat((0, _toConsumableArray3.default)(this.requiredFields), (0, _toConsumableArray3.default)(additionalRequiredFields));

            fieldsToCheck.forEach(function (field) {
                // You can have empty string as value
                if (!(_this2.hasOwnProperty(field) || map[field] && map[field].hasOwnProperty('defaultValue'))) {
                    throw new Error(_this2.constructor.name + ' object must have \'' + field + '\' defined');
                }
            });
        }
    }, {
        key: 'build',
        value: function build() {
            var _this3 = this;

            var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var constructedObj = {};
            this.allFields.forEach(function (field) {
                var fieldKey = field;
                if (map[field] && map[field].name) {
                    fieldKey = map[field].name;
                }

                if (_this3.hasOwnProperty(field)) {
                    constructedObj[fieldKey] = _this3[field].toString();
                } else if (map[field] && map[field].hasOwnProperty('defaultValue')) {
                    constructedObj[fieldKey] = map[field].defaultValue;
                }
            });
            return constructedObj;
        }
    }, {
        key: 'sanitizeMoney',
        value: function sanitizeMoney(field) {
            if (this[field]) {
                var value = this[field].match(/[\d,'./]/g);
                if (value) {
                    value = value.join('').replace(/[,'.]$/, ''); // leave only valid monetary syntaxes and strip trailing syntaxs
                    var match = value.match(/(.*?)(([,'./])(\d{1,2}))?$/); // break money string (ie: '10,000' , '.', '99')
                    /* istanbul ignore else */
                    if (match) {
                        var sanitizedValue = match[1].match(/\d/g); // digits only for first match (ie. '10000')
                        if (sanitizedValue) {
                            this[field] = sanitizedValue.join('');

                            if (match[3] && match[4]) {
                                this[field] += '.' + match[4]; // convert float seprator to period
                            }
                            return;
                        }
                    }
                }

                this[field] = '';
            }
        }
    }]);
    return DataObject;
}();

exports.default = DataObject;