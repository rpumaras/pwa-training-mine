'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasAnalyticsNameAttribute = exports.DATA_CONTENT = exports.DATA_NAME = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _connector = require('./connectors/connector');

var _connector2 = _interopRequireDefault(_connector);

var _connector3 = require('./connectors/engagement-engine/connector');

var _connector4 = _interopRequireDefault(_connector3);

var _mobifyGa = require('./connectors/google-analytics/mobify-ga');

var _mobifyGa2 = _interopRequireDefault(_mobifyGa);

var _utils = require('./utils');

var _dataObjects = require('./data-objects');

var _ttiPolyfill = require('tti-polyfill');

var _ttiPolyfill2 = _interopRequireDefault(_ttiPolyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The maximum number of characters that the column content in EE can store
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var MAX_CONTENT_FIELD_LENGTH = 128;

var bundle = void 0;
var firstLoad = true;
var performanceTiming = {};
var assetCount = 0;
var delaySendPerformanceTimer = void 0;

var normalizeTimingMetrics = function normalizeTimingMetrics(startTime, timings) {
    var normalizedTiming = {};
    (0, _keys2.default)(timings).forEach(function (key) {
        var value = timings[key];
        if (typeof value === 'number') {
            normalizedTiming[key] = timings[key] - startTime;
        } else {
            normalizedTiming[key] = timings[key];
        }
    });
    return normalizedTiming;
};

var assertValidConnector = function assertValidConnector(connector) {
    if (!((0, _getPrototypeOf2.default)(connector) instanceof _connector2.default)) {
        throw new Error('Analytics connector must be an instance of Connector');
    }
};

var parseEvent = function parseEvent(type) {
    var separatorIndex = type.indexOf('.');

    if (separatorIndex === -1) {
        return { type: type };
    } else {
        var connectorName = type.substr(0, separatorIndex);
        return {
            type: type.substr(separatorIndex + 1),
            connectorName: connectorName
        };
    }
};

var EVENT_OPTIONS = {
    capture: true,
    passive: true
};
var DATA_NAME = exports.DATA_NAME = 'data-analytics-name';
var DATA_CONTENT = exports.DATA_CONTENT = 'data-analytics-content';
var DATA_TOUCHED = 'data-analytics-touched';
var NODE_NAMES = {
    input: 'INPUT',
    select: 'SELECT',
    textarea: 'TEXTAREA'
};

var hasAnalyticsNameAttribute = exports.hasAnalyticsNameAttribute = function hasAnalyticsNameAttribute(element, elementType, debugFlag) {
    if (!element.hasAttribute(DATA_NAME)) {
        /* istanbul ignore else */
        if (debugFlag) {
            console.error(elementType + ' must have \'' + DATA_NAME + '\' attribute defined', element);
        }
        return false;
    }
    return true;
};

var captureUIInteractions = function captureUIInteractions(analyticsManager, element) {
    var _data;

    /* istanbul ignore else */
    if (!hasAnalyticsNameAttribute(element, 'Element', analyticsManager.options.debug)) {
        return;
    }

    var name = element.getAttribute(DATA_NAME);
    var content = element.getAttribute(DATA_CONTENT);
    var nodeName = element.nodeName;

    var data = (_data = {}, (0, _defineProperty3.default)(_data, _dataObjects.UIInteraction.SUBJECT, _dataObjects.UI_SUBJECT.user), (0, _defineProperty3.default)(_data, _dataObjects.UIInteraction.NAME, name), _data);

    if (content) {
        data[_dataObjects.UIInteraction.CONTENT] = content;
    }

    if (nodeName === NODE_NAMES.input || nodeName === NODE_NAMES.select || nodeName === NODE_NAMES.textarea) {
        data[_dataObjects.UIInteraction.ACTION] = _dataObjects.UI_ACTION.focus;
        data[_dataObjects.UIInteraction.OBJECT] = _dataObjects.UI_OBJECT.input;
        if (element.type === 'checkbox') {
            data[_dataObjects.UIInteraction.CONTENT] = element.checked;
        } else if (element.type === 'radio' || nodeName === NODE_NAMES.select) {
            data[_dataObjects.UIInteraction.CONTENT] = element.value;
        }
    } else {
        data[_dataObjects.UIInteraction.ACTION] = _dataObjects.UI_ACTION.click;
        data[_dataObjects.UIInteraction.OBJECT] = _dataObjects.UI_OBJECT.element;
    }

    analyticsManager.distribute(_dataObjects.EVENT_ACTION.uiInteraction, new _dataObjects.UIInteraction(data));
};

var captureEventsFromDOM = function captureEventsFromDOM(analyticsManager) {
    var rootEl = document.getElementsByClassName('react-target')[0];

    // User Interaction - Bind passive capture event listener on root element
    rootEl.addEventListener('focus', function (event) {
        var element = event.target;
        var nodeName = element.nodeName;

        /* istanbul ignore else */
        if (!element.hasAttribute(DATA_TOUCHED) && (NODE_NAMES.hasOwnProperty(nodeName.toLowerCase()) || element.hasAttribute(DATA_NAME))) {
            if (nodeName === NODE_NAMES.input && !(element.type === 'radio' || element.type === 'checkbox') || nodeName === NODE_NAMES.textarea) {
                captureUIInteractions(analyticsManager, element);
            } else {
                element.setAttribute(DATA_TOUCHED, true);
                element.addEventListener(nodeName === NODE_NAMES.select ? 'change' : 'click', function () {
                    captureUIInteractions(analyticsManager, element);
                }, EVENT_OPTIONS);
            }
        }
    }, EVENT_OPTIONS);

    // Exposing Analytics constants on window.Progressive space
    /* istanbul ignore else */
    if (window.Progressive) {
        window.Progressive.analytics = {
            constants: {
                UI_SUBJECT: _dataObjects.UI_SUBJECT,
                UI_ACTION: _dataObjects.UI_ACTION,
                UI_OBJECT: _dataObjects.UI_OBJECT,
                UI_NAME: _dataObjects.UI_NAME
            }

            // Exposing an analytics send function on window.Progressive space
        };window.Progressive.analytics.send = function (analyticsData) {
            analyticsManager.distribute(_dataObjects.EVENT_ACTION.uiInteraction, new _dataObjects.UIInteraction(analyticsData, [], (0, _defineProperty3.default)({}, _dataObjects.UIInteraction.SUBJECT, {
                defaultValue: _dataObjects.UI_SUBJECT.app
            })));
        };
    }
};

// This class is a singleton

var AnalyticsManager = function () {
    function AnalyticsManager() {
        (0, _classCallCheck3.default)(this, AnalyticsManager);

        this.options = {
            debug: false
        };
    }

    (0, _createClass3.default)(AnalyticsManager, [{
        key: 'init',
        value: function init(initalizingOptions) {
            var _this = this;

            this.options = (0, _extends4.default)({}, this.options, initalizingOptions);

            if ((0, _utils.hasUrlDebugFlag)()) {
                this.options.debug = true;
            }

            this.engagementEngine = new _connector4.default(this.options);

            for (var _len = arguments.length, otherConnectors = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                otherConnectors[_key - 1] = arguments[_key];
            }

            this.connectors = [this.engagementEngine, new _mobifyGa2.default(this.options)].concat(otherConnectors);

            this.connectors.forEach(function (connector) {
                assertValidConnector(connector);
                connector.options.debug = _this.options.debug;
            });

            var mainScript = document.querySelectorAll('#progressive-web-main')[0].src;
            bundle = mainScript.indexOf('production') !== -1 ? 'production' : 'development';

            captureEventsFromDOM(this);
        }
    }, {
        key: 'countAsset',
        value: function countAsset() {
            if (performanceTiming.templateWillMount && !performanceTiming.templateAPIEnd) {
                assetCount += 1;
            }
        }
    }, {
        key: 'checkAllAssetsLoaded',
        value: function checkAllAssetsLoaded() {
            /* istanbul ignore else */
            if (assetCount > 0) {
                assetCount -= 1;
            }
        }
    }, {
        key: 'sendPerformance',
        value: function sendPerformance() {
            var _this2 = this;

            // Prevents double send in case when the timeout and assets finish loading within the 1 second gap
            /* istanbul ignore else */
            if (performanceTiming.templateAPIEnd) {
                if (
                // When we have zero assets
                !performanceTiming.fullPageLoad ||
                // Or all assets are pre-cached so API comes back slower
                performanceTiming.fullPageLoad < performanceTiming.templateAPIEnd) {
                    performanceTiming.fullPageLoad = performanceTiming.templateAPIEnd;
                }

                var startTime = window.Progressive.PerformanceTiming.timingStart;

                if (!firstLoad) {
                    startTime = performanceTiming.templateWillMount;
                }

                var metrics = (0, _extends4.default)({
                    bundle: bundle
                }, normalizeTimingMetrics(startTime, performanceTiming), {
                    timingStart: startTime
                });

                if (firstLoad) {
                    /* istanbul ignore next */
                    _ttiPolyfill2.default.getFirstConsistentlyInteractive().then(function (timeToInteractive) {
                        // Cannot unit test this promise as it requires PerformanceLongTaskTiming and PerformanceObserver
                        // and something else to work properly
                        /* istanbul ignore next */
                        _this2.distribute(_dataObjects.EVENT_ACTION.performance, (0, _extends4.default)({}, window.Progressive.PerformanceTiming, metrics, (0, _defineProperty3.default)({}, _dataObjects.PERFORMANCE_METRICS.timeToInteractive, timeToInteractive)));
                    });
                } else {
                    this.distribute(_dataObjects.EVENT_ACTION.performance, metrics);
                }

                firstLoad = false;
                assetCount = 0;
                performanceTiming = {};
            }
        }
    }, {
        key: 'collectPerformance',
        value: function collectPerformance(type, value) {
            var _this3 = this;

            // This clears out any set values due to lazy loaded contents
            if (type !== _dataObjects.PERFORMANCE_METRICS.templateWillMount && !performanceTiming.templateWillMount) {
                performanceTiming = {};
                assetCount = 0;
                return;
            }

            if (type === _dataObjects.PERFORMANCE_METRICS.fullPageLoad) {
                this.checkAllAssetsLoaded();
            }

            var timing = Date.now();

            performanceTiming[type] = value || timing;

            if (performanceTiming.templateWillMount && performanceTiming.templateDidMount && performanceTiming.templateAPIEnd) {

                if (assetCount === 0) {
                    this.sendPerformance();
                } else {
                    // We are waiting for assets to finish loading but we don't wait for
                    // any resources that are lazy loaded by user interaction
                    clearTimeout(delaySendPerformanceTimer);
                    delaySendPerformanceTimer = setTimeout(function () {
                        _this3.sendPerformance();
                    }, 1000);
                }
            }
        }
    }, {
        key: 'distribute',
        value: function distribute(event, metaPayload, state) {
            var _this4 = this;

            var _parseEvent = parseEvent(event),
                type = _parseEvent.type,
                connectorName = _parseEvent.connectorName;

            if (!type) {
                return;
            }

            this.connectors.forEach(function (connector) {
                try {
                    if (connectorName && connectorName === connector.name) {
                        connector.receive(type, metaPayload, state);
                    } else if (typeof connectorName === 'undefined') {
                        connector.receive(type, metaPayload, state);
                    }
                } catch (err) {
                    var _ref2;

                    console.error('Analytics connector ' + connector.displayName + ' failed to execute ' + type + ' analytics', err);
                    _this4.engagementEngine.receive(_dataObjects.EVENT_ACTION.uiInteraction, new _dataObjects.UIInteraction((_ref2 = {}, (0, _defineProperty3.default)(_ref2, _dataObjects.UIInteraction.SUBJECT, _dataObjects.UI_SUBJECT.app), (0, _defineProperty3.default)(_ref2, _dataObjects.UIInteraction.ACTION, _dataObjects.UI_ACTION.receive), (0, _defineProperty3.default)(_ref2, _dataObjects.UIInteraction.OBJECT, _dataObjects.UI_OBJECT.error), (0, _defineProperty3.default)(_ref2, _dataObjects.UIInteraction.NAME, 'Analytics Connector Error: ' + connector.displayName + ' - ' + type), (0, _defineProperty3.default)(_ref2, _dataObjects.UIInteraction.CONTENT, err.stack ? err.stack.substr(0, MAX_CONTENT_FIELD_LENGTH) : err.toString().substr(0, MAX_CONTENT_FIELD_LENGTH)), _ref2)));
                }
            });
        }
    }, {
        key: 'addConnector',
        value: function addConnector(connector) {
            assertValidConnector(connector);
            connector.debug = this.options.debug;
            this.connectors = [].concat((0, _toConsumableArray3.default)(this.connectors), [connector]);
        }
    }]);
    return AnalyticsManager;
}();

var analyticsManager = new AnalyticsManager();

exports.default = analyticsManager;