'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.updateState = exports.setPageCount = exports.getPageCount = exports.decreaseVisitCountdowns = exports.startVisitCountdown = exports.getVisitCountdowns = exports.setVisitCountdownsInStorage = exports.initStorage = undefined;

var _constants = require('../store/push-messaging/constants');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _pushMessagingStore = require('../store/push-messaging/push-messaging-store');

var _pushMessagingStore2 = _interopRequireDefault(_pushMessagingStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var storage = void 0; /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var logger = void 0;

/**
 * Creates local instances of PushMessaginStore and Logger, for use in other
 * methods. Call this first before any other methods.
 */
var initStorage = exports.initStorage = function initStorage() {
    storage = storage || new _pushMessagingStore2.default('pw');
    logger = logger || new _logger2.default('[Messaging UI]');

    return storage;
};
/**
 * Sets the provided countdowns object in local storage.
 *
 * @param {object} countdowns - The visit countdowns object to set in storage
 * @returns {object} the provided `countdowns` argument
 */
var setVisitCountdownsInStorage = exports.setVisitCountdownsInStorage = function setVisitCountdownsInStorage(countdowns) {
    storage.set(_constants.VISIT_COUNTDOWNS, countdowns, _constants.PERMA_DURATION);

    return countdowns;
};

/**
 * Gets the visit countdowns object from local storage
 *
 * @returns {object} current visit countdowns
 */
var getVisitCountdowns = exports.getVisitCountdowns = function getVisitCountdowns() {
    return storage.get(_constants.VISIT_COUNTDOWNS) || {};
};

/**
 * Adds the optionally provided channel name, or "default" to the visit countdowns
 * object, with the provided `visitsToWait` argument, which is then set in local
 * storage.
 *
 * @param {number} visitsToWait - The number of visits to wait before showing an ask again
 * @param {string} [channelName] - Optional channel name (default is 'broadcast')
 * @returns {object} current visit countdowns
 */
var startVisitCountdown = exports.startVisitCountdown = function startVisitCountdown(visitsToWait) {
    var channelName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.DEFAULT_CHANNEL;

    var countdowns = getVisitCountdowns();
    countdowns[channelName] = visitsToWait;

    return setVisitCountdownsInStorage(countdowns);
};

/**
 * Retrieves visit countdowns from local storage, decreases each key's value by 1,
 * then sets the value in local storage again.
 *
 * @returns {object} - current visit countdowns
 */
var decreaseVisitCountdowns = exports.decreaseVisitCountdowns = function decreaseVisitCountdowns() {
    var countdowns = getVisitCountdowns();

    for (var counter in countdowns) {
        /* istanbul ignore else */
        if (countdowns.hasOwnProperty(counter)) {
            countdowns[counter] = Math.max(0, countdowns[counter] - 1);
        }
    }

    return setVisitCountdownsInStorage(countdowns);
};

/**
 * Gets the current page count from local storage.
 *
 * @returns {number} The current page count, or 0 if not found in storage
 */
var getPageCount = exports.getPageCount = function getPageCount() {
    return storage.get(_constants.PAGE_COUNT) || 0;
};

/**
 * Sets the page count in storage using the provided pageCount argument
 *
 * @param {number} pageCount - the page count to set in storage
 * @returns {number} the provided `pageCount` argument
 */
var setPageCount = exports.setPageCount = function setPageCount(pageCount) {
    return storage.set(_constants.PAGE_COUNT, pageCount, _constants.ACTIVE_VISIT_DURATION);
};

/**
 * Updates and retrieves the current page count and visit countdowns from local
 * storage, decreasing visit countdowns if page count was not found.
 *
 * @returns {object}
 *   - pageCount: the current page count
 *   - visitCountdowns: the current visit countdowns
 */
var updateState = exports.updateState = function updateState() {
    var pageCount = getPageCount();
    var countdowns = void 0;

    // If pageCount is 0, it means it wasn't found in storage - this indicates
    // it expired and we should decrement visit countdowns
    if (pageCount === 0) {
        logger.log('Visit elapsed, decreasing visit countdowns.');
        countdowns = decreaseVisitCountdowns();
    } else {
        countdowns = getVisitCountdowns();
    }

    setPageCount(++pageCount);

    return {
        pageCount: pageCount,
        visitCountdowns: countdowns
    };
};