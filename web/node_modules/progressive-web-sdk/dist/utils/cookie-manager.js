'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

var POLL_TIME_INTERVAL = 50;
var POLL_TIME_LIMIT = 3000;

var pollStartTime = void 0;

var nextSubscriberKey = 0;
var subscribers = {};

var CookieSubscriber = function () {
    function CookieSubscriber(name, updateCallback) {
        (0, _classCallCheck3.default)(this, CookieSubscriber);

        /* istanbul ignore else */
        if (!subscribers[name]) {
            subscribers[name] = {};
        }

        this.updateCallback = updateCallback;
        this.cookieName = name;
        this._subscribePosition = nextSubscriberKey;

        subscribers[name][this._subscribePosition] = this;

        nextSubscriberKey++;
    }

    (0, _createClass3.default)(CookieSubscriber, [{
        key: 'unsubscribe',
        value: function unsubscribe() {
            delete subscribers[this.cookieName][this._subscribePosition];
        }
    }]);
    return CookieSubscriber;
}();

// This class is a singleton


var CookieManager = function () {
    function CookieManager() {
        (0, _classCallCheck3.default)(this, CookieManager);

        this.pollTimeLimit = POLL_TIME_LIMIT;
        this.pollTimeInterval = POLL_TIME_INTERVAL;
    }

    (0, _createClass3.default)(CookieManager, [{
        key: 'isCookieSet',
        value: function isCookieSet(name) {
            var cookieRegex = new RegExp(name + '=([^;]+)');
            return cookieRegex.exec(document.cookie);
        }
    }, {
        key: 'set',
        value: function set(name, value, domain, lifetime) {
            var expires = new Date();
            var now = Date.now();
            var setExpiry = lifetime > 0;

            if (setExpiry) {
                expires.setTime(now + lifetime);
            }

            /* istanbul ignore next */
            document.cookie = name + '=' + value + ';' + (setExpiry ? ' expires=' + expires.toGMTString() + ';' : '') + ' path=/; ' + (domain && domain !== 'localhost' ? 'domain=' + domain : '');
        }
    }, {
        key: 'get',
        value: function get(name) {
            var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var cookieMatch = this.isCookieSet(name);

            return cookieMatch ? cookieMatch[1] : defaultValue;
        }
    }, {
        key: 'subscribe',
        value: function subscribe(name, updateCallback) {
            return new CookieSubscriber(name, updateCallback);
        }
    }, {
        key: '_pollForCookieUpdate',
        value: function _pollForCookieUpdate(cookieName) {
            var _this = this;

            var cookieValue = this.get(cookieName);

            /* istanbul ignore else */
            if (cookieValue) {
                var cookieSubscribers = subscribers[cookieName];

                (0, _keys2.default)(cookieSubscribers).forEach(function (key) {
                    cookieSubscribers[key].updateCallback(cookieValue);
                });
            } else {
                /* istanbul ignore else */
                if (cookieName && cookieName !== '' && Date.now() - pollStartTime < this.pollTimeLimit) {
                    setTimeout(function () {
                        _this._pollForCookieUpdate(cookieName);
                    }, this.pollTimeInterval);
                }
            }
        }
    }, {
        key: 'pollForAllCookieUpdate',
        value: function pollForAllCookieUpdate() {
            var _this2 = this;

            pollStartTime = Date.now();
            (0, _keys2.default)(subscribers).forEach(function (key) {
                if ((0, _keys2.default)(subscribers[key]).length) {
                    _this2._pollForCookieUpdate(key);
                }
            });
        }
    }]);
    return CookieManager;
}();

var cookieManager = new CookieManager();

exports.default = cookieManager;