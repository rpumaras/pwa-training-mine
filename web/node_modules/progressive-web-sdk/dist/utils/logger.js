'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**
 * Logger
 *
 * Simple module to enable logging under debug conditions only. Defaults to
 * determining debug status based on preview, which is shared across all instances
 *
 * Usage:
 *     const logger = new Logger('myPrefix')
 *
 * @param {string} [prefix] - Appends the given prefix to any logging statements - defaults to empty string
 * @returns {Logger}
 */
var Logger = function Logger(prefix) {
  this.prefix = prefix || '';
  return this;
};

Logger._debugFlag = !!(window.Mobify && typeof window.Mobify.Preview !== 'undefined');

/**
 * Toggles the debug setting on and off
 *
 * @param {boolean} isDebug - `true` to toggle on, `false` to toggle off
 */
Logger.setDebug = function (isDebug) {
  Logger._debugFlag = !!isDebug;
};

/**
 * Logs to console only if debug setting is true.
 *
 * @param {*} args - Comma separated arguments to log to console
 * @returns undefined
 */
Logger.prototype.log = function () {
  var _console;

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  Logger._debugFlag && (_console = console).log.apply(_console, [this.prefix].concat(args));
};

/**
 * Logs to console regardless of debug setting.
 *
 * @param {*} args - Comma separated arguments to log to console
 * @returns undefined
 */
Logger.prototype.forceLog = function () {
  var _console2;

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  (_console2 = console).log.apply(_console2, [this.prefix].concat(args));
};

exports.default = Logger;