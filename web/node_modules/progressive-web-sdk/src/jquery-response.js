/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import getJQueryHtml from './get-jquery-html'

const resolveCondition = (condition, resolve, interval) => {
    if (condition()) {
        resolve()
        clearInterval(interval)
    }
}

// Return a promise which resolves when the condition is met
export const waitForCondition = (condition) => {
    return new Promise((resolve) => {
        resolveCondition(condition, resolve)

        const interval = setInterval(() => {
            resolveCondition(condition, resolve, interval)
        }, 50)
    })
}

export const capturingIsLoaded = () => {
    return typeof window.Capture !== 'undefined'
}

export const jQueryIsLoaded = () => {
    const mobifyJqueryLoaded = typeof window.Progressive.$ !== 'undefined'
    const otherJqueryLoaded = typeof window.$ !== 'undefined'

    return mobifyJqueryLoaded || otherJqueryLoaded
}

export const jqueryResponse = (response) => response.text()
    .then((responseText) => {
        return Promise.all([
            waitForCondition(capturingIsLoaded),
            waitForCondition(jQueryIsLoaded)
        ]).then(() => responseText)
    })
    .then((responseText) => {
        const escapedText = window.Capture.disable(responseText, 'x-')
        const selectorLibrary = window.Progressive.$ || window.$

        return [
            selectorLibrary,
            getJQueryHtml(selectorLibrary, escapedText)
        ]
    })
