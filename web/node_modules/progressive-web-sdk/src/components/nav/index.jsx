/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import {noop} from '../../utils/utils'

/**
 * Related components:
 *
 * * [Nav](#!/Nav)
 * * [NavHeader](#!/NavHeader)
 * * [NavItem](#!/NavItem)
 * * [NavMenu](#!/NavMenu)
 * * [NavSlider](#!/NavSlider)
 *
 * The `Nav` component provides an arbitrarily nested navigation
 * tree and manages transitions between pages.
 *
 * The state of the navigation tree is shared with child components
 * through `context`, making it easy to build custom navigation UIs.
 * For simple cases, a set of default components are provided.
 *
 * Subscribe to changes through the `onPathChange` prop in order to
 * make changes to the navigation state of the app.
 *
 * @example ./DESIGN.md
 */
class Nav extends React.PureComponent {

    constructor(props) {
        super(props)
        this.goToPath = this.goToPath.bind(this)
        this.goBack = this.goBack.bind(this)
        this.getDerivedState = this.getDerivedState.bind(this)
        this.state = this.getDerivedState({root: undefined, path: '/'}, this.props)
    }

    componentWillReceiveProps(newProps) {
        this.setState(this.getDerivedState(this.props, newProps))
    }

    /**
     * Returns a mapping of
     *
     * {path: {node, parentNode, depth}}
     *
     * for each NavItem in the navigation tree.
     */
    static mapNodes(root) {
        const inner = (node, parent = undefined, map = {}, depth = 0) => {
            parent = parent || node      // Root is its own parent
            const path = node.path
            const children = node.children || []

            if (map.hasOwnProperty(path)) {
                throw new Error(`Each NavItem must have a unique "path" prop. Path "${path}" appeared twice.`)
            }
            map[path] = {node, parent, depth}
            children.forEach((child) => {
                inner(child, node, map, depth + 1)
            })
            return map
        }
        return root === undefined ? {} : inner(root)
    }

    getDerivedState(oldProps, newProps) {
        const nodes = (oldProps.root !== newProps.root) ? Nav.mapNodes(newProps.root) : this.state.nodes
        const selectedPath = newProps.path
        const {node: selected, parent: selectedParent} = nodes[selectedPath]
        const isLeaf = (selected.children || []).length === 0
        const oldExpandedPath = this.state ? this.state.expandedPath : '/'
        const expandedPath = isLeaf ? selectedParent.path : selected.path
        const {node: expanded, depth} = nodes[expandedPath]
        const {depth: oldDepth} = nodes[oldExpandedPath]
        const action = depth > oldDepth ? 'descending' : 'ascending'
        return {
            selectedPath,
            selected,
            expandedPath,
            expanded,
            action,
            nodes,
        }
    }

    goToPath(path) {
        const {onPathChange} = this.props
        if (this.state.nodes.hasOwnProperty(path)) {
            const {node} = this.state.nodes[path]
            const isLeaf = (node.children || []).length === 0
            onPathChange(path, isLeaf)
        }
    }

    goBack() {
        const {expandedPath} = this.state
        const {parent: expandedParent} = this.state.nodes[expandedPath]
        this.goToPath(expandedParent.path)
    }

    getChildContext() {
        return {
            ...this.state,
            root: this.props.root,
            goToPath: this.goToPath,
            goBack: this.goBack,
        }
    }

    render() {
        const {className, children} = this.props
        const classes = classNames('pw-nav', className)

        return (
            <div className={classes}>
                {children}
            </div>
        )
    }
}

Nav.defaultProps = {
    path: '/',
    root: {title: '', path: '/'},
    onPathChange: noop
}

Nav.propTypes = {
    /**
     * The element's children.
     */
    children: PropTypes.node,

    /**
     * Additional CSS classes to give to the element.
     */
    className: PropTypes.string,

    /**
     * The currently selected path in the navigation.
     */
    path: PropTypes.string,

    /**
     * The structure of the navigation as a JS object.
     */
    root: PropTypes.shape({
        title: PropTypes.string.isRequired,
        path: PropTypes.string.isRequired,
        type: PropTypes.string,
        children: PropTypes.array
    }),

    /**
     * Callback invoked when the selected path changes, of type
     * `(path: String, isLeaf: Boolean) => any`.
     */
    onPathChange: PropTypes.func,
}

Nav.childContextTypes = {
    nodes: PropTypes.object,
    root: PropTypes.object,
    selected: PropTypes.object,
    selectedPath: PropTypes.string,
    expanded: PropTypes.object,
    expandedPath: PropTypes.string,
    action: PropTypes.string,
    goToPath: PropTypes.func,
    goBack: PropTypes.func,
}

export default Nav
