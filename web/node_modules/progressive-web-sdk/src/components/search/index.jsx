/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import Button from '../button'
import Icon from '../icon'
import {onKeyUpWrapper} from '../../a11y-utils'
import {noop} from '../../utils/utils'
import {UI_NAME} from '../../analytics/data-objects/'

import ListTile from '../list-tile'
import Tile from '../tile'

const searchId = (() => {
    let i = 0
    return () => {
        return i++
    }
})()

/**
 * `Search` component that includes two variants: inline and overlay.
 * This component is commonly used in the header.
 *
 * @example ./DESIGN.md
 */

class Search extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            searchValue: '',
            isActive: false,
            id: `search-${searchId()}`
        }

        this.componentDidUpdate = this.componentDidUpdate.bind(this)
        this.focusInput = this.focusInput.bind(this)
        this.blurInput = this.blurInput.bind(this)
        this.resetInput = this.resetInput.bind(this)
        this.clearInput = this.clearInput.bind(this)
        this.closeSearch = this.closeSearch.bind(this)
        this.submitSearch = this.submitSearch.bind(this)
        this.clickSuggestion = this.clickSuggestion.bind(this)
    }

    componentDidUpdate(prevProps, prevState) {
        if (!prevProps.isOpen && this.props.isOpen) {
            this.focusInput()
        }

        if ((prevProps.isOpen && !this.props.isOpen) || (prevState.isActive && !this.state.isActive)) {
            this.resetInput()
        }
    }

    resetInput() {
        this.setState({
            searchValue: ''
        })
    }

    clearInput() {
        this.resetInput()
        this.focusInput()
        this.props.onClear()
    }

    focusInput() {
        this.input.focus()
    }

    // @TODO: check and make sure this doesn't break accessibility
    blurInput() {
        this.input.blur()
    }

    closeSearch(e) {
        this.setState({
            isActive: false
        })
        this.resetInput()
        this.props.onClose(e)
        this.blurInput()
    }

    submitSearch(e) {
        this.props.onSubmit(e)
        this.closeSearch()
    }

    clickSuggestion(e) {
        this.props.onClickSuggestion(e)
        this.closeSearch()
    }

    render() {
        const {
            accessibleLabel,
            className,
            onChange,
            onClose,
            inputProps,
            isOverlay,
            searchIcon,
            suggestedTermHeading,
            suggestedProductsHeading,
            termSuggestions,
            productSuggestions,
            onClickSuggestion,
            submitButtonProps,
            closeButtonProps,
            clearButtonProps
        } = this.props

        const {
            isActive,
            searchValue,
            id
        } = this.state

        const classes = classNames('pw-search', {
            'pw--is-active': isActive,
            'pw--is-overlay': isOverlay
        }, className)

        const searchSuggestionClasses = classNames('pw-search__suggestions', {
            'pw--is-empty': !termSuggestions && !productSuggestions
        })

        return (
            <div className={classes} role="search">
                <div className="pw-search__inner">
                    <form
                        className="pw-search__form"
                        onSubmit={this.submitSearch}
                        onChange={onChange}
                        action="javascript:void(0)"
                    >
                        <div className="pw-search__bar">
                            <div className="pw-search__icon">
                                <Icon className="pw-search__icon-content" name={searchIcon} />
                            </div>

                            <div className="pw-search__field">
                                <label
                                    htmlFor={id}
                                    className="u-visually-hidden"
                                >
                                    {accessibleLabel}
                                </label>

                                <input className="pw-search__input"
                                    ref={(el) => { this.input = el }}
                                    id={id}
                                    value={searchValue}
                                    onChange={(e) => this.setState({searchValue: e.target.value})}
                                    onFocus={() => this.setState({isActive: true})}
                                    type="search"
                                    name="query"
                                    data-analytics-name={UI_NAME.search}
                                    {...inputProps}
                                />
                            </div>

                            {searchValue.length > 0 &&
                                <div className="pw-search__button-clear">
                                    <Button
                                        onClick={this.clearInput}
                                        {...clearButtonProps}
                                        data-analytics-name={UI_NAME.clearSearch}
                                    />
                                </div>
                            }

                            <div className="pw-search__button-submit">
                                <Button
                                    type="submit"
                                    disabled={searchValue.trim().length === 0}
                                    {...submitButtonProps}
                                    data-analytics-name={UI_NAME.search}
                                />
                            </div>

                            {isOverlay &&
                                <div className="pw-search__button-close">
                                    <Button
                                        onClick={this.closeSearch}
                                        {...closeButtonProps}
                                        data-analytics-name={UI_NAME.dismissSearch}
                                    />
                                </div>
                            }
                        </div>
                    </form>

                    <section className={searchSuggestionClasses}>
                        {termSuggestions &&
                            <div className="pw-search__term-suggestions">
                                <h1 className="pw-search__suggestion-heading">
                                    {suggestedTermHeading}
                                </h1>

                                <ul className="pw-search__suggestion-list">
                                    {termSuggestions.map((suggestion, index) => {
                                        const suggestionProps = {
                                            ...suggestion
                                        }
                                        if (onClickSuggestion) {
                                            suggestionProps.onClick = this.clickSuggestion
                                        }
                                        return (
                                            <li key={index} className="pw-search__suggestion">
                                                <ListTile {...suggestionProps} />
                                            </li>
                                        )
                                    })}
                                </ul>
                            </div>
                        }

                        {productSuggestions &&
                            <div className="pw-search__product-suggestions">
                                <h1 className="pw-search__suggestion-heading">
                                    {suggestedProductsHeading}
                                </h1>

                                <ul className="pw-search__suggestion-list">
                                    {productSuggestions.map((suggestion, index) => {
                                        const suggestionProps = {
                                            ...suggestion
                                        }
                                        if (onClickSuggestion) {
                                            suggestionProps.onClick = this.clickSuggestion
                                        }
                                        return (
                                            <li key={index} className="pw-search__suggestion">
                                                <Tile {...suggestionProps} />
                                            </li>
                                        )
                                    })}
                                </ul>
                            </div>
                        }
                    </section>
                </div>

                {/* disable this a11y lint because it's a presentational element
                  * that's meant for mouse users, not keyboard users.
                  */}
                {/* eslint-disable jsx-a11y/no-static-element-interactions */}
                <div
                    tabIndex="-1"
                    role="presentation"
                    onKeyUp={onKeyUpWrapper(onClose)}
                    className="pw-search__shade"
                    onClick={this.closeSearch}
                />
                {/* eslint-enable jsx-a11y/no-static-element-interactions */}
            </div>
        )
    }
}

Search.defaultProps = {
    accessibleLabel: 'Search',
    submitButtonProps: {
        text: 'Submit search'
    },
    closeButtonProps: {
        text: 'Close search'
    },
    clearButtonProps: {
        text: 'Clear'
    },
    suggestedTermHeading: 'Suggested Search Terms',
    suggestedProductsHeading: 'Suggested Products',
    onClose: noop,
    onFocus: noop,
    onClear: noop,
    searchIcon: 'search'
}


Search.propTypes = {
    /**
     * Adds text as a label for the search input, accessible
     * to screen readers, but hidden to visual users.
     */
    accessibleLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: PropTypes.string,

    /**
     * The properties for clear button.
     */
    clearButtonProps: PropTypes.object,

    /**
     * The properties for close button.
     */
    closeButtonProps: PropTypes.object,

    /**
     * The data for the input you wish to render.
     */
    inputProps: PropTypes.object,

    /**
     * Is only used when `isOverlay` is `true`. Its comparison in `componentDidUpdate`
     * determines whether to allow or disallow input focus, or input reset. This
     * prop does nothing for an inline search. Note that this is different
     * from isActive.
     */
    isOpen: PropTypes.bool,

    /**
     * Controls whether the search component uses an overlay layout or not.
     */
    isOverlay: PropTypes.bool,

    /**
     * An array of the search(product) suggestions to be displayed.
     */
    productSuggestions: PropTypes.array,

    /**
     * Icon name for search.
     * For more information about available icons, see the [Icon component](#!/Icon).
     */
    searchIcon: PropTypes.string,

    /**
     * The properties for submit button.
     */
    submitButtonProps: PropTypes.object,

    /**
     * The text for suggested products heading.
     */
    suggestedProductsHeading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

    /**
     * The text for suggested terms heading.
     */
    suggestedTermHeading: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

    /**
     * An array of the search(term) suggestions to be displayed
     */
    termSuggestions: PropTypes.array,

    /**
     * The function to be called when the form is changed.
     */
    onChange: PropTypes.func,

    /**
     * The function to be called when the clear button is clicked.
     */
    onClear: PropTypes.func,

    /**
     * The function to be called when a suggestion is clicked.
     */
    onClickSuggestion: PropTypes.func,

    /**
     * The function to be called when the close button is clicked.
     */
    onClose: PropTypes.func,

    /**
     * The function to be called after form is submitted.
     */
    onSubmit: PropTypes.func,
}

export default Search
