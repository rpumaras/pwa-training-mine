/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import Link from '../link'
import Icon from '../icon'
import {onKeyUpWrapper} from '../../a11y-utils'
import {
    UI_SUBJECT,
    UI_ACTION,
    UI_OBJECT,
    UIInteraction,
} from '../../analytics/data-objects/'
import {
    DATA_NAME,
    DATA_CONTENT,
} from '../../analytics/analytics-manager'

/**
 * A styleable, accessible `<button>` component.
 *
 * @example ./DESIGN.md
 */

class Button extends React.PureComponent {
    handleClick(onClick) {
        return (e) => {
            if (window.Progressive) {
                const interactionData = {
                    [UIInteraction.NAME]: this.props[DATA_NAME],
                    [UIInteraction.SUBJECT]: UI_SUBJECT.user,
                    [UIInteraction.ACTION]: UI_ACTION.click,
                    [UIInteraction.OBJECT]: UI_OBJECT.button,
                }
                if (this.props[DATA_CONTENT]) {
                    interactionData[UIInteraction.CONTENT] = this.props[DATA_CONTENT]
                }
                window.Progressive.analytics.send(interactionData)
            }
            if (onClick && typeof onClick === 'function') {
                onClick(e)
            }
        }
    }

    render() {
        const {
            // Values
            href,
            icon,
            iconSize,
            iconClassName,
            innerClassName,
            showIconText,
            text,
            title,
            type,

            // Attributes
            id,
            className,
            disabled,
            name,
            value,
            role,
            openInNewTab,

            // Handlers
            onClick,
        } = this.props

        const classes = classNames('pw-button', {
            'pw--anchor': !!href,
            'pw--icon-only': !!icon && !this.props.children
        }, className)
        const innerClass = classNames('pw-button__inner', innerClassName)
        const iconClass = classNames('pw-button__icon', iconClassName, {
            'pw--has-siblings': this.props.children || (title && showIconText)
        })
        const textClass = classNames('pw-button__text', {
            'u-visually-hidden': !showIconText
        })
        const attrs = {
            href, id, disabled, name, value, role,
            onClick: this.handleClick(onClick),
            onKeyUp: onKeyUpWrapper(onClick),
            className: classes
        }

        let children

        if (icon) {
            children = [
                <Icon className={iconClass} size={iconSize} name={icon} key="autoicon" />,
                title && <span className={textClass} key="autotitle">{title}</span>
            ]

            if (typeof this.props.children === 'string') {
                children.push(this.props.children)
            } else {
                children.push(
                    ...(this.props.children || [])
                )
            }
        } else {
            children = text || this.props.children
        }

        // Add all aria and data attributes
        Object.keys(this.props).forEach((key) => {
            if (/^(aria|data)-/.test(key)) {
                attrs[key] = this.props[key]
            }
        })

        if (href) {
            return (
                <Link {...attrs} openInNewTab={openInNewTab}>
                    <div className={innerClass}>{children}</div>
                </Link>
            )
        } else {
            return (
                <button {...attrs} type={type}>
                    <div className={innerClass}>{children}</div>
                </button>
            )
        }
    }
}

Button.defaultProps = {
    type: 'button'
}

Button.propTypes = {
    /**
     * Any children to be nested within this button.
     */
    children: PropTypes.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: PropTypes.string,

    /**
     * Defines if button is disabled.
     */
    disabled: PropTypes.bool,

    /**
     * If specified, the component is rendered as a link, with this value set as the href.
     */
    href: PropTypes.string,

    /**
     * If specified, includes an icon of the given name in the button.
     * For more information about available icons, see the [Icon component](#!/Icon).
     */
    icon: PropTypes.string,

    /**
     * Adds values to the class attribute in <Icon> component.
     */
    iconClassName: PropTypes.string,

    /**
     * If specified, will set the icon to the size of your choice.
     */
    iconSize: PropTypes.string,

    /**
     * Sets the `id` attribute of the root element.
     */
    id: PropTypes.string,

    /**
     * Adds values to the class attribute of the inner container.
     */
    innerClassName: PropTypes.string,

    /**
     * The button's `name` attribute.
     */
    name: PropTypes.string,

    /**
     * For use with Buttons with an href set.
     *
     * If true, target="_blank" will be added to the button.
     * Only use this property if you trust the link! https://mathiasbynens.github.io/rel-noopener
     */
    openInNewTab: PropTypes.bool,

    /**
     * The button's `role` attribute.
     */
    role: PropTypes.string,

    /**
    * For use when the icon and title attributes have been defined.
    * If false, `u-visually-hidden` class will be added to the container that wraps
    * the title attribute. If true, `u-visually-hidden` will be removed.
    *
    */
    showIconText: PropTypes.bool,

    /**
     * Text contents of the button.
     */
    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

    /**
     * The title to be used for accessibility (generally if `icon` is used).
     * If showIconText is set to true, this text will be shown with the icon
     */
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

    /**
     * Specifies button type, defaults to `button`.
     */
    type: PropTypes.oneOf(['button', 'submit']),

    /**
     * The button's `value` attribute.
     */
    value: PropTypes.string,

    /**
     * User-defined method for hooking into click events.
     */
    onClick: PropTypes.func
}

export default Button
