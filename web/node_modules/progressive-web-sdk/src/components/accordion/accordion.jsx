/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import AccordionItem from './accordion-item'
import {noop} from '../../utils/utils'

/**
 * Related components:
 *
 * * [AccordionItemContent](#!/AccordionItemContent)
 * * [AccordionItem](#!/AccordionItem)
 *
 * `Accordion` is the outer wrapper of expandable content.
 * It is used to expand and collapse the content by clicking its header.
 *
 * @example ./DESIGN.md
 */

class Accordion extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            // We need to use a copy of this prop so it doesn't get mutated
            openItems: [...props.initialOpenItems]
        }

        this.onClick = this.onClick.bind(this)

        this.updateItem = this.updateItem.bind(this)
        this.openItem = this.openItem.bind(this)
        this.closeItem = this.closeItem.bind(this)
    }

    updateItem(index, opening) {
        if (index < 0 || index >= React.Children.count(this.props.children)) {
            return
        }

        let openItems = [...this.state.openItems]
        const openItemArrayIndex = openItems.indexOf(index)
        const alreadyOpen = openItemArrayIndex !== -1

        if (opening) {
            if (this.props.singleItemOpen) {
                openItems = [index]
            } else if (!alreadyOpen) {
                // Don't push multiple copies of the same index into openItems
                openItems.push(index)
            }
        } else {
            if (this.props.singleItemOpen) {
                openItems = []
            } else if (alreadyOpen) {
                openItems.splice(openItemArrayIndex, 1)
            }
        }

        this.setState({openItems})
    }

    onClick(accordionItemIdx) {
        const openItems = this.state.openItems
        const openItemArrayIndex = openItems.indexOf(accordionItemIdx)

        this.updateItem(accordionItemIdx, openItemArrayIndex === -1)
    }

    openItem(index) {
        this.updateItem(index, true)
    }

    closeItem(index) {
        this.updateItem(index, false)
    }

    openAllItems() {
        const indices = React.Children.map(this.props.children, (_, index) => index)
        this.setState({
            openItems: indices
        })
    }

    closeAllItems() {
        this.setState({
            openItems: []
        })
    }

    render() {
        const {
            className,

            duration,
            easing,
            onOpen,
            onOpened,
            onClose,
            onClosed,
            prerender,
            singleItemOpen,

            children
        } = this.props

        const classes = classNames('pw-accordion', className)

        return (
            <div className={classes} aria-multiselectable={!singleItemOpen} role="tablist">
                {React.Children.map(children, (child, idx) => {
                    // If the user is using && to conditionally add a child
                    // the child could be undefined
                    if (child && child.type && child.type.name === AccordionItem.name) {
                        const childProps = {
                            onHeaderClick: this.onClick.bind(this, idx),
                            shown: this.state.openItems.indexOf(idx) > -1,
                            prerender,
                            duration,
                            easing,
                            key: idx
                        }

                        // Allow callbacks added to the AccordionItem directly
                        // to override ones added to the Accordion
                        if (!child.props.onOpen) {
                            childProps.onOpen = onOpen
                        }

                        if (!child.props.onOpened) {
                            childProps.onOpened = onOpened
                        }

                        if (!child.props.onClose) {
                            childProps.onClose = onClose
                        }

                        if (!child.props.onClosed) {
                            childProps.onClosed = onClosed
                        }

                        return React.cloneElement(child, childProps)
                    } else {
                        return child
                    }
                })}
            </div>
        )
    }
}

Accordion.defaultProps = {
    onOpen: noop,
    onOpened: noop,
    onClose: noop,
    onClosed: noop,
    duration: 500,
    easing: 'ease',
    singleItemOpen: false,
    initialOpenItems: []
}

Accordion.propTypes = {
    /**
     * This list of <AccordionItem>s you'd like to display.
     */
    children: PropTypes.node,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: PropTypes.string,

    /**
     * Duration of the animation in millis.
     */
    duration: PropTypes.number,

    /**
     * Easing function for the animation.
     */
    easing: PropTypes.string,

    /**
     * If an item should be open by default, include its index in this array.
     */
    initialOpenItems: PropTypes.array,

    /**
     * Determines whether the content is available in DOM before opening the accordion
     */
    prerender: PropTypes.bool,

    /**
     * When set to true will force only one item open at a time.
     */
    singleItemOpen: PropTypes.bool,

    /**
     * Triggered every time an accordion item is starting to close.
     * This function is passed the id of the accordion item which is closing.
     * This prop can also be passed to an AccordionItem.
     */
    onClose: PropTypes.func,

    /**
     * Triggered every time an accordion item is finished closing.
     * This function is passed the id of the accordion item which closed.
     * This prop can also be passed to an AccordionItem.
     */
    onClosed: PropTypes.func,

    /**
     * Triggered every time an accordion item is starting to open.
     * This function is passed the id of the accordion item which is opening.
     * This prop can also be passed to an AccordionItem.
     */
    onOpen: PropTypes.func,

    /**
     * Triggered every time an accordion item has finished opening.
     * This function is passed the id of the accordion item which opened.
     * This prop can also be passed to an AccordionItem.
     */
    onOpened: PropTypes.func,
}

export default Accordion
