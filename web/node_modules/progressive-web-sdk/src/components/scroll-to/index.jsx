/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import Button from '../button'

const documentBodyElement = document.scrollingElement || document.body

const animateScroll = (targetPos, duration) => {
    const startPos = documentBodyElement.scrollTop
    const posDelta = targetPos - startPos
    // Assumes 60 frames per second
    const totalFrames = duration * 0.06

    // Robert Penner's easeOutCubic function
    const easeOutCubic = (currentFrame) => {
        return posDelta * (Math.pow(currentFrame / totalFrames - 1, 3) + 1) + startPos
    }

    const handleAnimationFrame = (currentFrame) => {
        if (currentFrame > totalFrames) {
            return
        }

        window.requestAnimationFrame(() => {
            documentBodyElement.scrollTop = easeOutCubic(currentFrame)
            handleAnimationFrame(currentFrame + 1)
        })
    }

    handleAnimationFrame(0)
}

const calculateSelectorPos = (selector) => {
    // Grab the first element returned by querySelectorAll
    const element = document.querySelectorAll(selector)[0]

    if (!element) {
        // If the element doesn't exist, return the current scroll position
        return documentBodyElement.scrollTop
    } else {
        // set focus on the element for a11y purposes
        element.focus()

        return element.getBoundingClientRect().top + window.pageYOffset
    }
}

const scrollToPosition = (target, duration) => {
    // Decide whether the target is a height or an element selector
    const targetPos = (typeof target === 'number') ? target : calculateSelectorPos(target)

    // If duration is zero, set the scroll position to the target's position
    if (duration === 0) {
        documentBodyElement.scrollTop = targetPos
    } else {
        animateScroll(targetPos, duration)
    }
}

/**
 * A wrapper-component for `<Button\>` that allows you to scroll to different points on the page.
 * This component can be passed either a page height (in pixels) or an element selector
 * as its target. If multiple elements with the target selector are found, it will scroll
 * to the first one returned by querySelectorAll().
 */
const ScrollTo = (props) => {
    const classes = classNames('pw-scroll-to', props.className)

    return (
        <Button
            {...props}
            className={classes}
            onClick={() => { scrollToPosition(props.target, props.duration) }}
        />
    )
}

ScrollTo.defaultProps = {
    duration: 500
}

ScrollTo.propTypes = {
    /**
     * Any children to be nested within this component.
     */
    children: PropTypes.node.isRequired,

    /**
     * The target's height position from the top of the page, in pixels OR
     * the target's selector, such as it's ID or class name.
     */
    target: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string
    ]).isRequired,

    /**
     * Adds values to the `class` attribute of the root element.
     */
    className: PropTypes.string,

    /**
     * If specified, overrides the default scrolling speed.
     */
    duration: PropTypes.number,
}

export default ScrollTo
