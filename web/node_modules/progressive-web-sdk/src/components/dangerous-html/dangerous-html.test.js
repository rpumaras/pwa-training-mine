/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import {mount} from 'enzyme'
import React from 'react'
import {jsdom} from 'jsdom'

import * as routing from '../../routing'

import DangerousHTML, {getClosestAnchor} from './index.jsx'
import {setRouteList} from '../../routing/is-react-route'

beforeAll(() => {
    window.Capture = {
        enable: jest.fn((html) => html.replace(/x-src/g, 'src'))
    }
})

afterAll(() => {
    delete window.Capture
})


test('DangerousHTML renders without errors', () => {
    const wrapper = mount(
        <DangerousHTML html="test">
            {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
        </DangerousHTML>
    )

    expect(wrapper.length).toBe(1)
})

test('DangerousHTML doesn\'t update if the html doesn\'t change', () => {
    const wrapper = mount(
        <DangerousHTML html="test">
            {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
        </DangerousHTML>
    )
    expect(wrapper.instance().shouldComponentUpdate({html: 'test'})).toBe(false)
})

test('DangerousHTML updates if the html does change', () => {
    const wrapper = mount(
        <DangerousHTML html="test">
            {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
        </DangerousHTML>
    )
    expect(wrapper.instance().shouldComponentUpdate({html: 'not a test'})).toBe(true)
})

test('DangerousHTML updates external resources if flag is enabled', () => {
    const wrapper = mount(
        <DangerousHTML html="<img x-src='1.jpg' />" enableExternalResources={true}>
            {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
        </DangerousHTML>
    )

    expect(wrapper.html()).toContain('<div><img src="1.jpg"></div>')
})

test('DangerousHTML doesn\'t update external resources if flag is disabled', () => {
    const wrapper = mount(
        <DangerousHTML html="<img x-src='1.jpg' />" enableExternalResources={false}>
            {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
        </DangerousHTML>
    )
    expect(wrapper.html()).toContain('<img x-src="1.jpg">')
})

describe('handles clicking on child links', () => {
    const originalBrowserHistory = routing.browserHistory
    routing.browserHistory = {
        push: jest.fn()
    }

    beforeEach(() => {
        routing.browserHistory.push.mockClear()
    })

    afterAll(() => {
        // Restore original implementation
        routing.browserHistory = originalBrowserHistory
    })

    test('DangerousHTML uses browserHistory if the link is a react route', () => {
        setRouteList([/test/])

        const wrapper = mount(
            <DangerousHTML html="">
                {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
            </DangerousHTML>
        )

        // wrapper.find('a') doesn't work because of dangerouslySetInnerHTML
        // which means we can't simulate a click on the link itself
        // as a result, we need to simulate a link click instead
        const eventMock = {
            target: {
                tagName: 'A',
                href: '/test'
            }
        }

        expect(routing.browserHistory.push).not.toHaveBeenCalled()
        wrapper.simulate('click', eventMock)
        expect(routing.browserHistory.push).toHaveBeenCalledWith(eventMock.target.href)
    })

    test('DangerousHTML does not use browserHistory if the link is not a react route', () => {
        setRouteList([])

        const wrapper = mount(
            <DangerousHTML html="">
                {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
            </DangerousHTML>
        )

        const eventMock = {
            target: {
                tagName: 'A',
                href: '/test'
            }
        }

        wrapper.simulate('click', eventMock)
        expect(routing.browserHistory.push).not.toHaveBeenCalled()
    })

    test('DangerousHTML does not use browserHistory if its enableBrowserHistoryForLinks prop is false', () => {
        setRouteList([/test/])

        const wrapper = mount(
            <DangerousHTML html="" enableBrowserHistoryForLinks={false}>
                {(htmlObj) => <div dangerouslySetInnerHTML={htmlObj} />}
            </DangerousHTML>
        )

        const eventMock = {
            target: {
                tagName: 'A',
                href: '/test'
            }
        }

        wrapper.simulate('click', eventMock)
        expect(routing.browserHistory.push).not.toHaveBeenCalled()
    })


    test('getClosestAnchor returns the given element if it\'s already an anchor', () => {
        const anchor = jsdom('<a href=""></a>').getElementsByTagName('a')[0]
        expect(getClosestAnchor(anchor).tagName).toEqual('A')
    })

    test('getClosestAnchor returns the closest anchor when given an inner element that is non-anchor', () => {
        const image = jsdom('<a href=""><div><img /></div></a>').getElementsByTagName('img')[0]

        expect(getClosestAnchor(image).tagName).toEqual('A')
    })

    test('getClosestAnchor returns null when given there is no closest anchor', () => {
        const div = jsdom('<div />').getElementsByTagName('div')[0]

        expect(getClosestAnchor(div)).toEqual(null)
    })
})
