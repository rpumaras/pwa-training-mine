/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

// Default to matching any path on the current origin
let reactRoutes = []
let blacklist = []

export const setRouteList = (regexes) => {
    reactRoutes = regexes
}
export const setBlacklist = (routes) => {
    blacklist = routes.map((text) => RegExp(text))
}

export const getRouteList = () => reactRoutes
export const getBlacklist = () => blacklist

export const ORIGIN = (
    // The else clause is only for real browsers.
    window.location.href === 'about:blank'
        ? 'https://www.mobify.com' // for testing!
        /* istanbul ignore next */
        : window.location.origin
)

export const isBlacklisted = (href) => {
    return blacklist.some((regex) => regex.test(href))
}

export const isReactRoute = (href) => {
    // Have blacklisted routes fall through immediately
    if (isBlacklisted(href)) {
        return false
    }

    // We don't match on fragments and queries (yet?)
    if (href.includes('#') || href.includes('?')) {
        return isReactRoute(href.split('#')[0].split('?')[0])
    }

    if (href.startsWith(ORIGIN)) {
        return isReactRoute(href.replace(ORIGIN, ''))
    }

    if (href.startsWith('http') || href.startsWith('//')) {
        return false
    }

    return reactRoutes.some((regex) => regex.test(href))
}

export default isReactRoute
