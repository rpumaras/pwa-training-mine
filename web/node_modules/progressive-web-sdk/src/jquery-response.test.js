/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import {waitForCondition, capturingIsLoaded, jQueryIsLoaded, jqueryResponse} from './jquery-response'

jest.mock('./get-jquery-html')
import getJQueryHtml from './get-jquery-html'

jest.useFakeTimers()

test('waitForCondition resolves when the condition is true', () => {
    const condition = jest.fn()
    condition.mockReturnValue(false)

    const waitPromise = waitForCondition(condition)

    jest.runOnlyPendingTimers()

    condition.mockReturnValueOnce(true)

    jest.runOnlyPendingTimers()

    return waitPromise.then(() => {
        expect(condition).toHaveBeenCalledTimes(3)
    })
})

test('capturingIsLoaded checks for window.Capture', () => {
    expect(capturingIsLoaded()).toBe(false)
    window.Capture = {}
    expect(capturingIsLoaded()).toBe(true)
    window.Capture = {}
})

window.Progressive = {}

test('jQueryIsLoaded checks for window.$', () => {
    expect(jQueryIsLoaded()).toBe(false)
    window.$ = {}
    expect(jQueryIsLoaded()).toBe(true)
    window.$ = undefined
})

test('jQueryIsLoaded checks for window.Progressive.$', () => {
    expect(jQueryIsLoaded()).toBe(false)
    window.Progressive.$ = {}
    expect(jQueryIsLoaded()).toBe(true)
    window.Progressive.$ = undefined
})

// The following two tests are separate so that they don't step on each other's
// use of the `window` global.
test('jqueryResponse disables the HTML and passes it with (local) jQuery', () => {
    getJQueryHtml.mockClear()
    getJQueryHtml.mockReturnValueOnce({jquery: 'true'})
    const $ = () => {}
    window.Progressive = {$}
    window.$ = undefined
    window.Capture = {disable: jest.fn()}
    window.Capture.disable.mockReturnValue('disabled HTML')

    return jqueryResponse({text: () => Promise.resolve('testText')})
        .then(([selectorLib, jqueryObject]) => {
            expect(selectorLib).toBe($)
            expect(window.Capture.disable).toHaveBeenLastCalledWith('testText', 'x-')
            expect(getJQueryHtml).toHaveBeenLastCalledWith($, 'disabled HTML')
            expect(jqueryObject).toEqual({jquery: 'true'})
        })
})

test('jqueryResponse disables the HTML and passes it with (global) jQuery', () => {
    getJQueryHtml.mockClear()
    getJQueryHtml.mockReturnValueOnce({jquery: 'true'})
    const $ = () => {}
    window.Progressive = {}
    window.$ = $
    window.Capture = {disable: jest.fn()}
    window.Capture.disable.mockReturnValue('disabled HTML')

    return jqueryResponse({text: () => Promise.resolve('testText')})
        .then(([selectorLib, jqueryObject]) => {
            expect(selectorLib).toBe($)
            expect(window.Capture.disable).toHaveBeenLastCalledWith('testText', 'x-')
            expect(getJQueryHtml).toHaveBeenLastCalledWith($, 'disabled HTML')
            expect(jqueryObject).toEqual({jquery: 'true'})
        })
})
