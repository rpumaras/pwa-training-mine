/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

import {DEFAULT_CHANNEL} from '../store/push-messaging/constants'

/**
 * Helper method to determine if visitor is subscribed to this channel name
 *
 * @param {boolean} isSubscribed - whether the visitor is currently subscribed to any channel
 * @param {array} channels - The list of channels the visitor is subscribed to
 * @param {string} [channelName] - The channel name for this ask instance; if
 *                                 undefined then assumes broadcast channel
 * @returns {boolean} - If the user is subscribed to the optional channel name
 */
export const isSubscribedToChannel = (isSubscribed, channels, channelName) => {
    return isSubscribed && (channelName ? channels.includes(channelName) : true)
}

/**
 * Determines whether an ask should be shown, based on the following conditions:
 * 1. Messaging Client is ready and says the visitor is eligible for push notifications
      (i.e. has not revoked push notification permissions or has granted them already)
 * 2. The visitor is subscribed, but has not yet subscribed to this channel
 * 3. There is no visit countdown in progress for this channel (or it was disabled)
 * 4. Visitor has seen the required number of pages on the site (which may be disabled)
 *
 * @param {function} logger - Is bound to the correct logger; for testing
 * @param {object} props - Properties used to determine whether to ask
 * @returns {boolean} - true if "ask" can be shown, false otherwise
 */
export const shouldAsk = (
    logger,
    {
        showOnPageCount,
        channelName,
        isSubscribed,
        canSubscribe,
        channels,
        pageCount,
        visitCountdowns
    },
    alreadyShown
) => {
    // If `showOnPageCount` is false, then we disable page counts as a guard
    const modulus = showOnPageCount ? pageCount % showOnPageCount : 0
    const visitCountdown = visitCountdowns[channelName || DEFAULT_CHANNEL]
    let message = false

    if (!canSubscribe) {
        message = 'Unable to subscribe. Messaging Client is not ready or notification permissions are blocked'
    } else if (isSubscribedToChannel(isSubscribed, channels, channelName)) {
        message = 'Already subscribed'
    } else if (visitCountdown > 0) {
        message = `Deferred until ${visitCountdown} more visit(s)`
    } else if (modulus > 0) {
        if (!alreadyShown) {
            // This avoids "flip-flopping" when the UI is already shown and the
            // page count changes. i.e. once it's shown, ignore page count changes
            message = `Waiting for ${showOnPageCount - modulus} more page visit(s)`
        }
    }

    const channelMessage = channelName ? `for channel ${channelName}` : ''

    if (message !== false) {
        logger.log(`Should not ask ${channelMessage}: ${message}`)
        return false
    }

    logger.log('Can ask', channelMessage)
    return true
}

/**
 * Return true if and only if both the enabled and supported flags in
 * window.Progressive.Messaging are truthy. These flags are set by the
 * PWA loader, so they may be tested at any time after the PWA is loaded.
 * If this function is called before the loader runs, it will return
 * false.
 *
 * If this function returns false, then Messaging is not available at all,
 * and no UI for it need be (or should be) shown.
 * If this function returns true, then Messaging has been configured in the
 * PWA and the browser supports it, *but* the user may have blocked
 * notifications, or not be subscribed, or be running in a mode (such as
 * incognito) where subscriptions can't be created. Information on the
 * subscription status is provided when the Promise stored in
 * window.Progressive.MessagingClientInitPromise is resolved - see
 * the code in src/components/push-messaging-controller for details.
 */
export const isMessagingSupported = () => {
    const progressive = window.Progressive || {}
    const messaging = progressive.Messaging || {}
    // Always return a boolean
    return Boolean(messaging.enabled && messaging.supported)
}
