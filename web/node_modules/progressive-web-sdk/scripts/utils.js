/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-disable strict */
'use strict'

const path = require('path')
const git = require('git-rev-sync')

const archiver = require('archiver')

const fileUtils = require('./file-utils')

const SDK_VERSION = require('../package.json').version
const DEFAULT_DOCS_URL = 'http://adaptivejs.mobify.com/'

const Utils = {}

// Returns a bundle object ready to upload to the Release Console.
Utils.buildObject = (archivePath, message) => {
    return fileUtils.readFileAsync(archivePath)
        .catch((err) => Utils.fail(err))
        .then((data) => {
            // Encode data and assemble object to upload
            const base64data = data.toString('base64')

            return {
                message: message || '',
                encoding: 'base64',
                data: base64data
            }
        })
}

Utils.createBundle = (buildDirectory, projectSlug, destination) => {
    return Utils.exists(buildDirectory)
        .catch(() => Utils.fail(
            /* eslint-disable max-len */
            `[Error: Build directory at path "${path.join(process.cwd(), buildDirectory)}" not found.]\n` +
            'You must first run the Progressive Web SDK build process before uploading a bundle.'
            /* eslint-disable max-len */
        ))
        .then(() => {
            const output = fileUtils.createWriteStream(destination)
            const archive = archiver('tar')

            archive.on('error', Utils.fail)

            archive.pipe(output)

            archive
                .bulk([{
                    expand: true,
                    cwd: buildDirectory,
                    src: ['**'],
                    // Destination path must be of form:
                    // project_slug/bld/file_name
                    dest: path.join(projectSlug, 'bld')
                }])
                .finalize()


            return new Promise((resolve) => output.on('finish', resolve))
        })
}

Utils.errorForStatus = (response) => {
    const status = response.statusCode

    if (status < 400) {
        return false
    }

    let error
    try {
        error = JSON.parse(response.body)
    } catch (err) {
        // We set this to an empty object to resolve issues where response.body
        // is not a JSON or properly-formatted JSON object
        // e.g. response.body === 'Unauthorized'
        error = {}
    }

    return new Error([
        `HTTP ${status}`,
        error.message || response.body,
        `For more information visit ${error.docs_url || DEFAULT_DOCS_URL}$`
    ].join('\n'))
}

Utils.exists = fileUtils.statAsync

/* istanbul ignore next */
Utils.fail = (errorMessage) => {
    console.error(errorMessage)
    process.exit(1)
}

Utils.getRequestHeaders = (additionalHeaders) =>
    Object.assign(
        {'User-Agent': `progressive-web-sdk#${SDK_VERSION}`},
        additionalHeaders
    )

/* istanbul ignore next */
Utils.getSettingsPath = () => `${process.platform === 'win32' ? process.env.USERPROFILE : process.env.HOME}/.mobify`

Utils.readCredentials = (filepath) => {
    return Utils.exists(filepath)
        .catch(/* istanbul ignore next */() => Utils.fail(
            `Credentials file "${filepath}" not found.\n` +
            'Visit https://cloud.mobify.com/account for ' +
            'steps on authorizing your computer to push bundles.'
        ))
        .then(() => fileUtils.readFileAsync(filepath))
        .then((creds) => {
            creds = JSON.parse(creds)

            return {
                username: creds.username,
                api_key: creds.api_key
            }
        })
        .catch(/* istanbul ignore next */(e) => Utils.fail(
            `Error parsing "${filepath}".\n` +
            `[${e}]`
        ))
}

Utils.setDefaultMessage = () => {
    try {
        return `${git.branch()}: ${git.short()}`
    } catch (err) {
        if (err.code === 'ENOENT') {
            console.log('Please run "git init" to initialize a new Git repository.')
        }
        return 'Mobify Bundle'
    }
}

Utils.delayedPromise = (value, delay) => {
    return new Promise(
        (resolve) => {
            setTimeout(
                () => resolve(value),
                delay
            )
        }
    )
}

module.exports = Utils
