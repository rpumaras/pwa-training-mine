/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

const {getDefaultValue, getPropType, getImportVars, prepareRecord, storeAlias} = require('./prepare-record')

/* eslint-disable max-nested-callbacks */

describe('getDefaultValue', () => {
    test('should leave any defined default value alone', () => {
        ['five', '', 0, null].forEach((defaultValue) => {
            expect(getDefaultValue({defaultValue})).toBe(defaultValue)
        })
    })

    test('should return \'null\' for any nullable, custom or not', () => {
        [false, true].forEach((custom) => {
            expect(getDefaultValue({custom, type: 'Nullable', nullable: true}))
                .toBe('null')
        })
    })

    test('should return a constructor expression for any custom type', () => {
        expect(getDefaultValue({type: 'CustomType', custom: true})).toBe('new CustomType()')
    })

    test('should return standard defaults for the built-in types', () => {
        [
            ['string', '\'\''],
            ['number', '0'],
            ['boolean', 'false'],
            ['object', 'Immutable.Map({})']
        ].forEach(([type, defaultValue]) => {
            expect(getDefaultValue({type})).toBe(defaultValue)
        })
    })
})


describe('getPropType', () => {
    test('should leave any predefined value alone', () => {
        ['five', '', 0, null].forEach((propType) => {
            expect(getPropType({propType})).toBe(propType)
        })
    })

    test('should return a custom proptype name for a custom type', () => {
        expect(getPropType({type: 'CustomType', custom: true})).toBe('CustomTypePropType.isRequired')
    })

    test('should return standard prop types for the built-in types', () => {
        [
            ['string', 'PropTypes.string.isRequired'],
            ['number', 'PropTypes.number.isRequired'],
            ['boolean', 'PropTypes.boolean.isRequired'],
            ['object', 'PropTypes.instanceOf(Immutable.Map).isRequired']
        ].forEach(([type, propType]) => {
            expect(getPropType({type})).toBe(propType)
        })
    })

    test('should not append .isRequired if type is nullable', () => {
        expect(getPropType({type: 'CustomType', custom: true, nullable: true})).toBe('CustomTypePropType')
        expect(getPropType({type: 'string', nullable: true})).toBe('PropTypes.string')
    })
})

describe('getImportVars', () => {
    test('should return null if the type is not custom', () => {
        expect(getImportVars({custom: false})).toBeNull()
    })

    test('should return just the proptype if the type is nullable', () => {
        expect(getImportVars({custom: true, nullable: true, type: 'Test'}))
            .toBe('{TestPropType}')
    })

    test('should return the type and proptype for other custom types', () => {
        expect(getImportVars({custom: true, type: 'First'}))
            .toBe('First, {FirstPropType}')
        expect(getImportVars({custom: true, type: 'Second', defaultValue: '{}'}))
            .toBe('Second, {SecondPropType}')
    })
})

test('prepareRecord sets the prop type, default value, and import vars of all contents', () => {
    const inputRecord = {
        contents: [
            {type: 'number'},
            {type: 'Data', custom: true}
        ]
    }
    const outputRecord = {
        contents: [
            {
                type: 'number',
                propType: 'PropTypes.number.isRequired',
                defaultValue: '0',
                importVars: null
            },
            {
                type: 'Data',
                custom: true,
                propType: 'DataPropType.isRequired',
                defaultValue: 'new Data()',
                importVars: 'Data, {DataPropType}'
            }
        ]
    }
    expect(prepareRecord(inputRecord)).toEqual(outputRecord)
})

describe('storeAlias', () => {
    test('aliases one known primitive type to another name', () => {
        expect(getDefaultValue({type: 'Description'})).toBeUndefined()
        expect(getPropType({type: 'Description', nullable: true})).toBe('undefined')

        storeAlias('Description', 'string')
        expect(getDefaultValue({type: 'Description'})).toBe('\'\'')
        expect(getPropType({type: 'Description'})).toBe('PropTypes.string.isRequired')
    })
})
