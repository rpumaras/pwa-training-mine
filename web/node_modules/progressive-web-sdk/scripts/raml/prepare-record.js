/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

const _ = require('lodash')

const STANDARD_DEFAULTS = {
    string: '\'\'',
    number: '0',
    boolean: 'false',
    object: 'Immutable.Map({})'
}

const STANDARD_PROPTYPES = {
    string: 'PropTypes.string',
    number: 'PropTypes.number',
    boolean: 'PropTypes.boolean',
    object: 'PropTypes.instanceOf(Immutable.Map)'
}

const storeAlias = (name, type) => {
    STANDARD_DEFAULTS[name] = STANDARD_DEFAULTS[type]
    STANDARD_PROPTYPES[name] = STANDARD_PROPTYPES[type]
}

const getDefaultValue = ({defaultValue, type, custom, nullable}) => {
    if (!_.isUndefined(defaultValue)) {
        return defaultValue
    }
    if (nullable) {
        return 'null'
    }
    if (custom) {
        return `new ${type}()`
    }
    return STANDARD_DEFAULTS[type]
}

const basePropType = (type, custom) => { return custom ? `${type}PropType` : STANDARD_PROPTYPES[type] }

const getPropType = ({type, custom, propType, nullable}) => {
    if (!_.isUndefined(propType)) {
        return propType
    }

    return `${basePropType(type, custom)}${nullable ? '' : '.isRequired'}`
}

const getImportVars = ({type, custom, nullable}) => {
    if (!custom) {
        return null
    }
    if (nullable) {
        return `{${type}PropType}`
    }
    return `${type}, {${type}PropType}`
}

const ATTRIBUTE_PROCESSORS = {
    propType: getPropType,
    defaultValue: getDefaultValue,
    importVars: getImportVars
}

const prepareItem = (item) => Object.assign(
    {},
    item,
    _.mapValues(ATTRIBUTE_PROCESSORS, (fn) => fn(item))
)

const prepareRecord = (record) => Object.assign(
    {},
    record,
    {contents: record.contents.map(prepareItem)}
)

module.exports = {getDefaultValue, getPropType, getImportVars, prepareRecord, storeAlias}
