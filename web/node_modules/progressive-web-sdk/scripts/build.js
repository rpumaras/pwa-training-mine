#!/usr/bin/env node
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/* eslint-disable strict, import/no-commonjs */
/* eslint-env node */
'use strict'

const Promise = require('bluebird')

const copy = Promise.promisify(require('copy'))
const exec = require('child_process').exec
const consoleOutput = require('./console-output')
const rimraf = Promise.promisify(require('rimraf'))

const cleanDist = () => {
    console.log('Cleaning dist/')
    return rimraf('dist/')
        .catch((error) => {
            console.error(`Error while cleaning dist/: ${error}`)
        })
}

const transpileSrc = () => {
    const child = exec('babel src -x ".js",".jsx" --ignore "*.test.js","test.js" --out-dir dist')

    child.stderr.on('data', (data) => {
        console.log(data)
    })

    child.stdout.on('data', (data) => {
        console.log(data)
    })

    return new Promise((resolve, reject) => {
        child.addListener('error', reject)
        child.addListener('exit', resolve)
    })
    .catch((error) => {
        console.error(`exec error: ${error}`)
    })
}

const copyScss = () => {
    console.log('Copying scss files to dist/')

    return copy('src/components/**/*.scss', 'dist/components/')
        .catch((error) => {
            console.error(`Error copying scss: ${error}`)
        })
}

const copySvg = () => {
    console.log('Copying svg files to dist/')

    return copy('src/components/**/*.svg', 'dist/components/')
        .catch((error) => {
            console.error(`Error copying scss: ${error}`)
        })
}

cleanDist()
    .then(transpileSrc)
    .then(copyScss)
    .then(copySvg)
    .then(() => {
        consoleOutput.printDivider()
        consoleOutput.greenWrite('Successfully built!\n')
    })
