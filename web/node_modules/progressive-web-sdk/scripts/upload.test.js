/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

jest.mock('./build-request')
const buildRequest = require('./build-request')
jest.mock('./utils')
const Utils = require('./utils')

const uploadBundle = require('./upload.js')

test('uploadBundle fails with no options, no project slug, or empty project slug', () => {
    [undefined, {}, {projectSlug: ''}].forEach((options) => {
        Utils.fail.mockClear()
        Utils.fail.mockImplementationOnce(() => { throw new Error() })

        try {
            uploadBundle(options)
        } catch (e) {}
        expect(Utils.fail).toBeCalledWith('[Error: You must provide a Mobify Cloud project slug to upload a bundle.]')
    })
})

test('calls createBundle with sensible defaults if a valid project slug is available', () => {
    Utils.createBundle.mockClear()
    Utils.createBundle.mockReturnValueOnce(Promise.reject())

    Utils.exists.mockClear()

    return uploadBundle({projectSlug: 'mobify-test'})
        .catch(() => true)
        .then(() => {
            expect(Utils.createBundle).toBeCalled()
            expect(Utils.createBundle.mock.calls[0][0]).toBe('build')
            expect(Utils.createBundle.mock.calls[0][1]).toBe('mobify-test')
            expect(Utils.createBundle.mock.calls[0][2]).toBe('build.tar')
            expect(Utils.exists).not.toBeCalled()
        })
})

test('calls Utils.exists to check for the bundle\'s existence', () => {
    Utils.createBundle.mockClear()
    Utils.createBundle.mockReturnValueOnce(Promise.resolve())

    Utils.exists.mockClear()
    Utils.exists.mockReturnValueOnce(Promise.reject())

    Utils.buildObject.mockClear()

    return uploadBundle({projectSlug: 'mobify-test'})
        .catch(() => true)
        .then(() => {
            expect(Utils.createBundle).toBeCalled()
            expect(Utils.exists).toBeCalled()
            expect(Utils.exists.mock.calls[0][0]).toBe('build.tar')
            expect(Utils.buildObject).not.toBeCalled()
        })
})

test('fetches credentials if the bundle exists', () => {
    Utils.createBundle.mockReturnValueOnce(Promise.resolve())

    Utils.exists.mockClear()
    Utils.exists.mockReturnValueOnce(Promise.resolve())

    Utils.buildObject.mockClear()
    Utils.buildObject.mockReturnValueOnce(Promise.reject())

    Utils.readCredentials.mockClear()
    Utils.readCredentials.mockReturnValueOnce(Promise.reject())

    return uploadBundle({projectSlug: 'mobify-test', message: 'test time'})
        .catch(() => true)
        .then(() => {
            expect(Utils.exists).toBeCalled()
            expect(Utils.readCredentials).toBeCalled()
        })
})

test('builds an object with the message if the bundle exists', () => {
    Utils.createBundle.mockReturnValueOnce(Promise.resolve())

    Utils.exists.mockClear()
    Utils.exists.mockReturnValueOnce(Promise.resolve())

    Utils.buildObject.mockClear()
    Utils.buildObject.mockReturnValueOnce(Promise.reject())

    return uploadBundle({projectSlug: 'mobify-test', message: 'test time'})
        .catch(() => true)
        .then(() => {
            expect(Utils.exists).toBeCalled()
            expect(Utils.buildObject).toBeCalledWith('build.tar', 'test time')
        })
})

test('makes a request with a JSON buffer of the bundle', () => {
    Utils.createBundle.mockReturnValueOnce(Promise.resolve())
    Utils.exists.mockReturnValueOnce(Promise.resolve())

    Utils.buildObject.mockClear()
    const mockObject = {test: true}
    Utils.buildObject.mockReturnValueOnce(Promise.resolve(mockObject))

    Utils.readCredentials.mockReturnValueOnce(Promise.resolve({}))

    buildRequest.mockClear()
    buildRequest.mockReturnValueOnce(Promise.resolve({}))

    return uploadBundle({projectSlug: 'mobify-test', message: 'test time'})
        .catch(() => true)
        .then(() => {
            expect(Utils.buildObject).toBeCalled()
            expect(buildRequest).toBeCalled()
            const requestBuffer = buildRequest.mock.calls[0][1]
            expect(requestBuffer).toBeInstanceOf(Buffer)
            expect(JSON.parse(requestBuffer.toString())).toEqual(mockObject)
            const requestOptions = buildRequest.mock.calls[0][0]
            expect(requestOptions.body).toBe(requestBuffer)
            expect(requestOptions.dataLength).toBe(requestBuffer.length)
            expect(requestOptions.projectSlug).toBe('mobify-test')
        })
})
