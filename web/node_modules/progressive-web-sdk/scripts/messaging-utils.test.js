/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */
/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

const fs = require('fs')

jest.mock('request')
const Request = require('request')
const tmp = require('tmp')

const Utils = require('./utils')
const MessagingUtils = require('./messaging-utils')

let realFail
let realReadCredentials

beforeEach(() => {

    realFail = Utils.fail
    Utils.fail = jest.fn()

    realReadCredentials = Utils.readCredentials
    Utils.readCredentials = jest.fn(
        () => (
            Promise.resolve(
                {
                    username: 'tester',
                    api_key: '0xCAFEFADE'
                }
            )
        )
    )
})

afterEach(() => {
    Utils.fail = realFail
    Utils.readCredentials = realReadCredentials
})


describe('generateCSR', () => {
    let realWriteFileSync

    beforeEach(() => {
        realWriteFileSync = fs.writeFileSync
        fs.writeFileSync = jest.fn()
    })

    afterEach(() => {
        fs.writeFileSync = realWriteFileSync
    })

    test('generateCSR success', () => {
        const fakeCSRFile = 'this is a fake CSR file'
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    null,   // error
                    {
                        statusCode: 200
                    },
                    fakeCSRFile
                )
            }
        )

        return MessagingUtils.generateCSR(
            {
                // options
                siteConfig: {
                    apn_app_id: 'com.mobify.app',
                    apn_native_certificate_name: 'com.mobify.app'
                },
                messagingPath: './messaging',
                messagingSiteId: 'merlinspotions',
                argv: {
                    $0: 'the-command'
                }
            }
        )
            .then(
                () => {
                    const writeCall = fs.writeFileSync.mock.calls[0]
                    expect(writeCall).toBeTruthy()
                    expect(writeCall[0]).toEqual(
                        './messaging/com.mobify.app.csr'
                    )
                    expect(writeCall[1]).toEqual(fakeCSRFile)
                }
            )

    })

    test('generateCSR failure in POST', () => {
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    'fake failure',
                    {}
                )
            }
        )

        return MessagingUtils.generateCSR(
            {
                // options
                siteConfig: {
                    apn_app_id: 'com.mobify.app',
                    apn_native_certificate_name: 'com.mobify.app'
                },
                messagingPath: './messaging',
                messagingSiteId: 'merlinspotions',
                argv: {
                    $0: 'the-command'
                }
            }
        )
            .catch(
                (error) => {
                    expect(error).toBeDefined()
                    expect(Utils.fail).toHaveBeenCalledTimes(2)
                    expect(fs.writeFileSync).toHaveBeenCalledTimes(0)
                }
            )

    })

    test('generateCSR failure in config', () => {
        MessagingUtils.generateCSR(
            {
                // options
                siteConfig: {
                },
                messagingPath: './messaging',
                messagingSiteId: 'merlinspotions',
                argv: {
                    $0: 'the-command'
                }
            }
        )
        expect(Utils.fail).toHaveBeenCalledTimes(1)
        expect(fs.writeFileSync).toHaveBeenCalledTimes(0)
    })
})


describe('uploadToBackend', () => {
    let messagingDirectory
    let messagingPath

    beforeEach(() => {
        messagingDirectory = tmp.dirSync()
        expect(fs.existsSync(messagingDirectory.name)).toBeTruthy()

        // Put some files in the directory
        messagingPath = messagingDirectory.name
        fs.writeFileSync(
            `${messagingPath}/abc.yaml`,
            'This is not a real YAML file'
        )
        fs.writeFileSync(
            `${messagingPath}/abc.cer`,
            'This is not a real CER file'
        )

        expect(fs.readdirSync(messagingPath)).toHaveLength(2)

        Request.mockReset()
        Utils.fail.mockReset()
    })

    afterEach(() => {
        if (messagingDirectory) {
            fs.readdirSync(messagingPath).forEach(
                (filename) => fs.unlinkSync(`${messagingPath}/${filename}`)
            )
            messagingDirectory.removeCallback()
        }
    })

    test('uploadToBackend success', () => {
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    null,   // error
                    {
                        statusCode: 200
                    },
                    JSON.stringify({
                        info: ['info'],
                        warning: 'a single warning'
                    })
                )
            }
        )

        // Call upload...
        return MessagingUtils.uploadConfig(
            {
                messagingSiteId: 'test_site_id',
                messagingPath: `${messagingPath}/`,
                credentials: {
                    username: 'somebody',
                    api_key: 'some-api-key'
                }
            }
        )
        .then(() => {
            expect(Utils.fail).toHaveBeenCalledTimes(0)
            expect(Request).toHaveBeenCalledTimes(1)
            const call = Request.mock.calls[0][0]
            expect(call.uri).toEqual(
                'https://webpush.mobify.net/api/v2/sites/test_site_id/'
            )
            expect(call.method).toEqual('POST')
            expect(call.headers['Content-Type']).toEqual('application/tar+gzip')
        })

    })

    test('uploadToBackend failure (archiver)', () => {
        return MessagingUtils.uploadConfig(
            {
                messagingSiteId: 'test_site_id',
                messagingPath: 'there-is-no-such-directory'
            }
        )
        .catch(() => {
            expect(Utils.fail).toHaveBeenCalledTimes(1)
            expect(Request).toHaveBeenCalledTimes(0)
        })

    })

    test('uploadToBackend failure (500)', () => {
        Request.mockReset()
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    null,   // error
                    {
                        statusCode: 500
                    }
                )
            }
        )

        // Call upload...
        return MessagingUtils.uploadConfig(
            {
                messagingSiteId: 'test_site_id',
                messagingPath,
                credentials: {
                    username: 'somebody',
                    api_key: 'some-api-key'
                }
            }
        )
        .catch(() => {
            expect(Utils.fail).toHaveBeenCalledTimes(1)
            expect(Request).toHaveBeenCalledTimes(1)
        })

    })

    test('uploadToBackend failure (POST error)', () => {
        Request.mockReset()
        Request.mockImplementation(
            (options, callback) => {
                callback('some error occurred')
            }
        )

        // Call upload...
        return MessagingUtils.uploadConfig(
            {
                messagingSiteId: 'test_site_id',
                messagingPath,
                credentials: {
                    username: 'somebody',
                    api_key: 'some-api-key'
                }
            }
        )
        .catch(() => {
            expect(Utils.fail).toHaveBeenCalledTimes(1)
            expect(Request).toHaveBeenCalledTimes(1)
        })

    })
})

describe('sendTestMessage', () => {

    const theOptions = {
        siteConfig: {
            target_domain: 'www.merlinspotions.com'
        },
        messagingSiteId: 'merlinspotions',
        argv: {
            $0: 'the-command',
            client_id: '0123456789abcdef',
            title: 'the title',
            text: 'the text'
        }
    }

    test('sendTestMessage success', () => {
        const responses = [
            {
                message_id: '426223f7-f0c5-4db3-a65d-489a348bb02c'
            },
            {
                delivery_id: '93df2359-c5ea-4336-a171-a7d1f4a47bad',
                state: 'PENDING'
            },
            {
                delivery_id: '93df2359-c5ea-4336-a171-a7d1f4a47bad',
                state: 'PENDING'
            },
            {
                delivery_id: '93df2359-c5ea-4336-a171-a7d1f4a47bad',
                state: 'DELIVERED'
            }
        ]
        Request.mockReset()
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    null,   // error
                    {
                        statusCode: 200
                    },
                    JSON.stringify(responses.shift())
                )
            }
        )

        return MessagingUtils.sendTestMessage(theOptions)
            .then(() => {
                expect(Utils.fail).toHaveBeenCalledTimes(0)
                expect(Request).toHaveBeenCalledTimes(4)

                let call = Request.mock.calls[0][0]
                expect(call.uri).toEqual(
                    'https://webpush.mobify.net/api/v2/sites/merlinspotions/messages/'
                )
                expect(call.method).toEqual('POST')
                let body = JSON.parse(call.body)
                expect(body.title).toEqual('the title')
                expect(body.text).toEqual('the text')
                expect(body.url).toEqual('https://www.merlinspotions.com/')

                call = Request.mock.calls[1][0]
                expect(call.uri).toEqual(
                    'https://webpush.mobify.net/api/v2/sites/merlinspotions/deliveries/'
                )
                expect(call.method).toEqual('POST')
                body = JSON.parse(call.body)
                expect(body.message_id).toEqual('426223f7-f0c5-4db3-a65d-489a348bb02c')
                expect(body.client_id).toEqual('0123456789abcdef')

                call = Request.mock.calls[2][0]
                expect(call.uri).toEqual(
                    'https://webpush.mobify.net/api/v2/sites/merlinspotions/deliveries/93df2359-c5ea-4336-a171-a7d1f4a47bad/'
                )
                expect(call.method).toEqual('GET')

                call = Request.mock.calls[3][0]
                expect(call.uri).toEqual(
                    'https://webpush.mobify.net/api/v2/sites/merlinspotions/deliveries/93df2359-c5ea-4336-a171-a7d1f4a47bad/'
                )
                expect(call.method).toEqual('GET')
            })
    })

    test('sendTestMessage failure', () => {
        Request.mockReset()
        Request.mockImplementation(
            (options, callback) => {
                callback(
                    null,   // error
                    {
                        statusCode: 200
                    },
                    JSON.stringify(
                        {
                            error_code: 'some-error-code',
                            error: 'some error message'
                        }
                    )
                )
            }
        )

        return MessagingUtils.sendTestMessage(theOptions)
            .catch(() => {
                expect(Utils.fail).toHaveBeenCalledTimes(1)
                expect(Request).toHaveBeenCalledTimes(1)
            })
    })
})
